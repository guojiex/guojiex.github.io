{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/BingSiteAuth.xml","path":"BingSiteAuth.xml","modified":0,"renderable":0},{"_id":"source/images/default_avatar.jpg","path":"images/default_avatar.jpg","modified":0,"renderable":0},{"_id":"source/media/14622903471800.jpg","path":"media/14622903471800.jpg","modified":0,"renderable":0},{"_id":"source/media/14622903637484.jpg","path":"media/14622903637484.jpg","modified":0,"renderable":0},{"_id":"source/media/14652928631774.jpg","path":"media/14652928631774.jpg","modified":0,"renderable":0},{"_id":"source/media/14627231086908.jpg","path":"media/14627231086908.jpg","modified":0,"renderable":0},{"_id":"source/media/14641731409027.jpg","path":"media/14641731409027.jpg","modified":0,"renderable":0},{"_id":"source/media/14641735148741.jpg","path":"media/14641735148741.jpg","modified":0,"renderable":0},{"_id":"source/media/14649509422800.jpg","path":"media/14649509422800.jpg","modified":0,"renderable":0},{"_id":"source/media/14652928449608.jpg","path":"media/14652928449608.jpg","modified":0,"renderable":0},{"_id":"source/media/14649508833981.jpg","path":"media/14649508833981.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/media/14641733223806.jpg","path":"media/14641733223806.jpg","modified":0,"renderable":0},{"_id":"source/media/14623044788056.jpg","path":"media/14623044788056.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/media/14623043913578.jpg","path":"media/14623043913578.jpg","modified":0,"renderable":0},{"_id":"source/media/14623044008358.jpg","path":"media/14623044008358.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"6a2529809fb48aa8234dfaa9c76b00fb868abcac","modified":1465293541000},{"_id":"source/BingSiteAuth.xml","hash":"74d66c28467c0e45c25d3c9e46a9d7e6f936d745","modified":1465282218000},{"_id":"source/.DS_Store","hash":"0bf4313ff4912fd709dbdadca72ae040c0cb48e3","modified":1468768300000},{"_id":"source/baidu_verify_s5eBIhA32I.html","hash":"4c04d479f8f8f610789875854b6894eabf73babd","modified":1465280321000},{"_id":"source/googleeb1c08e33c19207e.html","hash":"a9a051a32aa33cdb21d3754bba483437421bc28f","modified":1465280708000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1461353907000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1461353907000},{"_id":"themes/next/.DS_Store","hash":"2988727d838141a6bff26974c5e29bf62cae1eda","modified":1466868194000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1461353907000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1461353907000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1461353907000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1461353907000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1461353907000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1461353907000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1461353907000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1461353907000},{"_id":"themes/next/_config.yml","hash":"de160fd4bd8a1d3136ca6be55f363ed52cdda534","modified":1466869010000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1461353907000},{"_id":"source/_posts/CMU-JIE选课心得.md","hash":"ac019c2666006a3bdfbe14635f189d6d84d49aee","modified":1465289794000},{"_id":"source/_posts/Cloud-computing中学到的linux指令.md","hash":"3540171e908e87fa8450d8da7f39490aa5c21f2f","modified":1465285868000},{"_id":"source/_posts/DesignTwitter-Medium.md","hash":"cdfb0c3812e3896dc43912bc9e8b572615cb1d5c","modified":1466913772000},{"_id":"source/_posts/Step-0.md","hash":"f484c1618d4546ccf29103f3ce664ed329fc561e","modified":1462722061000},{"_id":"source/_posts/Step-1静态模板.md","hash":"f08867d01ee2ee1e29de5d01a3f7779a61a4d726","modified":1462722077000},{"_id":"source/_posts/Step2-Angularjs模板.md","hash":"5402c3244c3cd4f342a0e74d8855e1b9670af29b","modified":1462723896000},{"_id":"source/_posts/c-11的新特性.md","hash":"2e3458b01620cb57945547129bb7224ef05ed856","modified":1466159404000},{"_id":"source/_posts/google模拟面试.md","hash":"a60da8d448191a043b37bc42eec51bc0c5f7984e","modified":1471986363000},{"_id":"source/_posts/xcode-c-开发.md","hash":"c6e6c9a64535d0f2eb763a89aaf0076ba8a7b1dc","modified":1465376583000},{"_id":"source/_posts/从中大到google.md","hash":"a0989124b47446725febb5ee117ccb0a7671f30b","modified":1466921704000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1468768399000},{"_id":"source/_posts/如何优雅地提问.md","hash":"bf16e561e682bd1b55c5fb793a8706458753ca63","modified":1462376687000},{"_id":"source/_posts/如何像数据科学家那样思考第一章-程序之路.md","hash":"3f82811041f68d232f87edcdcb5341042e6e1271","modified":1466159585000},{"_id":"source/_posts/如何像计算机科学家那样思考Python篇（第三章番外）.md","hash":"534485d7230cf9d9bdc47a0c2fd954c072a39efc","modified":1466159933000},{"_id":"source/_posts/如何像计算机科学家那样思考Python篇（第三章）.md","hash":"42f5641e453b809531ef904c853216ddd75ea3ca","modified":1466477664000},{"_id":"source/_posts/美国游记.md","hash":"8df328f4333e909f9f2e3089761c71e9bfa0567d","modified":1464598184000},{"_id":"source/about/index.md","hash":"6c7dbc04a45711c4554491b3a7743cde3547af18","modified":1466869080000},{"_id":"source/archives/index.md","hash":"5962246ffd7b21e8a6dabb8c897bde8b52afdcf3","modified":1466565015000},{"_id":"source/categories/index.md","hash":"caf4fcc7438973ae83408a8183370ea3d3cc4d72","modified":1461355115000},{"_id":"source/images/default_avatar.jpg","hash":"573ef2add5dc15e9e9cc49cc2d9455f312d50cfc","modified":1461355180000},{"_id":"source/media/14622903471800.jpg","hash":"aa6280b5dadb0d4bd8ba3b91cab1e6c2d83e23fc","modified":1462290347000},{"_id":"source/media/14622903637484.jpg","hash":"c0b94c768063ef041a7a7fe342227c0c653331bb","modified":1462290363000},{"_id":"source/tags/index.md","hash":"c116fb5432558b9acd81da9f47bc07636776f79d","modified":1461355476000},{"_id":"source/media/14652928631774.jpg","hash":"6987ab6fbbc5157a180c7b79315b8554089df722","modified":1465292863000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1461353907000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1461353907000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1461353905000},{"_id":"themes/next/.git/index","hash":"97c2c981e225e1cb04763114ebff73134e0c262e","modified":1471985965000},{"_id":"themes/next/.git/packed-refs","hash":"f0f49c7249dd23102bbcbcb262dad6e31ac42931","modified":1461353907000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1461353907000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1461353907000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1461353907000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1461353907000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1461353907000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1461353907000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1461353907000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1461353907000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1461353907000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1461353907000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1461353907000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1461353907000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1461353907000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1461353907000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1461353907000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1461353907000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1461353907000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1461353907000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1461353907000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1461353907000},{"_id":"themes/next/scripts/.DS_Store","hash":"2aae869d86a43221f508c2fd43e889ad83afe6d9","modified":1464689319000},{"_id":"themes/next/source/.DS_Store","hash":"da5fcea8c134e002a8b8ebb714a7097c75808b17","modified":1466868223000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1461353907000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1461353907000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1461353907000},{"_id":"source/media/14627231086908.jpg","hash":"263bb60f7e5d55affec65667284c995133741415","modified":1462723108000},{"_id":"source/media/14641731409027.jpg","hash":"8cc79b3ae9669c020e106dc7a2955abea8e78163","modified":1464173140000},{"_id":"source/media/14641735148741.jpg","hash":"c39ec57df2eb2cd984f4575e4f9e69acdb7e3809","modified":1464173514000},{"_id":"source/media/14649509422800.jpg","hash":"bd5aa51adbda5bfb513eb752f84f3719d17a91c1","modified":1464950942000},{"_id":"source/media/14652928449608.jpg","hash":"6e8d498ede229b655649c1cb0c3d3827f0ac4838","modified":1465292844000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461353907000},{"_id":"source/media/14649508833981.jpg","hash":"cba6036a8f5c77e1abce2210e14c3f905103a6e3","modified":1464950883000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1461353905000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1461353905000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1461353905000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1461353905000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1461353905000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1461353905000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1461353905000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1461353905000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1461353905000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1461353905000},{"_id":"themes/next/.git/logs/HEAD","hash":"f23aa62aebad242a7e82d56f65ae832e06fc7bf1","modified":1461353907000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1461353907000},{"_id":"themes/next/layout/_macro/post.swig","hash":"ae280b8bc49b87e3b86ce1a131191c37d6aa37b4","modified":1461353907000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"70bd1f11a558a7fc4b8fd7860377f31e0357ceb6","modified":1461353907000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"cd98e1141df1a41ed14f31cd4cf5f5c5f0a9898e","modified":1461353907000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1461353907000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1461353907000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1461353907000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1461353907000},{"_id":"themes/next/layout/_partials/head.swig","hash":"53bf077755e217a2b5ae107da62b6a824a0baa52","modified":1461353907000},{"_id":"themes/next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1461353907000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1461353907000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1461353907000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1461353907000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1461353907000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1461353907000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1461353907000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1461353907000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1461353907000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1461353907000},{"_id":"themes/next/source/css/.DS_Store","hash":"81e62a9b4aad896be12d58a17ded2d47082ddff7","modified":1466868228000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1461353907000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1461353907000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1461353907000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1461353907000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1461353907000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1461353907000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1461353907000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1461353907000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1461353907000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1461353907000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1461353907000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1461353907000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1461353907000},{"_id":"source/media/14641733223806.jpg","hash":"226835dfe108fe2954b164bd975407dfe1ae82a8","modified":1464173322000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461353907000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461353907000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461353907000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461353907000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461353907000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461353907000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461353907000},{"_id":"source/media/14623044788056.jpg","hash":"1652a9b0b1571794bd37c48d6581ba7567868180","modified":1462304478000},{"_id":"themes/next/.git/refs/heads/master","hash":"ff921168f4f462dc7e2ff216d4f221131d666de7","modified":1461353907000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"36db00417ab0f7639c4cc95ab6e20a7a69be9560","modified":1461353907000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1461353907000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1461353907000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1461353907000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1461353907000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1461353907000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1461353907000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1461353907000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1461353907000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1461353907000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1461353907000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1461353907000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"2fac9c043db35947d7eb40b545fda9bb67b87ec5","modified":1466868228000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1461353907000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"11d443fc97648d2965d7f8bad9f4a493996fe62f","modified":1461353907000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"2676996e819af2079c552f755ab7933939e151cd","modified":1461353907000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1461353907000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1461353907000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1461353907000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1461353907000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1461353907000},{"_id":"themes/next/source/js/src/post-details.js","hash":"10247c78fe933a0cfcaad22a2a03e7a026864461","modified":1461353907000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1461353907000},{"_id":"themes/next/source/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1461353907000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1461353907000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1461353907000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1461353907000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1461353907000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1461353907000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1461353907000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1461353907000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1461353907000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1461353907000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1461353907000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1461353907000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1461353907000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1461353907000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1461353907000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1461353907000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1461353907000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1461353907000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"f23aa62aebad242a7e82d56f65ae832e06fc7bf1","modified":1461353907000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1461353907000},{"_id":"themes/next/.git/objects/pack/pack-e3df4a44259e04f6b90ede6a15a086d3bbb9e66a.idx","hash":"3a4858d5b62ac67703ea62515858ce2c04cd5fc9","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1461353907000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1461353907000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1461353907000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1461353907000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"4c84903d6a15a903235eec04a560fdeda80c12f3","modified":1461353907000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1461353907000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1461353907000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"04e6c5257814c65e638ab70c53030e8dfdb3f37d","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"8aca5d9f1df157ab27e699c1b3ba9438b9e039ad","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"6cc10d943d92eac953e6978e46d27ae55584482c","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ff30fdbdf22841d0fb55f486a1f55bee4dc19401","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1461353907000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1461353907000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1461353907000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1461353907000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1461353907000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1461353907000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1461353907000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"f23aa62aebad242a7e82d56f65ae832e06fc7bf1","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e340071ee392f55b32c540d690198f157e588433","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"d4303e6439e70dc23f9151c69bc31a7fb0ece820","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1461353907000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1461353907000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1461353907000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1461353907000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1461353907000},{"_id":"source/media/14623043913578.jpg","hash":"71445272026902689890a39cd2b1633a1239046d","modified":1462304391000},{"_id":"source/media/14623044008358.jpg","hash":"71445272026902689890a39cd2b1633a1239046d","modified":1462304400000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1461353907000},{"_id":"themes/next/.git/objects/pack/pack-e3df4a44259e04f6b90ede6a15a086d3bbb9e66a.pack","hash":"c769a4ba2b2706a1810ee7a2ece410ea9f6498ac","modified":1461353907000},{"_id":"public/baidu_verify_s5eBIhA32I.html","hash":"e4426e47c28b63437f695ddfac011a5e3622a9f7","modified":1471986825499},{"_id":"public/googleeb1c08e33c19207e.html","hash":"6e411d103ba8316d28cedb89c5afa404f80f32dc","modified":1471986825500},{"_id":"public/sitemap.xml","hash":"194fac8b47502ef3e1bb1694aaea4d095a986cc2","modified":1471986825500},{"_id":"public/404.html","hash":"e3e5b3f2a724dcaf795c9bf51f3e536ea7f1f141","modified":1471986825529},{"_id":"public/about/index.html","hash":"a6b961aea2aad5c95ae6658b7969f2f62a227107","modified":1471986825529},{"_id":"public/categories/index.html","hash":"dc36780542b2fb2399095224dc28ee827f611acc","modified":1471986825529},{"_id":"public/tags/index.html","hash":"75229a2cd8fb4abf01c163aadf1201ff9738608c","modified":1471986825530},{"_id":"public/archives/2016/04/index.html","hash":"e91b12ffa51baa1010e5003795f5c2540979d136","modified":1471986825530},{"_id":"public/archives/2016/05/index.html","hash":"2ceb9a2c5486c60d8c3a5735fdfa9794c36c9ad6","modified":1471986825530},{"_id":"public/archives/2016/06/index.html","hash":"0b5398410486dde199159e191551b788504f823d","modified":1471986825530},{"_id":"public/categories/课程/index.html","hash":"86b87d89ff02aafa34c0d71333e7dfee3469fa0d","modified":1471986825530},{"_id":"public/categories/Cloud-Computing从零单排/index.html","hash":"d35d46e20070a436cc5de72323632dac6cb79a3e","modified":1471986825530},{"_id":"public/categories/刷题集锦/index.html","hash":"02c9259628f5c0db11150a220f10ca96dc6d1f4d","modified":1471986825530},{"_id":"public/categories/angularjs从零单排/index.html","hash":"deab13da48c6c0af2153e9170e243f61931b567b","modified":1471986825530},{"_id":"public/categories/深入理解C/index.html","hash":"111271b2f83dd070717e20076d44d394eb8efa2a","modified":1471986825530},{"_id":"public/categories/面试/index.html","hash":"fd9728f73c2ac1667eb11bc8f0c40f1addd06a64","modified":1471986825530},{"_id":"public/categories/日常/index.html","hash":"0f7d15a842935afa600c9ab0ed8114177b5b6bae","modified":1471986825530},{"_id":"public/categories/python从零单排/index.html","hash":"1246278b41e55e6f576d18c0235be602163a125c","modified":1471986825530},{"_id":"public/tags/CMU/index.html","hash":"296ad96f5c7e19e66ba0fa009718f30f6629f6fe","modified":1471986825531},{"_id":"public/tags/JIE/index.html","hash":"715516db4e14bcbdce6bd13a62ce3e12ff561c9d","modified":1471986825531},{"_id":"public/tags/选课/index.html","hash":"14af3afb377d2f18c4e142f3b48d66cd747a1816","modified":1471986825531},{"_id":"public/tags/Cloud-Computing/index.html","hash":"0746d8c699d62e1d1bb2a9c4d93dddbddafd844b","modified":1471986825531},{"_id":"public/tags/Linux/index.html","hash":"1bdb87e85d7258f7c060472183b44b3004b1d156","modified":1471986825531},{"_id":"public/tags/leetcode/index.html","hash":"0dc5893f73ba0f6e14365536298afe2581318482","modified":1471986825531},{"_id":"public/tags/algorithm/index.html","hash":"497c3daf895b1d82d8f6b1d3f36116ab74c98d7c","modified":1471986825531},{"_id":"public/tags/OO-design/index.html","hash":"114c977c06e83fe2b51fce88a35e31b0491b2640","modified":1471986825531},{"_id":"public/tags/angularjs/index.html","hash":"34798d292f14d7c4c150efdb4c9a57ed4aa07550","modified":1471986825531},{"_id":"public/tags/C/index.html","hash":"4dece0c6c08dc6df7e8d1b0f09407986302c77ca","modified":1471986825531},{"_id":"public/tags/C-11/index.html","hash":"57a449b4ef159586ced1e43d59df5c950cc9e9b6","modified":1471986825531},{"_id":"public/tags/面试/index.html","hash":"687f3e2f6c2a356004afc2eefc881f6148327db7","modified":1471986825531},{"_id":"public/tags/Google/index.html","hash":"c7343a01797d3b1aec0284e356ee77748be00cef","modified":1471986825531},{"_id":"public/tags/c/index.html","hash":"23cee53500145e719b7fa6c7183b3628ff767923","modified":1471986825531},{"_id":"public/tags/xcode/index.html","hash":"93ecc727517ac8b6235d145a92f2f2eb39ebb266","modified":1471986825531},{"_id":"public/tags/中大/index.html","hash":"68cbe57ca2517064252a58eef437fd87510a70a7","modified":1471986825531},{"_id":"public/tags/提问/index.html","hash":"6e9a29f0c768cd38995f82454acc5ea687b1ccfc","modified":1471986825531},{"_id":"public/tags/Python/index.html","hash":"0c46b0a44d63268d5bea8d23f5c106e8b6ddc242","modified":1471986825532},{"_id":"public/tags/美国/index.html","hash":"89f4e64e2ddfb14623133f90d2fa38100804d60e","modified":1471986825532},{"_id":"public/archives/index.html","hash":"7a2cbf15f8e80ace09a499f69e9a1fdfcff3d08f","modified":1471986825532},{"_id":"public/2016/06/05/从中大到google/index.html","hash":"58590477b2dc1920fbaacfba8c661aa08452f4bb","modified":1471986825532},{"_id":"public/2016/05/03/如何优雅地提问/index.html","hash":"b15aeeaeda76f787922050a76940164e6feab482","modified":1471986825532},{"_id":"public/archives/2016/index.html","hash":"6714b87b73d5f143cdef30984e89351e55db8840","modified":1471986825534},{"_id":"public/index.html","hash":"944d3279de5aa8146d30241307bbeb34a7226132","modified":1471986825535},{"_id":"public/page/2/index.html","hash":"cbfa050f76582d9a3a1ebe1a9069a0bc018ae06d","modified":1471986825535},{"_id":"public/2016/05/25/xcode-c-开发/index.html","hash":"8a011a5479aeb9172e633fe8fdbb1749c268073c","modified":1471986825530},{"_id":"public/2016/06/25/DesignTwitter-Medium/index.html","hash":"b41ea472e53f929aa9eced50666fa7fd95bcbb7f","modified":1471986825532},{"_id":"public/2016/06/07/如何像计算机科学家那样思考Python篇（第三章番外）/index.html","hash":"70da447d543d9425bf448f8d9bb93bd6cb0b0820","modified":1471986825532},{"_id":"public/2016/06/07/如何像计算机科学家那样思考Python篇（第三章）/index.html","hash":"3942453a2ab64505031206b1ecbb0ee5d42999c9","modified":1471986825532},{"_id":"public/2016/06/02/c-11的新特性/index.html","hash":"b5ec3e36711e14681963813d79004d3ef190b40a","modified":1471986825532},{"_id":"public/2016/05/31/如何像数据科学家那样思考第一章-程序之路/index.html","hash":"318734028f32b83eb1d77f11c17776b690fc7cd6","modified":1471986825532},{"_id":"public/2016/05/27/google模拟面试/index.html","hash":"f41f11fdab4b01f01650659a8bb0cfbb39456a1d","modified":1471986825532},{"_id":"public/2016/05/27/CMU-JIE选课心得/index.html","hash":"088d76397f863af5a052aa27a5e8f6fdf7dd01bd","modified":1471986825532},{"_id":"public/2016/04/30/Step2-Angularjs模板/index.html","hash":"bc226ec43a7bbbbc58eea0a81d5f491f9df6f240","modified":1471986825532},{"_id":"public/2016/04/30/Step-1静态模板/index.html","hash":"194d7a50b4c05f53f349ba99020882235e036f6b","modified":1471986825532},{"_id":"public/2016/04/30/Cloud-computing中学到的linux指令/index.html","hash":"54bc7da6378d51671cd3e1ef56d544632dee2bf2","modified":1471986825532},{"_id":"public/2016/04/22/Step-0/index.html","hash":"8e5f09e121260364cf8892cc33f282d80c68d11e","modified":1471986825533},{"_id":"public/2016/04/22/美国游记/index.html","hash":"765742e25ee6002c5039555bab01bf7a4c13af83","modified":1471986825534},{"_id":"public/BingSiteAuth.xml","hash":"74d66c28467c0e45c25d3c9e46a9d7e6f936d745","modified":1471986825547},{"_id":"public/images/default_avatar.jpg","hash":"573ef2add5dc15e9e9cc49cc2d9455f312d50cfc","modified":1471986825547},{"_id":"public/media/14622903471800.jpg","hash":"aa6280b5dadb0d4bd8ba3b91cab1e6c2d83e23fc","modified":1471986825547},{"_id":"public/media/14622903637484.jpg","hash":"c0b94c768063ef041a7a7fe342227c0c653331bb","modified":1471986825547},{"_id":"public/media/14652928631774.jpg","hash":"6987ab6fbbc5157a180c7b79315b8554089df722","modified":1471986825547},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471986825547},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471986825548},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471986825548},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471986825548},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471986825548},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471986825548},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471986825548},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471986825548},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471986825548},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471986825548},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471986825549},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471986825549},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471986825549},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471986825549},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471986825549},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471986825549},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471986825549},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471986825549},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471986825549},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471986825549},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471986825549},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471986825549},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471986825549},{"_id":"public/media/14627231086908.jpg","hash":"263bb60f7e5d55affec65667284c995133741415","modified":1471986826172},{"_id":"public/media/14641731409027.jpg","hash":"8cc79b3ae9669c020e106dc7a2955abea8e78163","modified":1471986826172},{"_id":"public/media/14641735148741.jpg","hash":"c39ec57df2eb2cd984f4575e4f9e69acdb7e3809","modified":1471986826180},{"_id":"public/media/14649509422800.jpg","hash":"bd5aa51adbda5bfb513eb752f84f3719d17a91c1","modified":1471986826181},{"_id":"public/media/14652928449608.jpg","hash":"6e8d498ede229b655649c1cb0c3d3827f0ac4838","modified":1471986826181},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471986826181},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471986826181},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471986826187},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471986826196},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471986826195},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471986826196},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471986826196},{"_id":"public/js/src/post-details.js","hash":"10247c78fe933a0cfcaad22a2a03e7a026864461","modified":1471986826196},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471986826196},{"_id":"public/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1471986826196},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1471986826196},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1471986826196},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1471986826196},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1471986826196},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1471986826196},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1471986826196},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471986826196},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471986826196},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1471986826196},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471986826196},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471986826196},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471986826197},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471986826197},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471986826197},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471986826197},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471986826197},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471986826197},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471986826197},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471986826197},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471986826197},{"_id":"public/css/main.css","hash":"f40c9bf5ce52cb0bda1e248fa36e2f1943c3e4f9","modified":1471986826197},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471986826197},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471986826197},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471986826197},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471986826197},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471986826197},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471986826197},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471986826197},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471986826197},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1471986826198},{"_id":"public/media/14649508833981.jpg","hash":"cba6036a8f5c77e1abce2210e14c3f905103a6e3","modified":1471986826198},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471986826198},{"_id":"public/media/14641733223806.jpg","hash":"226835dfe108fe2954b164bd975407dfe1ae82a8","modified":1471986826208},{"_id":"public/media/14623044788056.jpg","hash":"1652a9b0b1571794bd37c48d6581ba7567868180","modified":1471986826218},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471986826223},{"_id":"public/media/14623043913578.jpg","hash":"71445272026902689890a39cd2b1633a1239046d","modified":1471986826243},{"_id":"public/media/14623044008358.jpg","hash":"71445272026902689890a39cd2b1633a1239046d","modified":1471986826243}],"Category":[{"name":"课程","_id":"cis7ypdej0008npu273r98seo"},{"name":"Cloud Computing从零单排","_id":"cis7ypdet000enpu2z7d6smt5"},{"name":"刷题集锦","_id":"cis7ypdez000jnpu2443xch1j"},{"name":"angularjs从零单排","_id":"cis7ypdf4000onpu2zf186z0r"},{"name":"深入理解C++","_id":"cis7ypdfh0018npu24qwmqivs"},{"name":"面试","_id":"cis7ypdfj001bnpu2u6otysz0"},{"name":"日常","_id":"cis7ypdfj001enpu293dabst4"},{"name":"python从零单排","_id":"cis7ypdfk001jnpu244m3ogjt"}],"Data":[],"Page":[{"layout":"false","_content":"s5eBIhA32I\n","source":"baidu_verify_s5eBIhA32I.html","raw":"layout: false\n---\ns5eBIhA32I\n","date":"2016-08-23T20:58:06.000Z","updated":"2016-06-07T06:18:41.000Z","path":"baidu_verify_s5eBIhA32I.html","title":"","comments":1,"_id":"cis7ypdct0000npu2otdyqyjd","content":"s5eBIhA32I\n","excerpt":"","more":"s5eBIhA32I\n"},{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://guojiex.github.io\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://guojiex.github.io\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","date":"2016-08-23T20:58:06.000Z","updated":"2016-06-07T09:59:01.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cis7ypdcu0001npu2bx1y4e6c","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://guojiex.github.io\" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://guojiex.github.io\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n"},{"layout":"false","_content":"google-site-verification: googleeb1c08e33c19207e.html\n","source":"googleeb1c08e33c19207e.html","raw":"layout: false\n---\ngoogle-site-verification: googleeb1c08e33c19207e.html\n","date":"2016-08-23T20:58:06.000Z","updated":"2016-06-07T06:25:08.000Z","path":"googleeb1c08e33c19207e.html","title":"","comments":1,"_id":"cis7ypddb0002npu2gvackigh","content":"google-site-verification: googleeb1c08e33c19207e.html\n","excerpt":"","more":"google-site-verification: googleeb1c08e33c19207e.html\n"},{"title":"about","date":"2016-06-22T14:36:09.000Z","_content":"\n本人男，92年生金牛座。\n本科就读中山大学信科院，\n研究生就读[中山大学—卡内基梅隆大学联合工程学院](http://jie.sysu.edu.cn)，\n毕业后现在在匹兹堡谷歌工作。\n\n***\n\n一个随和的人，一个简单的好人。\n我不是大神，我只是在做我应该做的。\n~~有了代码还要什么女朋友~~\n~~我说我做那么多只是想找个女朋友你信吗~~\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-06-22 10:36:09\n---\n\n本人男，92年生金牛座。\n本科就读中山大学信科院，\n研究生就读[中山大学—卡内基梅隆大学联合工程学院](http://jie.sysu.edu.cn)，\n毕业后现在在匹兹堡谷歌工作。\n\n***\n\n一个随和的人，一个简单的好人。\n我不是大神，我只是在做我应该做的。\n~~有了代码还要什么女朋友~~\n~~我说我做那么多只是想找个女朋友你信吗~~\n\n\n\n","updated":"2016-06-25T15:38:00.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cis7ypded0004npu20xhpwzt5","content":"<p>本人男，92年生金牛座。<br>本科就读中山大学信科院，<br>研究生就读<a href=\"http://jie.sysu.edu.cn\" target=\"_blank\" rel=\"external\">中山大学—卡内基梅隆大学联合工程学院</a>，<br>毕业后现在在匹兹堡谷歌工作。</p>\n<hr>\n<p>一个随和的人，一个简单的好人。<br>我不是大神，我只是在做我应该做的。<br><del>有了代码还要什么女朋友</del><br><del>我说我做那么多只是想找个女朋友你信吗</del></p>\n","excerpt":"","more":"<p>本人男，92年生金牛座。<br>本科就读中山大学信科院，<br>研究生就读<a href=\"http://jie.sysu.edu.cn\">中山大学—卡内基梅隆大学联合工程学院</a>，<br>毕业后现在在匹兹堡谷歌工作。</p>\n<hr>\n<p>一个随和的人，一个简单的好人。<br>我不是大神，我只是在做我应该做的。<br><del>有了代码还要什么女朋友</del><br><del>我说我做那么多只是想找个女朋友你信吗</del></p>\n"},{"title":"archives","date":"2016-06-22T15:10:15.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2016-06-22 11:10:15\n---\n","updated":"2016-06-22T03:10:15.000Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cis7ypdef0006npu2jrqirbqy","content":"","excerpt":"","more":""},{"title":"标签","date":"2014-12-22T17:39:04.000Z","type":"categories","_content":"\n\n","source":"categories/index.md","raw":"---\ntitle: 标签\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\n---\n\n\n","updated":"2016-04-22T19:58:35.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cis7ypden000anpu22a53kcjs","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-04-22T20:04:24.000Z","type":"tags","_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-04-22 16:04:24\ntype: \"tags\"\n---\n\n\n","updated":"2016-04-22T20:04:36.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cis7ypdjn002nnpu29a0hqam8","content":"","excerpt":"","more":""}],"Post":[{"title":"CMU JIE 选课心得（偏软件）","date":"2016-05-27T20:02:09.000Z","description":"我是中大卡内基梅隆联合工程学院第一届的一名学生，在此记录下自己选课的一些思考和对某些课程的评价，希望能对大家有所帮助","_content":"\n# update:\n最后更新于2016-05-14,更新了转码套餐，专门针对从别的专业转向编程的同学进行推荐\n\n# 前言\n\n我是中大卡内基梅隆联合工程学院第一届的一名学生，在此记录下自己选课的一些思考和对某些课程的评价，希望能对大家有所帮助（其实就是跑程序的时候没啥事干写着玩。）\n\n***特别提醒***\n\n这里我要特别说下我的观点，***刷题不是一切***。虽然刷题很重要，甚至某些公司的面试主要考的就是算法题，但是算法题充其量只是进入软件公司敲门砖一个比较大的部分（并不是全部，不说国内软件公司面试考很多操作系统，多线程，网络之类杂七杂八的东西，就是外国公司，也会问你简历上各种项目的细节，你总不能在简历上面全写你在刷题吧）。\n\n另外，真正的软件公司工作中，也不可能全是算法，更多的是对现实问题的抽象理解和解决，以及更需要的是你平时良好的代码习惯（代码的可读性），如果你只会刷题，很可能应付公司日常工作都会很困难（对说的就是美国亚马逊）。\n\n***\n\n我对workload的评分是按照cloud computing五星来算的，仅做参考\n\n***有什么课程方面的问题或者觉得这份心得有什么地方讲得不够，可以来联系我或者问我，我的email是<1036479561@qq.com>***\n\n\n# 基本原理\n\n我们学院是属于ECE department的，关于ECE的毕业学分要求可以看 [这里](http://www.ece.cmu.edu/programs-admissions/masters/ms-requirements.html)。简单来说就是总共修96学分，其中60学分的核心课程（来自ece学院18600以上或者cs学院15700以上），剩下36学分中，24分可以修其他学院的研究生课程，12学分可以修其他学院的本科课程。\n\n按照我们项目的正常设定，在国内的一年每一个学期修1门cmu课，来到美国，每个学期3门cmu课，就可以毕业了。\n\n## 注意事项\n\n1. 托福过了才能选cmu的课程（因为没过的话不会给你id选课）\n2. 在美国的每个学期都必须选至少三门课（这是政策规定的，因为必须保持在美国一年full time student）。\n3. 你修的所有课程总学分貌似不能超过120（不太确定超过了会怎样）\n4. 在JIE修的，中大老师教的课程有些是可以转学分当做ECE核心课程学分用的，转了学分就可以让你选课有更大的余地（可以好好地去别的学院带妹（划掉））\n5. 每个学期只能选一门完全online课，详情请咨询学院老师\n\n# 课程介绍\n***\n## 入门算法课程\n专门针对入门初学者，或者是从别的专业想要转cs专业的同学。这些课程都是难度不算大，也不需要太多理论基础（特指数学、统计等理论）。换句话说，如果这些课程（特别是08671+08722）你都不能独立完成的话，我认为你想要转入cs专业将会是一件比较困难的事情。\n\n### 08-671 Java for Application Programmers\nJava入门课，从Java基础语法一直讲到多线程、swing、异常处理。老师是Terry Lee,上课十分有趣，值得一上。上完这门课，你的java基础绝对能入门🤔。\n\n### 08-722 Data Structures for Application Programmers \n对应国内的数据结构与算法，全程使用Java。主要就是如何花式实现各种数据结构，linked list,array list,hash map,Binary Search Tree等，对于没有系统的上过数据结构的同学会很有帮助。\n\n这门课就是一周一个作业加一个lab,还有一个quiz，事情比较多显得麻烦，而且作业里面会有很多corn case，intresting😯.\n\n### 11-601 Coding Boot Camp\n这门课基本上就是纯粹的刷题课，强迫刷题。老师讲的一般（甚至一般都不到）。但是因为这门课是cs学院的必修课之一，所以在这里你能认识不少cs学院的同学，也是一个选择。\n\n### 95-771 Data Structures and Algorithms for Information Processing\n来自亨氏学院的一门数据结构课，不过因为是亨氏学院的课，workload会显得稍低\n\n***\n## chef recomendation\n\n### 18-660 Numerical Methods for Engineering Design and Optimization\n\n***没有你想象中的那么水***\n\n很多人都说这门课是水课，但其实只是给分比较松，学到的东西其实还是蛮有用的（如果你想继续在这个方面研究的话），workload不大\n\nproject算有点难度，但其实所有的步骤在ppt里面都会说到，就是实现起来会有各种坑，如果你不会怎么优化matlab代码的话，跑起来会相当慢（哪怕你在cmu的16核机子上面跑）。project里面涌到的东西大概有：__花式解线性方程组、用离散余弦变换做图像复原、实现svm分类器__等。\n\nworkload：★★☆☆☆ 推荐度：★★★★★\n\n###  18-645 How to Write Fast Code\n\n***并不是教你怎么快速写代码***\n\n这门课就是学习怎么样优化你的代码（其实就是强行并行+程序局部性），使用到的技术主要是openmp,cuda,hadoop(cache blocking)。每学一个新技术就要你用这个新技术对程序做优化。hadoop那里是真的使用amazon云平台跑程序（每个小组100刀）。workload对有计算机基础和编程基础的同学来说不算大（对说的就是我）\n\n这门课里面hadoop还算比较实用，openmp基本我用不到，cuda可能在某些研究领域会有用\n\nworkload：★★★☆☆ 推荐度：★★★★☆\n\n###  18-640: Foundations of Computer Architecture\n\n***最好上过15213csapp再来***\n\n这门课主要是介绍cpu的原理，涉及到___流水线、超标量cpu、分支预测、为了保持并行cache一致性的协议___等。这门课也会使用到cache blocking 和cuda，和18645有一点重复。\n\n并不推荐没有计算机基础的同学选这门课，因为上课真的就会像听天书那样（当然如果你找到大腿带你而且你也真的有毅力去学就当我没说过这话）\n\nworkload：★★★☆☆ 推荐度：★★★☆☆\n\n###  15-513（15-213）: Introduction to Computer Systems\n\n***神课***\n因为是研究生所以只能选15513（15213是这门课的本科版本，但其实全都一样）。是一门完全online课。两个考试七个lab没有作业。\n\n简单的来说就是计算机组成原理+部分操作系统\n\n神课，无法解释，推荐转专业来软件的同学选，就算你drop了也可以继续自学做Lab的。而且有好多课的前置都是15513，选他你绝不会吃亏\n\nworkload：★★★★☆ 推荐度：★★★★★\n\n###  15-619 - Cloud Computing (Online)\n\n***神课 勇敢的少年啊快去创造奇迹***\n\n***人如果没有梦想，那和咸鱼有什么区别***\n\n***我做的事情只求问心无愧***\n\n先提醒一下，team project最后不会给出正确答案，就是你做出来多少算多少，问ta或者老师他们都不会告诉你要怎么做才会有提高（除非你申请当TA），自己掂量吧。\n\n神课之一，听说多年以前是水课，我最后一个学期选。\n\n开始是个人作业，过了中段考就会有团队project（听说是hell难度）。一队3个人，这个学期同班有两个大神带着一位同学做project，把他们累得半死😊（下个学期我好方。。。）\n\n今年这门课用了azure和aws，有自己写代码开虚拟机啦，写代码开auto scaling啦，写cache啦，mysql hbase啦,bash grep awk。以及各种主流数据库的简介使用。\n\n这门课涉及的方面实在是太多了，对个人能力是真正的考验\n\nworkload：★★★★★ 推荐度：★★★★★\n\n### 15-637 Web Application Development\n\n***听说你要当全栈工程师***\n\n下学期选，听说workload比cloud computing小但也小不到哪里去（我好方again）\n\nworkload：★★★★☆ 推荐度：★★★★☆\n\n### 10-601B Machine Learning\n\n***靠做作业就能学***\n\n第一次碰到上课听不太懂，但是下课靠着做作业能学会的课\n\n这门课主要是讲machine learning各种分类器的原理，感觉比较偏理论\n\n期末team project是做个图像十分类\n\n考试大坑，我要拿B了😭\n\nworkload：★★★★☆ 推荐度：★★★★☆\n### 15-214 Principles of Software Construction\n\n神课，内容神，workload也神。今年的授课教授是effective java的作者，强烈建议就算你没选这门课也要去旁听， 内容涉及各种设计模式，主要是教你（其实没怎么教）涉及好整个软件架构，我学到的最有用的就是“针对接口编程”。\n\nworkload和cloud computing接近，但是真的是好课\nworkload：★★★★★ 推荐度：★★★★☆\n\n\n","source":"_posts/CMU-JIE选课心得.md","raw":"---\ntitle: CMU JIE 选课心得（偏软件）\ndate: 2016-05-27 16:02:09\ndescription: 我是中大卡内基梅隆联合工程学院第一届的一名学生，在此记录下自己选课的一些思考和对某些课程的评价，希望能对大家有所帮助\ncategories: 课程\ntags:\n- CMU\n- JIE\n- 选课\n---\n\n# update:\n最后更新于2016-05-14,更新了转码套餐，专门针对从别的专业转向编程的同学进行推荐\n\n# 前言\n\n我是中大卡内基梅隆联合工程学院第一届的一名学生，在此记录下自己选课的一些思考和对某些课程的评价，希望能对大家有所帮助（其实就是跑程序的时候没啥事干写着玩。）\n\n***特别提醒***\n\n这里我要特别说下我的观点，***刷题不是一切***。虽然刷题很重要，甚至某些公司的面试主要考的就是算法题，但是算法题充其量只是进入软件公司敲门砖一个比较大的部分（并不是全部，不说国内软件公司面试考很多操作系统，多线程，网络之类杂七杂八的东西，就是外国公司，也会问你简历上各种项目的细节，你总不能在简历上面全写你在刷题吧）。\n\n另外，真正的软件公司工作中，也不可能全是算法，更多的是对现实问题的抽象理解和解决，以及更需要的是你平时良好的代码习惯（代码的可读性），如果你只会刷题，很可能应付公司日常工作都会很困难（对说的就是美国亚马逊）。\n\n***\n\n我对workload的评分是按照cloud computing五星来算的，仅做参考\n\n***有什么课程方面的问题或者觉得这份心得有什么地方讲得不够，可以来联系我或者问我，我的email是<1036479561@qq.com>***\n\n\n# 基本原理\n\n我们学院是属于ECE department的，关于ECE的毕业学分要求可以看 [这里](http://www.ece.cmu.edu/programs-admissions/masters/ms-requirements.html)。简单来说就是总共修96学分，其中60学分的核心课程（来自ece学院18600以上或者cs学院15700以上），剩下36学分中，24分可以修其他学院的研究生课程，12学分可以修其他学院的本科课程。\n\n按照我们项目的正常设定，在国内的一年每一个学期修1门cmu课，来到美国，每个学期3门cmu课，就可以毕业了。\n\n## 注意事项\n\n1. 托福过了才能选cmu的课程（因为没过的话不会给你id选课）\n2. 在美国的每个学期都必须选至少三门课（这是政策规定的，因为必须保持在美国一年full time student）。\n3. 你修的所有课程总学分貌似不能超过120（不太确定超过了会怎样）\n4. 在JIE修的，中大老师教的课程有些是可以转学分当做ECE核心课程学分用的，转了学分就可以让你选课有更大的余地（可以好好地去别的学院带妹（划掉））\n5. 每个学期只能选一门完全online课，详情请咨询学院老师\n\n# 课程介绍\n***\n## 入门算法课程\n专门针对入门初学者，或者是从别的专业想要转cs专业的同学。这些课程都是难度不算大，也不需要太多理论基础（特指数学、统计等理论）。换句话说，如果这些课程（特别是08671+08722）你都不能独立完成的话，我认为你想要转入cs专业将会是一件比较困难的事情。\n\n### 08-671 Java for Application Programmers\nJava入门课，从Java基础语法一直讲到多线程、swing、异常处理。老师是Terry Lee,上课十分有趣，值得一上。上完这门课，你的java基础绝对能入门🤔。\n\n### 08-722 Data Structures for Application Programmers \n对应国内的数据结构与算法，全程使用Java。主要就是如何花式实现各种数据结构，linked list,array list,hash map,Binary Search Tree等，对于没有系统的上过数据结构的同学会很有帮助。\n\n这门课就是一周一个作业加一个lab,还有一个quiz，事情比较多显得麻烦，而且作业里面会有很多corn case，intresting😯.\n\n### 11-601 Coding Boot Camp\n这门课基本上就是纯粹的刷题课，强迫刷题。老师讲的一般（甚至一般都不到）。但是因为这门课是cs学院的必修课之一，所以在这里你能认识不少cs学院的同学，也是一个选择。\n\n### 95-771 Data Structures and Algorithms for Information Processing\n来自亨氏学院的一门数据结构课，不过因为是亨氏学院的课，workload会显得稍低\n\n***\n## chef recomendation\n\n### 18-660 Numerical Methods for Engineering Design and Optimization\n\n***没有你想象中的那么水***\n\n很多人都说这门课是水课，但其实只是给分比较松，学到的东西其实还是蛮有用的（如果你想继续在这个方面研究的话），workload不大\n\nproject算有点难度，但其实所有的步骤在ppt里面都会说到，就是实现起来会有各种坑，如果你不会怎么优化matlab代码的话，跑起来会相当慢（哪怕你在cmu的16核机子上面跑）。project里面涌到的东西大概有：__花式解线性方程组、用离散余弦变换做图像复原、实现svm分类器__等。\n\nworkload：★★☆☆☆ 推荐度：★★★★★\n\n###  18-645 How to Write Fast Code\n\n***并不是教你怎么快速写代码***\n\n这门课就是学习怎么样优化你的代码（其实就是强行并行+程序局部性），使用到的技术主要是openmp,cuda,hadoop(cache blocking)。每学一个新技术就要你用这个新技术对程序做优化。hadoop那里是真的使用amazon云平台跑程序（每个小组100刀）。workload对有计算机基础和编程基础的同学来说不算大（对说的就是我）\n\n这门课里面hadoop还算比较实用，openmp基本我用不到，cuda可能在某些研究领域会有用\n\nworkload：★★★☆☆ 推荐度：★★★★☆\n\n###  18-640: Foundations of Computer Architecture\n\n***最好上过15213csapp再来***\n\n这门课主要是介绍cpu的原理，涉及到___流水线、超标量cpu、分支预测、为了保持并行cache一致性的协议___等。这门课也会使用到cache blocking 和cuda，和18645有一点重复。\n\n并不推荐没有计算机基础的同学选这门课，因为上课真的就会像听天书那样（当然如果你找到大腿带你而且你也真的有毅力去学就当我没说过这话）\n\nworkload：★★★☆☆ 推荐度：★★★☆☆\n\n###  15-513（15-213）: Introduction to Computer Systems\n\n***神课***\n因为是研究生所以只能选15513（15213是这门课的本科版本，但其实全都一样）。是一门完全online课。两个考试七个lab没有作业。\n\n简单的来说就是计算机组成原理+部分操作系统\n\n神课，无法解释，推荐转专业来软件的同学选，就算你drop了也可以继续自学做Lab的。而且有好多课的前置都是15513，选他你绝不会吃亏\n\nworkload：★★★★☆ 推荐度：★★★★★\n\n###  15-619 - Cloud Computing (Online)\n\n***神课 勇敢的少年啊快去创造奇迹***\n\n***人如果没有梦想，那和咸鱼有什么区别***\n\n***我做的事情只求问心无愧***\n\n先提醒一下，team project最后不会给出正确答案，就是你做出来多少算多少，问ta或者老师他们都不会告诉你要怎么做才会有提高（除非你申请当TA），自己掂量吧。\n\n神课之一，听说多年以前是水课，我最后一个学期选。\n\n开始是个人作业，过了中段考就会有团队project（听说是hell难度）。一队3个人，这个学期同班有两个大神带着一位同学做project，把他们累得半死😊（下个学期我好方。。。）\n\n今年这门课用了azure和aws，有自己写代码开虚拟机啦，写代码开auto scaling啦，写cache啦，mysql hbase啦,bash grep awk。以及各种主流数据库的简介使用。\n\n这门课涉及的方面实在是太多了，对个人能力是真正的考验\n\nworkload：★★★★★ 推荐度：★★★★★\n\n### 15-637 Web Application Development\n\n***听说你要当全栈工程师***\n\n下学期选，听说workload比cloud computing小但也小不到哪里去（我好方again）\n\nworkload：★★★★☆ 推荐度：★★★★☆\n\n### 10-601B Machine Learning\n\n***靠做作业就能学***\n\n第一次碰到上课听不太懂，但是下课靠着做作业能学会的课\n\n这门课主要是讲machine learning各种分类器的原理，感觉比较偏理论\n\n期末team project是做个图像十分类\n\n考试大坑，我要拿B了😭\n\nworkload：★★★★☆ 推荐度：★★★★☆\n### 15-214 Principles of Software Construction\n\n神课，内容神，workload也神。今年的授课教授是effective java的作者，强烈建议就算你没选这门课也要去旁听， 内容涉及各种设计模式，主要是教你（其实没怎么教）涉及好整个软件架构，我学到的最有用的就是“针对接口编程”。\n\nworkload和cloud computing接近，但是真的是好课\nworkload：★★★★★ 推荐度：★★★★☆\n\n\n","slug":"CMU-JIE选课心得","published":1,"updated":"2016-06-07T08:56:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypde90003npu2ic3tizy7","content":"<h1 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update:\"></a>update:</h1><p>最后更新于2016-05-14,更新了转码套餐，专门针对从别的专业转向编程的同学进行推荐</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我是中大卡内基梅隆联合工程学院第一届的一名学生，在此记录下自己选课的一些思考和对某些课程的评价，希望能对大家有所帮助（其实就是跑程序的时候没啥事干写着玩。）</p>\n<p><strong><em>特别提醒</em></strong></p>\n<p>这里我要特别说下我的观点，<strong><em>刷题不是一切</em></strong>。虽然刷题很重要，甚至某些公司的面试主要考的就是算法题，但是算法题充其量只是进入软件公司敲门砖一个比较大的部分（并不是全部，不说国内软件公司面试考很多操作系统，多线程，网络之类杂七杂八的东西，就是外国公司，也会问你简历上各种项目的细节，你总不能在简历上面全写你在刷题吧）。</p>\n<p>另外，真正的软件公司工作中，也不可能全是算法，更多的是对现实问题的抽象理解和解决，以及更需要的是你平时良好的代码习惯（代码的可读性），如果你只会刷题，很可能应付公司日常工作都会很困难（对说的就是美国亚马逊）。</p>\n<hr>\n<p>我对workload的评分是按照cloud computing五星来算的，仅做参考</p>\n<p><strong><em>有什么课程方面的问题或者觉得这份心得有什么地方讲得不够，可以来联系我或者问我，我的email是<a href=\"&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x31;&#x30;&#x33;&#x36;&#x34;&#55;&#x39;&#x35;&#54;&#x31;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;\">&#x31;&#x30;&#x33;&#x36;&#x34;&#55;&#x39;&#x35;&#54;&#x31;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;</a></em></strong></p>\n<h1 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h1><p>我们学院是属于ECE department的，关于ECE的毕业学分要求可以看 <a href=\"http://www.ece.cmu.edu/programs-admissions/masters/ms-requirements.html\" target=\"_blank\" rel=\"external\">这里</a>。简单来说就是总共修96学分，其中60学分的核心课程（来自ece学院18600以上或者cs学院15700以上），剩下36学分中，24分可以修其他学院的研究生课程，12学分可以修其他学院的本科课程。</p>\n<p>按照我们项目的正常设定，在国内的一年每一个学期修1门cmu课，来到美国，每个学期3门cmu课，就可以毕业了。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>托福过了才能选cmu的课程（因为没过的话不会给你id选课）</li>\n<li>在美国的每个学期都必须选至少三门课（这是政策规定的，因为必须保持在美国一年full time student）。</li>\n<li>你修的所有课程总学分貌似不能超过120（不太确定超过了会怎样）</li>\n<li>在JIE修的，中大老师教的课程有些是可以转学分当做ECE核心课程学分用的，转了学分就可以让你选课有更大的余地（可以好好地去别的学院带妹（划掉））</li>\n<li>每个学期只能选一门完全online课，详情请咨询学院老师</li>\n</ol>\n<h1 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h1><hr>\n<h2 id=\"入门算法课程\"><a href=\"#入门算法课程\" class=\"headerlink\" title=\"入门算法课程\"></a>入门算法课程</h2><p>专门针对入门初学者，或者是从别的专业想要转cs专业的同学。这些课程都是难度不算大，也不需要太多理论基础（特指数学、统计等理论）。换句话说，如果这些课程（特别是08671+08722）你都不能独立完成的话，我认为你想要转入cs专业将会是一件比较困难的事情。</p>\n<h3 id=\"08-671-Java-for-Application-Programmers\"><a href=\"#08-671-Java-for-Application-Programmers\" class=\"headerlink\" title=\"08-671 Java for Application Programmers\"></a>08-671 Java for Application Programmers</h3><p>Java入门课，从Java基础语法一直讲到多线程、swing、异常处理。老师是Terry Lee,上课十分有趣，值得一上。上完这门课，你的java基础绝对能入门🤔。</p>\n<h3 id=\"08-722-Data-Structures-for-Application-Programmers\"><a href=\"#08-722-Data-Structures-for-Application-Programmers\" class=\"headerlink\" title=\"08-722 Data Structures for Application Programmers\"></a>08-722 Data Structures for Application Programmers</h3><p>对应国内的数据结构与算法，全程使用Java。主要就是如何花式实现各种数据结构，linked list,array list,hash map,Binary Search Tree等，对于没有系统的上过数据结构的同学会很有帮助。</p>\n<p>这门课就是一周一个作业加一个lab,还有一个quiz，事情比较多显得麻烦，而且作业里面会有很多corn case，intresting😯.</p>\n<h3 id=\"11-601-Coding-Boot-Camp\"><a href=\"#11-601-Coding-Boot-Camp\" class=\"headerlink\" title=\"11-601 Coding Boot Camp\"></a>11-601 Coding Boot Camp</h3><p>这门课基本上就是纯粹的刷题课，强迫刷题。老师讲的一般（甚至一般都不到）。但是因为这门课是cs学院的必修课之一，所以在这里你能认识不少cs学院的同学，也是一个选择。</p>\n<h3 id=\"95-771-Data-Structures-and-Algorithms-for-Information-Processing\"><a href=\"#95-771-Data-Structures-and-Algorithms-for-Information-Processing\" class=\"headerlink\" title=\"95-771 Data Structures and Algorithms for Information Processing\"></a>95-771 Data Structures and Algorithms for Information Processing</h3><p>来自亨氏学院的一门数据结构课，不过因为是亨氏学院的课，workload会显得稍低</p>\n<hr>\n<h2 id=\"chef-recomendation\"><a href=\"#chef-recomendation\" class=\"headerlink\" title=\"chef recomendation\"></a>chef recomendation</h2><h3 id=\"18-660-Numerical-Methods-for-Engineering-Design-and-Optimization\"><a href=\"#18-660-Numerical-Methods-for-Engineering-Design-and-Optimization\" class=\"headerlink\" title=\"18-660 Numerical Methods for Engineering Design and Optimization\"></a>18-660 Numerical Methods for Engineering Design and Optimization</h3><p><strong><em>没有你想象中的那么水</em></strong></p>\n<p>很多人都说这门课是水课，但其实只是给分比较松，学到的东西其实还是蛮有用的（如果你想继续在这个方面研究的话），workload不大</p>\n<p>project算有点难度，但其实所有的步骤在ppt里面都会说到，就是实现起来会有各种坑，如果你不会怎么优化matlab代码的话，跑起来会相当慢（哪怕你在cmu的16核机子上面跑）。project里面涌到的东西大概有：<strong>花式解线性方程组、用离散余弦变换做图像复原、实现svm分类器</strong>等。</p>\n<p>workload：★★☆☆☆ 推荐度：★★★★★</p>\n<h3 id=\"18-645-How-to-Write-Fast-Code\"><a href=\"#18-645-How-to-Write-Fast-Code\" class=\"headerlink\" title=\"18-645 How to Write Fast Code\"></a>18-645 How to Write Fast Code</h3><p><strong><em>并不是教你怎么快速写代码</em></strong></p>\n<p>这门课就是学习怎么样优化你的代码（其实就是强行并行+程序局部性），使用到的技术主要是openmp,cuda,hadoop(cache blocking)。每学一个新技术就要你用这个新技术对程序做优化。hadoop那里是真的使用amazon云平台跑程序（每个小组100刀）。workload对有计算机基础和编程基础的同学来说不算大（对说的就是我）</p>\n<p>这门课里面hadoop还算比较实用，openmp基本我用不到，cuda可能在某些研究领域会有用</p>\n<p>workload：★★★☆☆ 推荐度：★★★★☆</p>\n<h3 id=\"18-640-Foundations-of-Computer-Architecture\"><a href=\"#18-640-Foundations-of-Computer-Architecture\" class=\"headerlink\" title=\"18-640: Foundations of Computer Architecture\"></a>18-640: Foundations of Computer Architecture</h3><p><strong><em>最好上过15213csapp再来</em></strong></p>\n<p>这门课主要是介绍cpu的原理，涉及到<strong><em>流水线、超标量cpu、分支预测、为了保持并行cache一致性的协议</em></strong>等。这门课也会使用到cache blocking 和cuda，和18645有一点重复。</p>\n<p>并不推荐没有计算机基础的同学选这门课，因为上课真的就会像听天书那样（当然如果你找到大腿带你而且你也真的有毅力去学就当我没说过这话）</p>\n<p>workload：★★★☆☆ 推荐度：★★★☆☆</p>\n<h3 id=\"15-513（15-213）-Introduction-to-Computer-Systems\"><a href=\"#15-513（15-213）-Introduction-to-Computer-Systems\" class=\"headerlink\" title=\"15-513（15-213）: Introduction to Computer Systems\"></a>15-513（15-213）: Introduction to Computer Systems</h3><p><strong><em>神课</em></strong><br>因为是研究生所以只能选15513（15213是这门课的本科版本，但其实全都一样）。是一门完全online课。两个考试七个lab没有作业。</p>\n<p>简单的来说就是计算机组成原理+部分操作系统</p>\n<p>神课，无法解释，推荐转专业来软件的同学选，就算你drop了也可以继续自学做Lab的。而且有好多课的前置都是15513，选他你绝不会吃亏</p>\n<p>workload：★★★★☆ 推荐度：★★★★★</p>\n<h3 id=\"15-619-Cloud-Computing-Online\"><a href=\"#15-619-Cloud-Computing-Online\" class=\"headerlink\" title=\"15-619 - Cloud Computing (Online)\"></a>15-619 - Cloud Computing (Online)</h3><p><strong><em>神课 勇敢的少年啊快去创造奇迹</em></strong></p>\n<p><strong><em>人如果没有梦想，那和咸鱼有什么区别</em></strong></p>\n<p><strong><em>我做的事情只求问心无愧</em></strong></p>\n<p>先提醒一下，team project最后不会给出正确答案，就是你做出来多少算多少，问ta或者老师他们都不会告诉你要怎么做才会有提高（除非你申请当TA），自己掂量吧。</p>\n<p>神课之一，听说多年以前是水课，我最后一个学期选。</p>\n<p>开始是个人作业，过了中段考就会有团队project（听说是hell难度）。一队3个人，这个学期同班有两个大神带着一位同学做project，把他们累得半死😊（下个学期我好方。。。）</p>\n<p>今年这门课用了azure和aws，有自己写代码开虚拟机啦，写代码开auto scaling啦，写cache啦，mysql hbase啦,bash grep awk。以及各种主流数据库的简介使用。</p>\n<p>这门课涉及的方面实在是太多了，对个人能力是真正的考验</p>\n<p>workload：★★★★★ 推荐度：★★★★★</p>\n<h3 id=\"15-637-Web-Application-Development\"><a href=\"#15-637-Web-Application-Development\" class=\"headerlink\" title=\"15-637 Web Application Development\"></a>15-637 Web Application Development</h3><p><strong><em>听说你要当全栈工程师</em></strong></p>\n<p>下学期选，听说workload比cloud computing小但也小不到哪里去（我好方again）</p>\n<p>workload：★★★★☆ 推荐度：★★★★☆</p>\n<h3 id=\"10-601B-Machine-Learning\"><a href=\"#10-601B-Machine-Learning\" class=\"headerlink\" title=\"10-601B Machine Learning\"></a>10-601B Machine Learning</h3><p><strong><em>靠做作业就能学</em></strong></p>\n<p>第一次碰到上课听不太懂，但是下课靠着做作业能学会的课</p>\n<p>这门课主要是讲machine learning各种分类器的原理，感觉比较偏理论</p>\n<p>期末team project是做个图像十分类</p>\n<p>考试大坑，我要拿B了😭</p>\n<p>workload：★★★★☆ 推荐度：★★★★☆</p>\n<h3 id=\"15-214-Principles-of-Software-Construction\"><a href=\"#15-214-Principles-of-Software-Construction\" class=\"headerlink\" title=\"15-214 Principles of Software Construction\"></a>15-214 Principles of Software Construction</h3><p>神课，内容神，workload也神。今年的授课教授是effective java的作者，强烈建议就算你没选这门课也要去旁听， 内容涉及各种设计模式，主要是教你（其实没怎么教）涉及好整个软件架构，我学到的最有用的就是“针对接口编程”。</p>\n<p>workload和cloud computing接近，但是真的是好课<br>workload：★★★★★ 推荐度：★★★★☆</p>\n","excerpt":"","more":"<h1 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update:\"></a>update:</h1><p>最后更新于2016-05-14,更新了转码套餐，专门针对从别的专业转向编程的同学进行推荐</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我是中大卡内基梅隆联合工程学院第一届的一名学生，在此记录下自己选课的一些思考和对某些课程的评价，希望能对大家有所帮助（其实就是跑程序的时候没啥事干写着玩。）</p>\n<p><strong><em>特别提醒</em></strong></p>\n<p>这里我要特别说下我的观点，<strong><em>刷题不是一切</em></strong>。虽然刷题很重要，甚至某些公司的面试主要考的就是算法题，但是算法题充其量只是进入软件公司敲门砖一个比较大的部分（并不是全部，不说国内软件公司面试考很多操作系统，多线程，网络之类杂七杂八的东西，就是外国公司，也会问你简历上各种项目的细节，你总不能在简历上面全写你在刷题吧）。</p>\n<p>另外，真正的软件公司工作中，也不可能全是算法，更多的是对现实问题的抽象理解和解决，以及更需要的是你平时良好的代码习惯（代码的可读性），如果你只会刷题，很可能应付公司日常工作都会很困难（对说的就是美国亚马逊）。</p>\n<hr>\n<p>我对workload的评分是按照cloud computing五星来算的，仅做参考</p>\n<p><strong><em>有什么课程方面的问题或者觉得这份心得有什么地方讲得不够，可以来联系我或者问我，我的email是<a href=\"&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x31;&#x30;&#x33;&#x36;&#x34;&#55;&#x39;&#x35;&#54;&#x31;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;\">&#x31;&#x30;&#x33;&#x36;&#x34;&#55;&#x39;&#x35;&#54;&#x31;&#x40;&#x71;&#113;&#x2e;&#x63;&#111;&#109;</a></em></strong></p>\n<h1 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h1><p>我们学院是属于ECE department的，关于ECE的毕业学分要求可以看 <a href=\"http://www.ece.cmu.edu/programs-admissions/masters/ms-requirements.html\">这里</a>。简单来说就是总共修96学分，其中60学分的核心课程（来自ece学院18600以上或者cs学院15700以上），剩下36学分中，24分可以修其他学院的研究生课程，12学分可以修其他学院的本科课程。</p>\n<p>按照我们项目的正常设定，在国内的一年每一个学期修1门cmu课，来到美国，每个学期3门cmu课，就可以毕业了。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li>托福过了才能选cmu的课程（因为没过的话不会给你id选课）</li>\n<li>在美国的每个学期都必须选至少三门课（这是政策规定的，因为必须保持在美国一年full time student）。</li>\n<li>你修的所有课程总学分貌似不能超过120（不太确定超过了会怎样）</li>\n<li>在JIE修的，中大老师教的课程有些是可以转学分当做ECE核心课程学分用的，转了学分就可以让你选课有更大的余地（可以好好地去别的学院带妹（划掉））</li>\n<li>每个学期只能选一门完全online课，详情请咨询学院老师</li>\n</ol>\n<h1 id=\"课程介绍\"><a href=\"#课程介绍\" class=\"headerlink\" title=\"课程介绍\"></a>课程介绍</h1><hr>\n<h2 id=\"入门算法课程\"><a href=\"#入门算法课程\" class=\"headerlink\" title=\"入门算法课程\"></a>入门算法课程</h2><p>专门针对入门初学者，或者是从别的专业想要转cs专业的同学。这些课程都是难度不算大，也不需要太多理论基础（特指数学、统计等理论）。换句话说，如果这些课程（特别是08671+08722）你都不能独立完成的话，我认为你想要转入cs专业将会是一件比较困难的事情。</p>\n<h3 id=\"08-671-Java-for-Application-Programmers\"><a href=\"#08-671-Java-for-Application-Programmers\" class=\"headerlink\" title=\"08-671 Java for Application Programmers\"></a>08-671 Java for Application Programmers</h3><p>Java入门课，从Java基础语法一直讲到多线程、swing、异常处理。老师是Terry Lee,上课十分有趣，值得一上。上完这门课，你的java基础绝对能入门🤔。</p>\n<h3 id=\"08-722-Data-Structures-for-Application-Programmers\"><a href=\"#08-722-Data-Structures-for-Application-Programmers\" class=\"headerlink\" title=\"08-722 Data Structures for Application Programmers\"></a>08-722 Data Structures for Application Programmers</h3><p>对应国内的数据结构与算法，全程使用Java。主要就是如何花式实现各种数据结构，linked list,array list,hash map,Binary Search Tree等，对于没有系统的上过数据结构的同学会很有帮助。</p>\n<p>这门课就是一周一个作业加一个lab,还有一个quiz，事情比较多显得麻烦，而且作业里面会有很多corn case，intresting😯.</p>\n<h3 id=\"11-601-Coding-Boot-Camp\"><a href=\"#11-601-Coding-Boot-Camp\" class=\"headerlink\" title=\"11-601 Coding Boot Camp\"></a>11-601 Coding Boot Camp</h3><p>这门课基本上就是纯粹的刷题课，强迫刷题。老师讲的一般（甚至一般都不到）。但是因为这门课是cs学院的必修课之一，所以在这里你能认识不少cs学院的同学，也是一个选择。</p>\n<h3 id=\"95-771-Data-Structures-and-Algorithms-for-Information-Processing\"><a href=\"#95-771-Data-Structures-and-Algorithms-for-Information-Processing\" class=\"headerlink\" title=\"95-771 Data Structures and Algorithms for Information Processing\"></a>95-771 Data Structures and Algorithms for Information Processing</h3><p>来自亨氏学院的一门数据结构课，不过因为是亨氏学院的课，workload会显得稍低</p>\n<hr>\n<h2 id=\"chef-recomendation\"><a href=\"#chef-recomendation\" class=\"headerlink\" title=\"chef recomendation\"></a>chef recomendation</h2><h3 id=\"18-660-Numerical-Methods-for-Engineering-Design-and-Optimization\"><a href=\"#18-660-Numerical-Methods-for-Engineering-Design-and-Optimization\" class=\"headerlink\" title=\"18-660 Numerical Methods for Engineering Design and Optimization\"></a>18-660 Numerical Methods for Engineering Design and Optimization</h3><p><strong><em>没有你想象中的那么水</em></strong></p>\n<p>很多人都说这门课是水课，但其实只是给分比较松，学到的东西其实还是蛮有用的（如果你想继续在这个方面研究的话），workload不大</p>\n<p>project算有点难度，但其实所有的步骤在ppt里面都会说到，就是实现起来会有各种坑，如果你不会怎么优化matlab代码的话，跑起来会相当慢（哪怕你在cmu的16核机子上面跑）。project里面涌到的东西大概有：<strong>花式解线性方程组、用离散余弦变换做图像复原、实现svm分类器</strong>等。</p>\n<p>workload：★★☆☆☆ 推荐度：★★★★★</p>\n<h3 id=\"18-645-How-to-Write-Fast-Code\"><a href=\"#18-645-How-to-Write-Fast-Code\" class=\"headerlink\" title=\"18-645 How to Write Fast Code\"></a>18-645 How to Write Fast Code</h3><p><strong><em>并不是教你怎么快速写代码</em></strong></p>\n<p>这门课就是学习怎么样优化你的代码（其实就是强行并行+程序局部性），使用到的技术主要是openmp,cuda,hadoop(cache blocking)。每学一个新技术就要你用这个新技术对程序做优化。hadoop那里是真的使用amazon云平台跑程序（每个小组100刀）。workload对有计算机基础和编程基础的同学来说不算大（对说的就是我）</p>\n<p>这门课里面hadoop还算比较实用，openmp基本我用不到，cuda可能在某些研究领域会有用</p>\n<p>workload：★★★☆☆ 推荐度：★★★★☆</p>\n<h3 id=\"18-640-Foundations-of-Computer-Architecture\"><a href=\"#18-640-Foundations-of-Computer-Architecture\" class=\"headerlink\" title=\"18-640: Foundations of Computer Architecture\"></a>18-640: Foundations of Computer Architecture</h3><p><strong><em>最好上过15213csapp再来</em></strong></p>\n<p>这门课主要是介绍cpu的原理，涉及到<strong><em>流水线、超标量cpu、分支预测、为了保持并行cache一致性的协议</em></strong>等。这门课也会使用到cache blocking 和cuda，和18645有一点重复。</p>\n<p>并不推荐没有计算机基础的同学选这门课，因为上课真的就会像听天书那样（当然如果你找到大腿带你而且你也真的有毅力去学就当我没说过这话）</p>\n<p>workload：★★★☆☆ 推荐度：★★★☆☆</p>\n<h3 id=\"15-513（15-213）-Introduction-to-Computer-Systems\"><a href=\"#15-513（15-213）-Introduction-to-Computer-Systems\" class=\"headerlink\" title=\"15-513（15-213）: Introduction to Computer Systems\"></a>15-513（15-213）: Introduction to Computer Systems</h3><p><strong><em>神课</em></strong><br>因为是研究生所以只能选15513（15213是这门课的本科版本，但其实全都一样）。是一门完全online课。两个考试七个lab没有作业。</p>\n<p>简单的来说就是计算机组成原理+部分操作系统</p>\n<p>神课，无法解释，推荐转专业来软件的同学选，就算你drop了也可以继续自学做Lab的。而且有好多课的前置都是15513，选他你绝不会吃亏</p>\n<p>workload：★★★★☆ 推荐度：★★★★★</p>\n<h3 id=\"15-619-Cloud-Computing-Online\"><a href=\"#15-619-Cloud-Computing-Online\" class=\"headerlink\" title=\"15-619 - Cloud Computing (Online)\"></a>15-619 - Cloud Computing (Online)</h3><p><strong><em>神课 勇敢的少年啊快去创造奇迹</em></strong></p>\n<p><strong><em>人如果没有梦想，那和咸鱼有什么区别</em></strong></p>\n<p><strong><em>我做的事情只求问心无愧</em></strong></p>\n<p>先提醒一下，team project最后不会给出正确答案，就是你做出来多少算多少，问ta或者老师他们都不会告诉你要怎么做才会有提高（除非你申请当TA），自己掂量吧。</p>\n<p>神课之一，听说多年以前是水课，我最后一个学期选。</p>\n<p>开始是个人作业，过了中段考就会有团队project（听说是hell难度）。一队3个人，这个学期同班有两个大神带着一位同学做project，把他们累得半死😊（下个学期我好方。。。）</p>\n<p>今年这门课用了azure和aws，有自己写代码开虚拟机啦，写代码开auto scaling啦，写cache啦，mysql hbase啦,bash grep awk。以及各种主流数据库的简介使用。</p>\n<p>这门课涉及的方面实在是太多了，对个人能力是真正的考验</p>\n<p>workload：★★★★★ 推荐度：★★★★★</p>\n<h3 id=\"15-637-Web-Application-Development\"><a href=\"#15-637-Web-Application-Development\" class=\"headerlink\" title=\"15-637 Web Application Development\"></a>15-637 Web Application Development</h3><p><strong><em>听说你要当全栈工程师</em></strong></p>\n<p>下学期选，听说workload比cloud computing小但也小不到哪里去（我好方again）</p>\n<p>workload：★★★★☆ 推荐度：★★★★☆</p>\n<h3 id=\"10-601B-Machine-Learning\"><a href=\"#10-601B-Machine-Learning\" class=\"headerlink\" title=\"10-601B Machine Learning\"></a>10-601B Machine Learning</h3><p><strong><em>靠做作业就能学</em></strong></p>\n<p>第一次碰到上课听不太懂，但是下课靠着做作业能学会的课</p>\n<p>这门课主要是讲machine learning各种分类器的原理，感觉比较偏理论</p>\n<p>期末team project是做个图像十分类</p>\n<p>考试大坑，我要拿B了😭</p>\n<p>workload：★★★★☆ 推荐度：★★★★☆</p>\n<h3 id=\"15-214-Principles-of-Software-Construction\"><a href=\"#15-214-Principles-of-Software-Construction\" class=\"headerlink\" title=\"15-214 Principles of Software Construction\"></a>15-214 Principles of Software Construction</h3><p>神课，内容神，workload也神。今年的授课教授是effective java的作者，强烈建议就算你没选这门课也要去旁听， 内容涉及各种设计模式，主要是教你（其实没怎么教）涉及好整个软件架构，我学到的最有用的就是“针对接口编程”。</p>\n<p>workload和cloud computing接近，但是真的是好课<br>workload：★★★★★ 推荐度：★★★★☆</p>\n"},{"title":"Cloud Computing中学到的Linux指令","date":"2016-04-30T16:01:37.000Z","description":"一些从cloud computing课程中学到的Linux指令","_content":"\n# 找出两个文件的差异行\n\n常用于给出了标准reference文件，你已经写出了自己的代码并且得到了属于你的答案，想要看看与标准的差别\n\n\tcat output output.2 | sort | uniq -u\n\t\n这里output 和 output.2是两个你想要进行比较的文件\n\n***那么问题来了，有两行长一样但是显示是不同的行该怎么办***\n\n用`hexdump`\n\n# 数行数\n\n如何知道一个文件中有多少行多少个字？使用`wc`命令就可以了：\n\n```bash\nwc package.json\n\t\t21      38     523 package.json\n# 输出的三个数字分别代表 行数、字数、字符数\n```\n\n\n","source":"_posts/Cloud-computing中学到的linux指令.md","raw":"---\ntitle: Cloud Computing中学到的Linux指令\ndate: 2016-04-30 12:01:37\ndescription: 一些从cloud computing课程中学到的Linux指令\ncategories: Cloud Computing从零单排\ntags:\n- Cloud Computing\n- Linux\n---\n\n# 找出两个文件的差异行\n\n常用于给出了标准reference文件，你已经写出了自己的代码并且得到了属于你的答案，想要看看与标准的差别\n\n\tcat output output.2 | sort | uniq -u\n\t\n这里output 和 output.2是两个你想要进行比较的文件\n\n***那么问题来了，有两行长一样但是显示是不同的行该怎么办***\n\n用`hexdump`\n\n# 数行数\n\n如何知道一个文件中有多少行多少个字？使用`wc`命令就可以了：\n\n```bash\nwc package.json\n\t\t21      38     523 package.json\n# 输出的三个数字分别代表 行数、字数、字符数\n```\n\n\n","slug":"Cloud-computing中学到的linux指令","published":1,"updated":"2016-06-07T07:51:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypded0005npu2uijj7w3v","content":"<h1 id=\"找出两个文件的差异行\"><a href=\"#找出两个文件的差异行\" class=\"headerlink\" title=\"找出两个文件的差异行\"></a>找出两个文件的差异行</h1><p>常用于给出了标准reference文件，你已经写出了自己的代码并且得到了属于你的答案，想要看看与标准的差别</p>\n<pre><code>cat output output.2 | sort | uniq -u\n</code></pre><p>这里output 和 output.2是两个你想要进行比较的文件</p>\n<p><strong><em>那么问题来了，有两行长一样但是显示是不同的行该怎么办</em></strong></p>\n<p>用<code>hexdump</code></p>\n<h1 id=\"数行数\"><a href=\"#数行数\" class=\"headerlink\" title=\"数行数\"></a>数行数</h1><p>如何知道一个文件中有多少行多少个字？使用<code>wc</code>命令就可以了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wc package.json</span><br><span class=\"line\">\t\t21      38     523 package.json</span><br><span class=\"line\"><span class=\"comment\"># 输出的三个数字分别代表 行数、字数、字符数</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"找出两个文件的差异行\"><a href=\"#找出两个文件的差异行\" class=\"headerlink\" title=\"找出两个文件的差异行\"></a>找出两个文件的差异行</h1><p>常用于给出了标准reference文件，你已经写出了自己的代码并且得到了属于你的答案，想要看看与标准的差别</p>\n<pre><code>cat output output.2 | sort | uniq -u\n</code></pre><p>这里output 和 output.2是两个你想要进行比较的文件</p>\n<p><strong><em>那么问题来了，有两行长一样但是显示是不同的行该怎么办</em></strong></p>\n<p>用<code>hexdump</code></p>\n<h1 id=\"数行数\"><a href=\"#数行数\" class=\"headerlink\" title=\"数行数\"></a>数行数</h1><p>如何知道一个文件中有多少行多少个字？使用<code>wc</code>命令就可以了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wc package.json</span><br><span class=\"line\">\t\t21      38     523 package.json</span><br><span class=\"line\"><span class=\"comment\"># 输出的三个数字分别代表 行数、字数、字符数</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Design Twitter - Medium - OOD","date":"2016-06-26T02:13:38.000Z","description":"Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed.","_content":"# Problem\nDesign a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. \n\nYour design should support the following methods:\n\n\t1. postTweet(userId, tweetId): Compose a new tweet.\n\t2. getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n\t3. follow(followerId, followeeId): Follower follows a followee.\n\t4. unfollow(followerId, followeeId): Follower unfollows a followee.\n\t\nexample:\n\n```Java\nTwitter twitter = new Twitter();\n\n// User 1 posts a new tweet (id = 5).\ntwitter.postTweet(1, 5);\n\n// User 1's news feed should return a list with 1 tweet id -> [5].\ntwitter.getNewsFeed(1);\n\n// User 1 follows user 2.\ntwitter.follow(1, 2);\n\n// User 2 posts a new tweet (id = 6).\ntwitter.postTweet(2, 6);\n\n// User 1's news feed should return a list with 2 tweet ids -> [6, 5].\n// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.getNewsFeed(1);\n\n// User 1 unfollows user 2.\ntwitter.unfollow(1, 2);\n\n// User 1's news feed should return a list with 1 tweet id -> [5],\n// since user 1 is no longer following user 2.\ntwitter.getNewsFeed(1);\n```\n\nOriginal code:\n\n```Java\npublic class Twitter {\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    public void postTweet(int userId, int tweetId) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    public List<Integer> getNewsFeed(int userId) {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    public void follow(int followerId, int followeeId) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    public void unfollow(int followerId, int followeeId) {\n        \n    }\n}\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.postTweet(userId,tweetId);\n * List<Integer> param_2 = obj.getNewsFeed(userId);\n * obj.follow(followerId,followeeId);\n * obj.unfollow(followerId,followeeId);\n */\n```\n\n# 分析\n首先，观察题目，我们可以看到有Twitter这个比较大的系统，应该独立成为一个类，然后我们想想，可以和Twitter互动的东西是什么？我首先想到的就是User，一个Twitter系统，其实就是用户的管理系统。再继续我们还能看到有Tweet，但是这个Tweet应该被User持有。\n\n然后为了获得最新的10条Tweet，在twitter类中我们需要\n\n# 实战\n\n## User接口\n因为Twitter的接口都已经定义好了，所以我们就来先设计用户类。为了方便扩展和隐藏实现细节，我们首先设计一下User接口\n\n```Java\ninterface User {\n        public void postTweet(Tweet tweet);\n        public int getUserId();\n        public List<User> getFollowed();\n        public void follow(User followed);\n        public void unfollow(User followed);\n        public List<Tweet> getTweets();\n    }\n```\n\n可以看到，接口中的很多方法都是参照Twitter类的方法进行设计的。设计好了接口，我们就可以实现这个接口。\n\n## User实现类\n\n为了方便，这个UserImpl里面我们使用list来存储followee和这个User发过的Tweet。如果想要更换实现类中使用的数据结构，只需要重新写一个实现类并且把Twitter类中调用UserImpl构造函数的部分更换成新的实现类即可。\n\n\n```Java\nprivate static class UserImpl implements User {\n        private List<User> followedList = new ArrayList<>();\n        private List<Tweet> tweetList = new ArrayList<>();\n        private int userId;\n\n        /*\n         * (non-Javadoc)\n         * @see java.lang.Object#hashCode()\n         */\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + userId;\n            return result;\n        }\n\n        /*\n         * (non-Javadoc)\n         * @see java.lang.Object#equals(java.lang.Object)\n         */\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            UserImpl other = (UserImpl) obj;\n            if (userId != other.userId)\n                return false;\n            return true;\n        }\n\n        public UserImpl(int userId) {\n            this.userId = userId;\n        }\n\n        @Override\n        public void postTweet(Tweet tweet) {\n            this.tweetList.add(tweet);\n        }\n\n        @Override\n        public int getUserId() {\n            return this.userId;\n        }\n\n        @Override\n        public List<User> getFollowed() {\n            return new ArrayList<>(this.followedList);\n        }\n\n        @Override\n        public void unfollow(User followed) {\n            if (this.followedList.contains(followed)) {\n                this.followedList.remove(followed);\n            }\n        }\n\n        @Override\n        public void follow(User follower) {\n            if (!this.equals(follower) && !this.followedList.contains(follower)) {\n                this.followedList.add(follower);\n            }\n        }\n\n        @Override\n        public List<Tweet> getTweets() {\n            return new ArrayList<>(this.tweetList);\n        }\n    }\n```\n\n## Tweet 内部类\n在这里我们需要一个Tweet类来持有用户发送过的Tweet信息，其中我们使用一个timestamp时间戳来保持Tweet的时间顺序\n\n```Java\nprivate static class Tweet implements Comparable<Tweet> {\n        private int tweetId;\n        private int timestamp;\n\n        public Tweet(int tweetId, int timestamp) {\n            super();\n            this.tweetId = tweetId;\n            this.timestamp = timestamp;\n        }\n\n        protected int getTweetId() {\n            return tweetId;\n        }\n\n        @Override\n        public int compareTo(Tweet o) {\n            return o.timestamp - this.timestamp;\n        }\n    }\n```\n\n## Twitter实现类\n\n\n```Java\npublic class Twitter {\n    private Map<Integer, User> userMap = new HashMap<>();\n    private int timestamp = 0;\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n        userMap.clear();\n        this.timestamp = 0;\n    }\n\n    /** Compose a new tweet. */\n    public void postTweet(int userId, int tweetId) {\n        if (!this.userMap.containsKey(userId)) {\n            User user = new UserImpl(userId);\n            this.userMap.put(userId, user);\n        }\n        this.userMap.get(userId).postTweet(new Tweet(tweetId, timestamp++));\n    }\n\n    /**\n     * Retrieve the 10 most recent tweet ids in the user's news feed. Each item\n     * in the news feed must be posted by users who the user followed or by the\n     * user herself. Tweets must be ordered from most recent to least recent.\n     */\n    public List<Integer> getNewsFeed(int userId) {\n        PriorityQueue<Tweet> result = new PriorityQueue<>();\n        if (this.userMap.containsKey(userId)) {\n            User user = this.userMap.get(userId);\n            result.addAll(user.getTweets());\n            List<User> followers = user.getFollowed();\n            followers.stream().forEach(follower -> {\n                result.addAll(follower.getTweets());\n            });\n        }\n\n        List<Integer> toReturn = new ArrayList<>();\n        while (toReturn.size() < 10 && !result.isEmpty()) {\n            toReturn.add(result.poll().getTweetId());\n        }\n        return toReturn;\n    }\n\n    /**\n     * Follower follows a followee. If the operation is invalid, it should be a\n     * no-op.\n     */\n    public void follow(int followerId, int followeeId) {\n        if (!this.userMap.containsKey(followerId)) {\n            userMap.put(followerId, new UserImpl(followerId));\n        }\n        if (!this.userMap.containsKey(followeeId)) {\n            userMap.put(followeeId, new UserImpl(followeeId));\n        }\n        userMap.get(followerId).follow(userMap.get(followeeId));\n    }\n\n    /**\n     * Follower unfollows a followee. If the operation is invalid, it should be\n     * a no-op.\n     */\n    public void unfollow(int followerId, int followeeId) {\n        if (this.userMap.containsKey(followerId)) {\n            this.userMap.get(followerId).unfollow(this.userMap.get(followeeId));\n        }\n    }\n}\n```\n\n\n","source":"_posts/DesignTwitter-Medium.md","raw":"---\ntitle: Design Twitter - Medium - OOD\ndate: 2016-06-25 22:13:38\ndescription: Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed.\ncategories: 刷题集锦\ntags:\n- leetcode\n- algorithm\n- OO design\n---\n# Problem\nDesign a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. \n\nYour design should support the following methods:\n\n\t1. postTweet(userId, tweetId): Compose a new tweet.\n\t2. getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n\t3. follow(followerId, followeeId): Follower follows a followee.\n\t4. unfollow(followerId, followeeId): Follower unfollows a followee.\n\t\nexample:\n\n```Java\nTwitter twitter = new Twitter();\n\n// User 1 posts a new tweet (id = 5).\ntwitter.postTweet(1, 5);\n\n// User 1's news feed should return a list with 1 tweet id -> [5].\ntwitter.getNewsFeed(1);\n\n// User 1 follows user 2.\ntwitter.follow(1, 2);\n\n// User 2 posts a new tweet (id = 6).\ntwitter.postTweet(2, 6);\n\n// User 1's news feed should return a list with 2 tweet ids -> [6, 5].\n// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.getNewsFeed(1);\n\n// User 1 unfollows user 2.\ntwitter.unfollow(1, 2);\n\n// User 1's news feed should return a list with 1 tweet id -> [5],\n// since user 1 is no longer following user 2.\ntwitter.getNewsFeed(1);\n```\n\nOriginal code:\n\n```Java\npublic class Twitter {\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n        \n    }\n    \n    /** Compose a new tweet. */\n    public void postTweet(int userId, int tweetId) {\n        \n    }\n    \n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\n    public List<Integer> getNewsFeed(int userId) {\n        \n    }\n    \n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\n    public void follow(int followerId, int followeeId) {\n        \n    }\n    \n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\n    public void unfollow(int followerId, int followeeId) {\n        \n    }\n}\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter obj = new Twitter();\n * obj.postTweet(userId,tweetId);\n * List<Integer> param_2 = obj.getNewsFeed(userId);\n * obj.follow(followerId,followeeId);\n * obj.unfollow(followerId,followeeId);\n */\n```\n\n# 分析\n首先，观察题目，我们可以看到有Twitter这个比较大的系统，应该独立成为一个类，然后我们想想，可以和Twitter互动的东西是什么？我首先想到的就是User，一个Twitter系统，其实就是用户的管理系统。再继续我们还能看到有Tweet，但是这个Tweet应该被User持有。\n\n然后为了获得最新的10条Tweet，在twitter类中我们需要\n\n# 实战\n\n## User接口\n因为Twitter的接口都已经定义好了，所以我们就来先设计用户类。为了方便扩展和隐藏实现细节，我们首先设计一下User接口\n\n```Java\ninterface User {\n        public void postTweet(Tweet tweet);\n        public int getUserId();\n        public List<User> getFollowed();\n        public void follow(User followed);\n        public void unfollow(User followed);\n        public List<Tweet> getTweets();\n    }\n```\n\n可以看到，接口中的很多方法都是参照Twitter类的方法进行设计的。设计好了接口，我们就可以实现这个接口。\n\n## User实现类\n\n为了方便，这个UserImpl里面我们使用list来存储followee和这个User发过的Tweet。如果想要更换实现类中使用的数据结构，只需要重新写一个实现类并且把Twitter类中调用UserImpl构造函数的部分更换成新的实现类即可。\n\n\n```Java\nprivate static class UserImpl implements User {\n        private List<User> followedList = new ArrayList<>();\n        private List<Tweet> tweetList = new ArrayList<>();\n        private int userId;\n\n        /*\n         * (non-Javadoc)\n         * @see java.lang.Object#hashCode()\n         */\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + userId;\n            return result;\n        }\n\n        /*\n         * (non-Javadoc)\n         * @see java.lang.Object#equals(java.lang.Object)\n         */\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            UserImpl other = (UserImpl) obj;\n            if (userId != other.userId)\n                return false;\n            return true;\n        }\n\n        public UserImpl(int userId) {\n            this.userId = userId;\n        }\n\n        @Override\n        public void postTweet(Tweet tweet) {\n            this.tweetList.add(tweet);\n        }\n\n        @Override\n        public int getUserId() {\n            return this.userId;\n        }\n\n        @Override\n        public List<User> getFollowed() {\n            return new ArrayList<>(this.followedList);\n        }\n\n        @Override\n        public void unfollow(User followed) {\n            if (this.followedList.contains(followed)) {\n                this.followedList.remove(followed);\n            }\n        }\n\n        @Override\n        public void follow(User follower) {\n            if (!this.equals(follower) && !this.followedList.contains(follower)) {\n                this.followedList.add(follower);\n            }\n        }\n\n        @Override\n        public List<Tweet> getTweets() {\n            return new ArrayList<>(this.tweetList);\n        }\n    }\n```\n\n## Tweet 内部类\n在这里我们需要一个Tweet类来持有用户发送过的Tweet信息，其中我们使用一个timestamp时间戳来保持Tweet的时间顺序\n\n```Java\nprivate static class Tweet implements Comparable<Tweet> {\n        private int tweetId;\n        private int timestamp;\n\n        public Tweet(int tweetId, int timestamp) {\n            super();\n            this.tweetId = tweetId;\n            this.timestamp = timestamp;\n        }\n\n        protected int getTweetId() {\n            return tweetId;\n        }\n\n        @Override\n        public int compareTo(Tweet o) {\n            return o.timestamp - this.timestamp;\n        }\n    }\n```\n\n## Twitter实现类\n\n\n```Java\npublic class Twitter {\n    private Map<Integer, User> userMap = new HashMap<>();\n    private int timestamp = 0;\n\n    /** Initialize your data structure here. */\n    public Twitter() {\n        userMap.clear();\n        this.timestamp = 0;\n    }\n\n    /** Compose a new tweet. */\n    public void postTweet(int userId, int tweetId) {\n        if (!this.userMap.containsKey(userId)) {\n            User user = new UserImpl(userId);\n            this.userMap.put(userId, user);\n        }\n        this.userMap.get(userId).postTweet(new Tweet(tweetId, timestamp++));\n    }\n\n    /**\n     * Retrieve the 10 most recent tweet ids in the user's news feed. Each item\n     * in the news feed must be posted by users who the user followed or by the\n     * user herself. Tweets must be ordered from most recent to least recent.\n     */\n    public List<Integer> getNewsFeed(int userId) {\n        PriorityQueue<Tweet> result = new PriorityQueue<>();\n        if (this.userMap.containsKey(userId)) {\n            User user = this.userMap.get(userId);\n            result.addAll(user.getTweets());\n            List<User> followers = user.getFollowed();\n            followers.stream().forEach(follower -> {\n                result.addAll(follower.getTweets());\n            });\n        }\n\n        List<Integer> toReturn = new ArrayList<>();\n        while (toReturn.size() < 10 && !result.isEmpty()) {\n            toReturn.add(result.poll().getTweetId());\n        }\n        return toReturn;\n    }\n\n    /**\n     * Follower follows a followee. If the operation is invalid, it should be a\n     * no-op.\n     */\n    public void follow(int followerId, int followeeId) {\n        if (!this.userMap.containsKey(followerId)) {\n            userMap.put(followerId, new UserImpl(followerId));\n        }\n        if (!this.userMap.containsKey(followeeId)) {\n            userMap.put(followeeId, new UserImpl(followeeId));\n        }\n        userMap.get(followerId).follow(userMap.get(followeeId));\n    }\n\n    /**\n     * Follower unfollows a followee. If the operation is invalid, it should be\n     * a no-op.\n     */\n    public void unfollow(int followerId, int followeeId) {\n        if (this.userMap.containsKey(followerId)) {\n            this.userMap.get(followerId).unfollow(this.userMap.get(followeeId));\n        }\n    }\n}\n```\n\n\n","slug":"DesignTwitter-Medium","published":1,"updated":"2016-06-26T04:02:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdek0009npu2wr1x14m1","content":"<h1 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h1><p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user’s news feed. </p>\n<p>Your design should support the following methods:</p>\n<pre><code>1. postTweet(userId, tweetId): Compose a new tweet.\n2. getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user&apos;s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n3. follow(followerId, followeeId): Follower follows a followee.\n4. unfollow(followerId, followeeId): Follower unfollows a followee.\n</code></pre><p>example:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Twitter twitter = <span class=\"keyword\">new</span> Twitter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1 posts a new tweet (id = 5).</span></span><br><span class=\"line\">twitter.postTweet(<span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1's news feed should return a list with 1 tweet id -&gt; [5].</span></span><br><span class=\"line\">twitter.getNewsFeed(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1 follows user 2.</span></span><br><span class=\"line\">twitter.follow(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 2 posts a new tweet (id = 6).</span></span><br><span class=\"line\">twitter.postTweet(<span class=\"number\">2</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1's news feed should return a list with 2 tweet ids -&gt; [6, 5].</span></span><br><span class=\"line\"><span class=\"comment\">// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.</span></span><br><span class=\"line\">twitter.getNewsFeed(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1 unfollows user 2.</span></span><br><span class=\"line\">twitter.unfollow(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1's news feed should return a list with 1 tweet id -&gt; [5],</span></span><br><span class=\"line\"><span class=\"comment\">// since user 1 is no longer following user 2.</span></span><br><span class=\"line\">twitter.getNewsFeed(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>Original code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Twitter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Twitter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Compose a new tweet. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTweet</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, <span class=\"keyword\">int</span> tweetId)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getNewsFeed</span><span class=\"params\">(<span class=\"keyword\">int</span> userId)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Follower follows a followee. If the operation is invalid, it should be a no-op. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">(<span class=\"keyword\">int</span> followerId, <span class=\"keyword\">int</span> followeeId)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unfollow</span><span class=\"params\">(<span class=\"keyword\">int</span> followerId, <span class=\"keyword\">int</span> followeeId)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Your Twitter object will be instantiated and called as such:</span><br><span class=\"line\"> * Twitter obj = new Twitter();</span><br><span class=\"line\"> * obj.postTweet(userId,tweetId);</span><br><span class=\"line\"> * List&lt;Integer&gt; param_2 = obj.getNewsFeed(userId);</span><br><span class=\"line\"> * obj.follow(followerId,followeeId);</span><br><span class=\"line\"> * obj.unfollow(followerId,followeeId);</span><br><span class=\"line\"> */</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>首先，观察题目，我们可以看到有Twitter这个比较大的系统，应该独立成为一个类，然后我们想想，可以和Twitter互动的东西是什么？我首先想到的就是User，一个Twitter系统，其实就是用户的管理系统。再继续我们还能看到有Tweet，但是这个Tweet应该被User持有。</p>\n<p>然后为了获得最新的10条Tweet，在twitter类中我们需要</p>\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><h2 id=\"User接口\"><a href=\"#User接口\" class=\"headerlink\" title=\"User接口\"></a>User接口</h2><p>因为Twitter的接口都已经定义好了，所以我们就来先设计用户类。为了方便扩展和隐藏实现细节，我们首先设计一下User接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTweet</span><span class=\"params\">(Tweet tweet)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getUserId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getFollowed</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">(User followed)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unfollow</span><span class=\"params\">(User followed)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Tweet&gt; <span class=\"title\">getTweets</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，接口中的很多方法都是参照Twitter类的方法进行设计的。设计好了接口，我们就可以实现这个接口。</p>\n<h2 id=\"User实现类\"><a href=\"#User实现类\" class=\"headerlink\" title=\"User实现类\"></a>User实现类</h2><p>为了方便，这个UserImpl里面我们使用list来存储followee和这个User发过的Tweet。如果想要更换实现类中使用的数据结构，只需要重新写一个实现类并且把Twitter类中调用UserImpl构造函数的部分更换成新的实现类即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;User&gt; followedList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;Tweet&gt; tweetList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> userId;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span><br><span class=\"line\">         * (non-Javadoc)</span><br><span class=\"line\">         * @see java.lang.Object#hashCode()</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> prime = <span class=\"number\">31</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">            result = prime * result + userId;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span><br><span class=\"line\">         * (non-Javadoc)</span><br><span class=\"line\">         * @see java.lang.Object#equals(java.lang.Object)</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getClass() != obj.getClass())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            UserImpl other = (UserImpl) obj;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (userId != other.userId)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserImpl</span><span class=\"params\">(<span class=\"keyword\">int</span> userId)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.userId = userId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTweet</span><span class=\"params\">(Tweet tweet)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tweetList.add(tweet);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getUserId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.userId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getFollowed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.followedList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unfollow</span><span class=\"params\">(User followed)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.followedList.contains(followed)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.followedList.remove(followed);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">(User follower)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.equals(follower) &amp;&amp; !<span class=\"keyword\">this</span>.followedList.contains(follower)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.followedList.add(follower);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Tweet&gt; <span class=\"title\">getTweets</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.tweetList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tweet-内部类\"><a href=\"#Tweet-内部类\" class=\"headerlink\" title=\"Tweet 内部类\"></a>Tweet 内部类</h2><p>在这里我们需要一个Tweet类来持有用户发送过的Tweet信息，其中我们使用一个timestamp时间戳来保持Tweet的时间顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tweet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Tweet</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tweetId;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tweet</span><span class=\"params\">(<span class=\"keyword\">int</span> tweetId, <span class=\"keyword\">int</span> timestamp)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tweetId = tweetId;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.timestamp = timestamp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getTweetId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tweetId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Tweet o)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o.timestamp - <span class=\"keyword\">this</span>.timestamp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Twitter实现类\"><a href=\"#Twitter实现类\" class=\"headerlink\" title=\"Twitter实现类\"></a>Twitter实现类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Twitter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, User&gt; userMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> timestamp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Twitter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        userMap.clear();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Compose a new tweet. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTweet</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, <span class=\"keyword\">int</span> tweetId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userMap.containsKey(userId)) &#123;</span><br><span class=\"line\">            User user = <span class=\"keyword\">new</span> UserImpl(userId);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.userMap.put(userId, user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userMap.get(userId).postTweet(<span class=\"keyword\">new</span> Tweet(tweetId, timestamp++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Retrieve the 10 most recent tweet ids in the user's news feed. Each item</span><br><span class=\"line\">     * in the news feed must be posted by users who the user followed or by the</span><br><span class=\"line\">     * user herself. Tweets must be ordered from most recent to least recent.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getNewsFeed</span><span class=\"params\">(<span class=\"keyword\">int</span> userId)</span> </span>&#123;</span><br><span class=\"line\">        PriorityQueue&lt;Tweet&gt; result = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.userMap.containsKey(userId)) &#123;</span><br><span class=\"line\">            User user = <span class=\"keyword\">this</span>.userMap.get(userId);</span><br><span class=\"line\">            result.addAll(user.getTweets());</span><br><span class=\"line\">            List&lt;User&gt; followers = user.getFollowed();</span><br><span class=\"line\">            followers.stream().forEach(follower -&gt; &#123;</span><br><span class=\"line\">                result.addAll(follower.getTweets());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; toReturn = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (toReturn.size() &lt; <span class=\"number\">10</span> &amp;&amp; !result.isEmpty()) &#123;</span><br><span class=\"line\">            toReturn.add(result.poll().getTweetId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> toReturn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Follower follows a followee. If the operation is invalid, it should be a</span><br><span class=\"line\">     * no-op.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">(<span class=\"keyword\">int</span> followerId, <span class=\"keyword\">int</span> followeeId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userMap.containsKey(followerId)) &#123;</span><br><span class=\"line\">            userMap.put(followerId, <span class=\"keyword\">new</span> UserImpl(followerId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userMap.containsKey(followeeId)) &#123;</span><br><span class=\"line\">            userMap.put(followeeId, <span class=\"keyword\">new</span> UserImpl(followeeId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        userMap.get(followerId).follow(userMap.get(followeeId));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Follower unfollows a followee. If the operation is invalid, it should be</span><br><span class=\"line\">     * a no-op.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unfollow</span><span class=\"params\">(<span class=\"keyword\">int</span> followerId, <span class=\"keyword\">int</span> followeeId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.userMap.containsKey(followerId)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.userMap.get(followerId).unfollow(<span class=\"keyword\">this</span>.userMap.get(followeeId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h1><p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user’s news feed. </p>\n<p>Your design should support the following methods:</p>\n<pre><code>1. postTweet(userId, tweetId): Compose a new tweet.\n2. getNewsFeed(userId): Retrieve the 10 most recent tweet ids in the user&apos;s news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.\n3. follow(followerId, followeeId): Follower follows a followee.\n4. unfollow(followerId, followeeId): Follower unfollows a followee.\n</code></pre><p>example:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Twitter twitter = <span class=\"keyword\">new</span> Twitter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1 posts a new tweet (id = 5).</span></span><br><span class=\"line\">twitter.postTweet(<span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1's news feed should return a list with 1 tweet id -&gt; [5].</span></span><br><span class=\"line\">twitter.getNewsFeed(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1 follows user 2.</span></span><br><span class=\"line\">twitter.follow(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 2 posts a new tweet (id = 6).</span></span><br><span class=\"line\">twitter.postTweet(<span class=\"number\">2</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1's news feed should return a list with 2 tweet ids -&gt; [6, 5].</span></span><br><span class=\"line\"><span class=\"comment\">// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.</span></span><br><span class=\"line\">twitter.getNewsFeed(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1 unfollows user 2.</span></span><br><span class=\"line\">twitter.unfollow(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User 1's news feed should return a list with 1 tweet id -&gt; [5],</span></span><br><span class=\"line\"><span class=\"comment\">// since user 1 is no longer following user 2.</span></span><br><span class=\"line\">twitter.getNewsFeed(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>Original code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Twitter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Twitter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Compose a new tweet. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTweet</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, <span class=\"keyword\">int</span> tweetId)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getNewsFeed</span><span class=\"params\">(<span class=\"keyword\">int</span> userId)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Follower follows a followee. If the operation is invalid, it should be a no-op. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">(<span class=\"keyword\">int</span> followerId, <span class=\"keyword\">int</span> followeeId)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unfollow</span><span class=\"params\">(<span class=\"keyword\">int</span> followerId, <span class=\"keyword\">int</span> followeeId)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Your Twitter object will be instantiated and called as such:</span><br><span class=\"line\"> * Twitter obj = new Twitter();</span><br><span class=\"line\"> * obj.postTweet(userId,tweetId);</span><br><span class=\"line\"> * List&lt;Integer&gt; param_2 = obj.getNewsFeed(userId);</span><br><span class=\"line\"> * obj.follow(followerId,followeeId);</span><br><span class=\"line\"> * obj.unfollow(followerId,followeeId);</span><br><span class=\"line\"> */</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>首先，观察题目，我们可以看到有Twitter这个比较大的系统，应该独立成为一个类，然后我们想想，可以和Twitter互动的东西是什么？我首先想到的就是User，一个Twitter系统，其实就是用户的管理系统。再继续我们还能看到有Tweet，但是这个Tweet应该被User持有。</p>\n<p>然后为了获得最新的10条Tweet，在twitter类中我们需要</p>\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><h2 id=\"User接口\"><a href=\"#User接口\" class=\"headerlink\" title=\"User接口\"></a>User接口</h2><p>因为Twitter的接口都已经定义好了，所以我们就来先设计用户类。为了方便扩展和隐藏实现细节，我们首先设计一下User接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTweet</span><span class=\"params\">(Tweet tweet)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getUserId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getFollowed</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">(User followed)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unfollow</span><span class=\"params\">(User followed)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Tweet&gt; <span class=\"title\">getTweets</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，接口中的很多方法都是参照Twitter类的方法进行设计的。设计好了接口，我们就可以实现这个接口。</p>\n<h2 id=\"User实现类\"><a href=\"#User实现类\" class=\"headerlink\" title=\"User实现类\"></a>User实现类</h2><p>为了方便，这个UserImpl里面我们使用list来存储followee和这个User发过的Tweet。如果想要更换实现类中使用的数据结构，只需要重新写一个实现类并且把Twitter类中调用UserImpl构造函数的部分更换成新的实现类即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;User&gt; followedList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;Tweet&gt; tweetList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> userId;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span><br><span class=\"line\">         * (non-Javadoc)</span><br><span class=\"line\">         * @see java.lang.Object#hashCode()</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> prime = <span class=\"number\">31</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> result = <span class=\"number\">1</span>;</span><br><span class=\"line\">            result = prime * result + userId;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span><br><span class=\"line\">         * (non-Javadoc)</span><br><span class=\"line\">         * @see java.lang.Object#equals(java.lang.Object)</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getClass() != obj.getClass())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            UserImpl other = (UserImpl) obj;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (userId != other.userId)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserImpl</span><span class=\"params\">(<span class=\"keyword\">int</span> userId)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.userId = userId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTweet</span><span class=\"params\">(Tweet tweet)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tweetList.add(tweet);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getUserId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.userId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getFollowed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.followedList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unfollow</span><span class=\"params\">(User followed)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.followedList.contains(followed)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.followedList.remove(followed);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">(User follower)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.equals(follower) &amp;&amp; !<span class=\"keyword\">this</span>.followedList.contains(follower)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.followedList.add(follower);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Tweet&gt; <span class=\"title\">getTweets</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"keyword\">this</span>.tweetList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tweet-内部类\"><a href=\"#Tweet-内部类\" class=\"headerlink\" title=\"Tweet 内部类\"></a>Tweet 内部类</h2><p>在这里我们需要一个Tweet类来持有用户发送过的Tweet信息，其中我们使用一个timestamp时间戳来保持Tweet的时间顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tweet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Tweet</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tweetId;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tweet</span><span class=\"params\">(<span class=\"keyword\">int</span> tweetId, <span class=\"keyword\">int</span> timestamp)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.tweetId = tweetId;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.timestamp = timestamp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getTweetId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tweetId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Tweet o)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o.timestamp - <span class=\"keyword\">this</span>.timestamp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Twitter实现类\"><a href=\"#Twitter实现类\" class=\"headerlink\" title=\"Twitter实现类\"></a>Twitter实现类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Twitter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;Integer, User&gt; userMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> timestamp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Twitter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        userMap.clear();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Compose a new tweet. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postTweet</span><span class=\"params\">(<span class=\"keyword\">int</span> userId, <span class=\"keyword\">int</span> tweetId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userMap.containsKey(userId)) &#123;</span><br><span class=\"line\">            User user = <span class=\"keyword\">new</span> UserImpl(userId);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.userMap.put(userId, user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userMap.get(userId).postTweet(<span class=\"keyword\">new</span> Tweet(tweetId, timestamp++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Retrieve the 10 most recent tweet ids in the user's news feed. Each item</span><br><span class=\"line\">     * in the news feed must be posted by users who the user followed or by the</span><br><span class=\"line\">     * user herself. Tweets must be ordered from most recent to least recent.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">getNewsFeed</span><span class=\"params\">(<span class=\"keyword\">int</span> userId)</span> </span>&#123;</span><br><span class=\"line\">        PriorityQueue&lt;Tweet&gt; result = <span class=\"keyword\">new</span> PriorityQueue&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.userMap.containsKey(userId)) &#123;</span><br><span class=\"line\">            User user = <span class=\"keyword\">this</span>.userMap.get(userId);</span><br><span class=\"line\">            result.addAll(user.getTweets());</span><br><span class=\"line\">            List&lt;User&gt; followers = user.getFollowed();</span><br><span class=\"line\">            followers.stream().forEach(follower -&gt; &#123;</span><br><span class=\"line\">                result.addAll(follower.getTweets());</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; toReturn = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (toReturn.size() &lt; <span class=\"number\">10</span> &amp;&amp; !result.isEmpty()) &#123;</span><br><span class=\"line\">            toReturn.add(result.poll().getTweetId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> toReturn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Follower follows a followee. If the operation is invalid, it should be a</span><br><span class=\"line\">     * no-op.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">follow</span><span class=\"params\">(<span class=\"keyword\">int</span> followerId, <span class=\"keyword\">int</span> followeeId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userMap.containsKey(followerId)) &#123;</span><br><span class=\"line\">            userMap.put(followerId, <span class=\"keyword\">new</span> UserImpl(followerId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userMap.containsKey(followeeId)) &#123;</span><br><span class=\"line\">            userMap.put(followeeId, <span class=\"keyword\">new</span> UserImpl(followeeId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        userMap.get(followerId).follow(userMap.get(followeeId));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Follower unfollows a followee. If the operation is invalid, it should be</span><br><span class=\"line\">     * a no-op.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unfollow</span><span class=\"params\">(<span class=\"keyword\">int</span> followerId, <span class=\"keyword\">int</span> followeeId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.userMap.containsKey(followerId)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.userMap.get(followerId).unfollow(<span class=\"keyword\">this</span>.userMap.get(followeeId));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Step 0","date":"2016-04-22T20:31:13.000Z","description":"最基础的index html页面","_content":"\n首先是最基础的index页面： \n\tapp/index.html:\n\t\n```html\n\t<!doctype html>\n\t<html lang=\"en\" ng-app>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>My HTML File</title>\n\t\t<link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n\t\t<link rel=\"stylesheet\" href=\"css/app.css\">\n\t\t<script src=\"bower_components/angular/angular.js\"></script>\n\t</head>\n\t<body>\n\t\n\t<p>Nothing here {{ 'yet' + '!' }} </p>\n\n\t</body>\n\t</html>\n```\n\t\n\t\n注意这个表达式 \n\n\t<p>Nothing here {{'yet' + '!'}}</p>\n\n\n这里两个大括号里面扩住的是 绑定\n这个数据绑定表达式的值会被angularjs自动计算，基于当前modal的作用域\n\n\tng-app directive:\n\t<html ng-app>\n\t\n这里的np-app标示了什么部分要被判断为angularjs应用，放在这里说明整个Html都是，但是也可以放在别的地方，那么相应的部分就是angularjs应用 \n\n\n\n","source":"_posts/Step-0.md","raw":"---\ntitle: Step 0\ndate: 2016-04-22 16:31:13\ncategories: angularjs从零单排\ndescription: 最基础的index html页面\ntags:\n- angularjs\n---\n\n首先是最基础的index页面： \n\tapp/index.html:\n\t\n```html\n\t<!doctype html>\n\t<html lang=\"en\" ng-app>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>My HTML File</title>\n\t\t<link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n\t\t<link rel=\"stylesheet\" href=\"css/app.css\">\n\t\t<script src=\"bower_components/angular/angular.js\"></script>\n\t</head>\n\t<body>\n\t\n\t<p>Nothing here {{ 'yet' + '!' }} </p>\n\n\t</body>\n\t</html>\n```\n\t\n\t\n注意这个表达式 \n\n\t<p>Nothing here {{'yet' + '!'}}</p>\n\n\n这里两个大括号里面扩住的是 绑定\n这个数据绑定表达式的值会被angularjs自动计算，基于当前modal的作用域\n\n\tng-app directive:\n\t<html ng-app>\n\t\n这里的np-app标示了什么部分要被判断为angularjs应用，放在这里说明整个Html都是，但是也可以放在别的地方，那么相应的部分就是angularjs应用 \n\n\n\n","slug":"Step-0","published":1,"updated":"2016-05-08T15:41:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdep000bnpu24z3alszp","content":"<p>首先是最基础的index页面：<br>    app/index.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>My HTML File<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bower_components/bootstrap/dist/css/bootstrap.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/app.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/angular/angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nothing here &#123;&#123; 'yet' + '!' &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意这个表达式 </p>\n<pre><code>&lt;p&gt;Nothing here {{'yet' + '!'}}&lt;/p&gt;\n</code></pre><p>这里两个大括号里面扩住的是 绑定<br>这个数据绑定表达式的值会被angularjs自动计算，基于当前modal的作用域</p>\n<pre><code>ng-app directive:\n&lt;html ng-app&gt;\n</code></pre><p>这里的np-app标示了什么部分要被判断为angularjs应用，放在这里说明整个Html都是，但是也可以放在别的地方，那么相应的部分就是angularjs应用 </p>\n","excerpt":"","more":"<p>首先是最基础的index页面：<br>    app/index.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>My HTML File<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"bower_components/bootstrap/dist/css/bootstrap.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/app.css\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bower_components/angular/angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nothing here &#123;&#123; 'yet' + '!' &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意这个表达式 </p>\n<pre><code>&lt;p&gt;Nothing here {{'yet' + '!'}}&lt;/p&gt;\n</code></pre><p>这里两个大括号里面扩住的是 绑定<br>这个数据绑定表达式的值会被angularjs自动计算，基于当前modal的作用域</p>\n<pre><code>ng-app directive:\n&lt;html ng-app&gt;\n</code></pre><p>这里的np-app标示了什么部分要被判断为angularjs应用，放在这里说明整个Html都是，但是也可以放在别的地方，那么相应的部分就是angularjs应用 </p>\n"},{"title":"Step 1静态模板","date":"2016-04-30T20:53:27.000Z","description":"简单的html静态页面","_content":"\napp/index.html:\n\n```html\n<ul>\n\t<li>\n\t\t<span>Nexus S</span>\n\t\t<p>Fast just got faster with Nexus S.</p>\n\t</li>\n\t<li>\n\t\t<span>Motorola XOOM™ with Wi-Fi</span>\n\t\t<p>The Next, Next Generation tablet.</p>\n\t</li>\n</ul>\n```\n\t\n\n这一步就是简单的html静态页面，没什么好解释的 \n\n\n","source":"_posts/Step-1静态模板.md","raw":"---\ntitle: Step 1静态模板\ndate: 2016-04-30 16:53:27\ndescription: 简单的html静态页面\ncategories: angularjs从零单排\ntags:\n- angularjs\n---\n\napp/index.html:\n\n```html\n<ul>\n\t<li>\n\t\t<span>Nexus S</span>\n\t\t<p>Fast just got faster with Nexus S.</p>\n\t</li>\n\t<li>\n\t\t<span>Motorola XOOM™ with Wi-Fi</span>\n\t\t<p>The Next, Next Generation tablet.</p>\n\t</li>\n</ul>\n```\n\t\n\n这一步就是简单的html静态页面，没什么好解释的 \n\n\n","slug":"Step-1静态模板","published":1,"updated":"2016-05-08T15:41:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypder000dnpu2vnmuld8x","content":"<p>app/index.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Nexus S<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Fast just got faster with Nexus S.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Motorola XOOM™ with Wi-Fi<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The Next, Next Generation tablet.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这一步就是简单的html静态页面，没什么好解释的 </p>\n","excerpt":"","more":"<p>app/index.html:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Nexus S<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Fast just got faster with Nexus S.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Motorola XOOM™ with Wi-Fi<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>The Next, Next Generation tablet.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这一步就是简单的html静态页面，没什么好解释的 </p>\n"},{"title":"Step2 Angularjs模板","date":"2016-04-30T20:58:17.000Z","description":"Angularjs中的视图与模板","_content":"\n## 视图与模板\n在angularjs中，视图就是对应数据模型model的html模板，也就意味着一旦数据模型model的数据发生改变，视图也会随之改变（含有数据绑定的部分） \n\napp/index.html:\n\n```js\n<html ng-app=\"phonecatApp\">\n<head>\n  ...\n  <script src=\"bower_components/angular/angular.js\"></script>\n  <script src=\"js/controllers.js\"></script>\n</head>\n<body ng-controller=\"PhoneListCtrl\">\n  <ul>\n    <li ng-repeat=\"phone in phones\">\n      <span>{{phone.name}}</span>\n      <p>{{phone.snippet}}</p>\n    </li>\n  </ul>\n</body>\n</html>\n```\n\nWe replaced the hard-coded phone list with the [ngRepeat directive](https://docs.angularjs.org/api/ng/directive/ngRepeat) and two [Angular expressions](https://docs.angularjs.org/guide/expression):\n\n\n* The ng-repeat=\"phone in phones\" attribute in the *<*li*>* tag is an Angular repeater directive. The repeater tells Angular to create a *<*li*>* element for each phone in the list using the *<*li*>* tag as the template.\n\n* The expressions wrapped in curly braces ({{phone.name}} and {{phone.snippet}}) will be replaced by the value of the expressions.\n\n这里我们使用angularjs的***ngRepeat***语句进行重复的显示： \n\n* \tng-repeat=\"phone in phones”这句话就是说对于phones集合中的每一个phone个体，都会产生一个数据显示，因为是在*<*li*>*标签中写的，所以每一个phone个体都会生成一个对应的Li（列表项）\n\nWe have added a new directive, called ng-controller, which attaches a PhoneListCtrl controller to the <body> tag. At this point: \n\n* The expressions in curly braces ({{phone.name}} and {{phone.snippet}}) denote bindings, which are referring to our application model, which is set up in our PhoneListCtrl controller.\n\n这里我们提到一个新的原语**ng-controller**，这个原语把名为**PhoneListCtrl**的控制器赋给*<*body*>*标签，那么{{phone.name}}的这些表达式都会在这个控制器的作用域下进行运算\n\n![](/media/14627231086908.jpg)\n\n\n##模型与控制器\n\n数据模型被控制器PhoneListCtrl所创建，控制器其实就是一个构造函数，简单的使用了$scope作为输入参数：\napp/js/controllers.js:\n\n```js\nvar phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', function ($scope) {\n  $scope.phones = [\n    {'name': 'Nexus S',\n     'snippet': 'Fast just got faster with Nexus S.'},\n    {'name': 'Motorola XOOM™ with Wi-Fi',\n     'snippet': 'The Next, Next Generation tablet.'},\n    {'name': 'MOTOROLA XOOM™',\n     'snippet': 'The Next, Next Generation tablet.'}\n  ];\n});\n\n```\n这里我们声明了一个名叫PhoneListCtrl的控制器，而且把它注册在phonecatApp的angularjs模块中。注意我们在*<*html*>*标签中显式声明了ng-app=phonecatApp 作用域scope: \n\n> ***作用域***是一个共享区域，提供了一个让模板，模型和控制器协同工作的区域。在作用域中的所有变化都是同步的（数据模型的变化即时反映到视图，视图的变化即时反映到数据模型）\n\n## 测试\n\n\n","source":"_posts/Step2-Angularjs模板.md","raw":"---\ntitle: Step2 Angularjs模板\ndate: 2016-04-30 16:58:17\ncategories: angularjs从零单排\ndescription: Angularjs中的视图与模板\ntags:\n- angularjs\n---\n\n## 视图与模板\n在angularjs中，视图就是对应数据模型model的html模板，也就意味着一旦数据模型model的数据发生改变，视图也会随之改变（含有数据绑定的部分） \n\napp/index.html:\n\n```js\n<html ng-app=\"phonecatApp\">\n<head>\n  ...\n  <script src=\"bower_components/angular/angular.js\"></script>\n  <script src=\"js/controllers.js\"></script>\n</head>\n<body ng-controller=\"PhoneListCtrl\">\n  <ul>\n    <li ng-repeat=\"phone in phones\">\n      <span>{{phone.name}}</span>\n      <p>{{phone.snippet}}</p>\n    </li>\n  </ul>\n</body>\n</html>\n```\n\nWe replaced the hard-coded phone list with the [ngRepeat directive](https://docs.angularjs.org/api/ng/directive/ngRepeat) and two [Angular expressions](https://docs.angularjs.org/guide/expression):\n\n\n* The ng-repeat=\"phone in phones\" attribute in the *<*li*>* tag is an Angular repeater directive. The repeater tells Angular to create a *<*li*>* element for each phone in the list using the *<*li*>* tag as the template.\n\n* The expressions wrapped in curly braces ({{phone.name}} and {{phone.snippet}}) will be replaced by the value of the expressions.\n\n这里我们使用angularjs的***ngRepeat***语句进行重复的显示： \n\n* \tng-repeat=\"phone in phones”这句话就是说对于phones集合中的每一个phone个体，都会产生一个数据显示，因为是在*<*li*>*标签中写的，所以每一个phone个体都会生成一个对应的Li（列表项）\n\nWe have added a new directive, called ng-controller, which attaches a PhoneListCtrl controller to the <body> tag. At this point: \n\n* The expressions in curly braces ({{phone.name}} and {{phone.snippet}}) denote bindings, which are referring to our application model, which is set up in our PhoneListCtrl controller.\n\n这里我们提到一个新的原语**ng-controller**，这个原语把名为**PhoneListCtrl**的控制器赋给*<*body*>*标签，那么{{phone.name}}的这些表达式都会在这个控制器的作用域下进行运算\n\n![](/media/14627231086908.jpg)\n\n\n##模型与控制器\n\n数据模型被控制器PhoneListCtrl所创建，控制器其实就是一个构造函数，简单的使用了$scope作为输入参数：\napp/js/controllers.js:\n\n```js\nvar phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', function ($scope) {\n  $scope.phones = [\n    {'name': 'Nexus S',\n     'snippet': 'Fast just got faster with Nexus S.'},\n    {'name': 'Motorola XOOM™ with Wi-Fi',\n     'snippet': 'The Next, Next Generation tablet.'},\n    {'name': 'MOTOROLA XOOM™',\n     'snippet': 'The Next, Next Generation tablet.'}\n  ];\n});\n\n```\n这里我们声明了一个名叫PhoneListCtrl的控制器，而且把它注册在phonecatApp的angularjs模块中。注意我们在*<*html*>*标签中显式声明了ng-app=phonecatApp 作用域scope: \n\n> ***作用域***是一个共享区域，提供了一个让模板，模型和控制器协同工作的区域。在作用域中的所有变化都是同步的（数据模型的变化即时反映到视图，视图的变化即时反映到数据模型）\n\n## 测试\n\n\n","slug":"Step2-Angularjs模板","published":1,"updated":"2016-05-08T16:11:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdet000fnpu2osor88ct","content":"<h2 id=\"视图与模板\"><a href=\"#视图与模板\" class=\"headerlink\" title=\"视图与模板\"></a>视图与模板</h2><p>在angularjs中，视图就是对应数据模型model的html模板，也就意味着一旦数据模型model的数据发生改变，视图也会随之改变（含有数据绑定的部分） </p>\n<p>app/index.html:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html ng-app=\"phonecatApp\"&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;script src=\"bower_components/angular/angular.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=\"js/controllers.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body ng-controller=\"PhoneListCtrl\"&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li ng-repeat=\"phone in phones\"&gt;</span><br><span class=\"line\">      &lt;span&gt;&#123;&#123;phone.name&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;&#123;phone.snippet&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>We replaced the hard-coded phone list with the <a href=\"https://docs.angularjs.org/api/ng/directive/ngRepeat\" target=\"_blank\" rel=\"external\">ngRepeat directive</a> and two <a href=\"https://docs.angularjs.org/guide/expression\" target=\"_blank\" rel=\"external\">Angular expressions</a>:</p>\n<ul>\n<li><p>The ng-repeat=”phone in phones” attribute in the <em>&lt;</em>li<em>&gt;</em> tag is an Angular repeater directive. The repeater tells Angular to create a <em>&lt;</em>li<em>&gt;</em> element for each phone in the list using the <em>&lt;</em>li<em>&gt;</em> tag as the template.</p>\n</li>\n<li><p>The expressions wrapped in curly braces ( and ) will be replaced by the value of the expressions.</p>\n</li>\n</ul>\n<p>这里我们使用angularjs的<strong><em>ngRepeat</em></strong>语句进行重复的显示： </p>\n<ul>\n<li>ng-repeat=”phone in phones”这句话就是说对于phones集合中的每一个phone个体，都会产生一个数据显示，因为是在<em>&lt;</em>li<em>&gt;</em>标签中写的，所以每一个phone个体都会生成一个对应的Li（列表项）</li>\n</ul>\n<p>We have added a new directive, called ng-controller, which attaches a PhoneListCtrl controller to the <body> tag. At this point: </body></p>\n<ul>\n<li>The expressions in curly braces ( and ) denote bindings, which are referring to our application model, which is set up in our PhoneListCtrl controller.</li>\n</ul>\n<p>这里我们提到一个新的原语<strong>ng-controller</strong>，这个原语把名为<strong>PhoneListCtrl</strong>的控制器赋给<em>&lt;</em>body<em>&gt;</em>标签，那么的这些表达式都会在这个控制器的作用域下进行运算</p>\n<p><img src=\"/media/14627231086908.jpg\" alt=\"\"></p>\n<p>##模型与控制器</p>\n<p>数据模型被控制器PhoneListCtrl所创建，控制器其实就是一个构造函数，简单的使用了$scope作为输入参数：<br>app/js/controllers.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> phonecatApp = angular.module(<span class=\"string\">'phonecatApp'</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\">phonecatApp.controller(<span class=\"string\">'PhoneListCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">  $scope.phones = [</span><br><span class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Nexus S'</span>,</span><br><span class=\"line\">     <span class=\"string\">'snippet'</span>: <span class=\"string\">'Fast just got faster with Nexus S.'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Motorola XOOM™ with Wi-Fi'</span>,</span><br><span class=\"line\">     <span class=\"string\">'snippet'</span>: <span class=\"string\">'The Next, Next Generation tablet.'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'MOTOROLA XOOM™'</span>,</span><br><span class=\"line\">     <span class=\"string\">'snippet'</span>: <span class=\"string\">'The Next, Next Generation tablet.'</span>&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里我们声明了一个名叫PhoneListCtrl的控制器，而且把它注册在phonecatApp的angularjs模块中。注意我们在<em>&lt;</em>html<em>&gt;</em>标签中显式声明了ng-app=phonecatApp 作用域scope: </p>\n<blockquote>\n<p><strong><em>作用域</em></strong>是一个共享区域，提供了一个让模板，模型和控制器协同工作的区域。在作用域中的所有变化都是同步的（数据模型的变化即时反映到视图，视图的变化即时反映到数据模型）</p>\n</blockquote>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2>","excerpt":"","more":"<h2 id=\"视图与模板\"><a href=\"#视图与模板\" class=\"headerlink\" title=\"视图与模板\"></a>视图与模板</h2><p>在angularjs中，视图就是对应数据模型model的html模板，也就意味着一旦数据模型model的数据发生改变，视图也会随之改变（含有数据绑定的部分） </p>\n<p>app/index.html:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html ng-app=\"phonecatApp\"&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;script src=\"bower_components/angular/angular.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=\"js/controllers.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body ng-controller=\"PhoneListCtrl\"&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li ng-repeat=\"phone in phones\"&gt;</span><br><span class=\"line\">      &lt;span&gt;&#123;&#123;phone.name&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;&#123;phone.snippet&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>We replaced the hard-coded phone list with the <a href=\"https://docs.angularjs.org/api/ng/directive/ngRepeat\">ngRepeat directive</a> and two <a href=\"https://docs.angularjs.org/guide/expression\">Angular expressions</a>:</p>\n<ul>\n<li><p>The ng-repeat=”phone in phones” attribute in the <em>&lt;</em>li<em>&gt;</em> tag is an Angular repeater directive. The repeater tells Angular to create a <em>&lt;</em>li<em>&gt;</em> element for each phone in the list using the <em>&lt;</em>li<em>&gt;</em> tag as the template.</p>\n</li>\n<li><p>The expressions wrapped in curly braces ( and ) will be replaced by the value of the expressions.</p>\n</li>\n</ul>\n<p>这里我们使用angularjs的<strong><em>ngRepeat</em></strong>语句进行重复的显示： </p>\n<ul>\n<li>ng-repeat=”phone in phones”这句话就是说对于phones集合中的每一个phone个体，都会产生一个数据显示，因为是在<em>&lt;</em>li<em>&gt;</em>标签中写的，所以每一个phone个体都会生成一个对应的Li（列表项）</li>\n</ul>\n<p>We have added a new directive, called ng-controller, which attaches a PhoneListCtrl controller to the <body> tag. At this point: </p>\n<ul>\n<li>The expressions in curly braces ( and ) denote bindings, which are referring to our application model, which is set up in our PhoneListCtrl controller.</li>\n</ul>\n<p>这里我们提到一个新的原语<strong>ng-controller</strong>，这个原语把名为<strong>PhoneListCtrl</strong>的控制器赋给<em>&lt;</em>body<em>&gt;</em>标签，那么的这些表达式都会在这个控制器的作用域下进行运算</p>\n<p><img src=\"/media/14627231086908.jpg\" alt=\"\"></p>\n<p>##模型与控制器</p>\n<p>数据模型被控制器PhoneListCtrl所创建，控制器其实就是一个构造函数，简单的使用了$scope作为输入参数：<br>app/js/controllers.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> phonecatApp = angular.module(<span class=\"string\">'phonecatApp'</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\">phonecatApp.controller(<span class=\"string\">'PhoneListCtrl'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">  $scope.phones = [</span><br><span class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Nexus S'</span>,</span><br><span class=\"line\">     <span class=\"string\">'snippet'</span>: <span class=\"string\">'Fast just got faster with Nexus S.'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'Motorola XOOM™ with Wi-Fi'</span>,</span><br><span class=\"line\">     <span class=\"string\">'snippet'</span>: <span class=\"string\">'The Next, Next Generation tablet.'</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'MOTOROLA XOOM™'</span>,</span><br><span class=\"line\">     <span class=\"string\">'snippet'</span>: <span class=\"string\">'The Next, Next Generation tablet.'</span>&#125;</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里我们声明了一个名叫PhoneListCtrl的控制器，而且把它注册在phonecatApp的angularjs模块中。注意我们在<em>&lt;</em>html<em>&gt;</em>标签中显式声明了ng-app=phonecatApp 作用域scope: </p>\n<blockquote>\n<p><strong><em>作用域</em></strong>是一个共享区域，提供了一个让模板，模型和控制器协同工作的区域。在作用域中的所有变化都是同步的（数据模型的变化即时反映到视图，视图的变化即时反映到数据模型）</p>\n</blockquote>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2>"},{"title":"C++11的新特性","date":"2016-06-02T21:43:38.000Z","description":"鉴于我工作会用到C++11，所以特地记录下C++11的一些新特性","_content":"# `__func__` 预定义标识符\n`__func__` 的功能是返回所在函数的名字，如下：\n\n\n```C++\nconst char* Hello() {return __func__;}\nconst char* World() {return __func__;}\n```\n\n而且`__func__`还可以被使用在类和结构体中，例如可以在类的构造函数中使用`__func__`作为初始化成员列表的参数，如下：\n\n```C++\nclass TestClass{     \n    private:\n        const char* name;\n    public:\n        TestClass():name(__func__){}\n        const char* getName(){ return name; }\n    };\n}\n```\n# _Pragma操作符\n`#Pragma`是一条预处理指令，例如我们可以在头文件中使用以下指令：\n\n```C++\n#Pragma once\n```\n\n熟悉C++的同学大概都知道，以上命令会告知编译器，当前的头文件只编译一次，等效于以下命令：\n\n\n```C++\n#ifdefine HEADER\n#define HEADER\n//具体的头文件定义实现\n#endif\n```\n\n在C++11中，定义了与预处理指令`#Pragma`功能相同的操作符 _Pragma。 _Pragma操作符格式如下所示:\n\n\n```C++\n_Pragma(字符串字面量)\n```\n\n例如：\n\n```C++\n_Pragma(\"once\");\n```\n\n# 模板函数，以及模板函数的默认模板参数\n## 模板函数\n\n函数也可以定义模板，如下：\n\n```C++\ntemplate<typename T> void printObject(T t){\n\tstd::cout << t << std::endl;\n}\nint main(int argc, const char * argv[]) {\n\tprintObject(1.5);\n\tprintObject(\"1.7\");\n}\n```\n执行结果：\n\n```C++\n1.5\n1.7\n```\n在函数printObject中，我们定义了一个模板类型T，并且把它显示出来。编译器会根据输入的参数类型进行类型推断。\n## 模板函数的默认模板参数\n\n```C++\ntemplate<typename T = double> void defaultPrintObject(T t = 0.5){\n\tstd::cout << t << std::endl;\n}\nint main(int argc, const char * argv[]) {\n\tdefaultPrintObject();\n\tdefaultPrintObject(1);\n}\n```\n执行结果\n\n```C++\n0.5\n1\n```\n在函数defaultPrintObject中，我们定义了默认的模板参数类型`<typename T = double>`和默认值`t = 0.5`。我们可以看到调用时，就算没有填入参数`defaultPrintObject();`，编译器也可以根据默认值进行推断运行。\n\n## 注意事项\n模板函数的默认模板推断是从右到左的，例如：\n\n```C++\ntemplate<typename T1, typename T2 = int> class Test1;\ntemplate<typename T1 = int, typename T2 > class Test2;//不能通过编译\n```\n# 委托构造函数\n\n# decltype\ndecltype可以用来进行类型推倒，我的理解是这个原语有点像Java里面的类反射机制，接下来让我们看些代码：\n\n# lambda函数\n\n\n\n\n# 样例代码链接\n* [My Github](https://github.com/guojiex/leetcodeThing/tree/master/datastructure%20and%20algorithm/c%2B%2B11/cplusplus11test/cplusplus11test)\n\n# 参考文献\n* [深入理解C++11](https://book.douban.com/subject/24738301/)\n\n\n","source":"_posts/c-11的新特性.md","raw":"---\ntitle: C++11的新特性\ndate: 2016-06-02 17:43:38\ndescription: 鉴于我工作会用到C++11，所以特地记录下C++11的一些新特性\ncategories: 深入理解C++\ntags:\n- C++\n- C++11\n---\n# `__func__` 预定义标识符\n`__func__` 的功能是返回所在函数的名字，如下：\n\n\n```C++\nconst char* Hello() {return __func__;}\nconst char* World() {return __func__;}\n```\n\n而且`__func__`还可以被使用在类和结构体中，例如可以在类的构造函数中使用`__func__`作为初始化成员列表的参数，如下：\n\n```C++\nclass TestClass{     \n    private:\n        const char* name;\n    public:\n        TestClass():name(__func__){}\n        const char* getName(){ return name; }\n    };\n}\n```\n# _Pragma操作符\n`#Pragma`是一条预处理指令，例如我们可以在头文件中使用以下指令：\n\n```C++\n#Pragma once\n```\n\n熟悉C++的同学大概都知道，以上命令会告知编译器，当前的头文件只编译一次，等效于以下命令：\n\n\n```C++\n#ifdefine HEADER\n#define HEADER\n//具体的头文件定义实现\n#endif\n```\n\n在C++11中，定义了与预处理指令`#Pragma`功能相同的操作符 _Pragma。 _Pragma操作符格式如下所示:\n\n\n```C++\n_Pragma(字符串字面量)\n```\n\n例如：\n\n```C++\n_Pragma(\"once\");\n```\n\n# 模板函数，以及模板函数的默认模板参数\n## 模板函数\n\n函数也可以定义模板，如下：\n\n```C++\ntemplate<typename T> void printObject(T t){\n\tstd::cout << t << std::endl;\n}\nint main(int argc, const char * argv[]) {\n\tprintObject(1.5);\n\tprintObject(\"1.7\");\n}\n```\n执行结果：\n\n```C++\n1.5\n1.7\n```\n在函数printObject中，我们定义了一个模板类型T，并且把它显示出来。编译器会根据输入的参数类型进行类型推断。\n## 模板函数的默认模板参数\n\n```C++\ntemplate<typename T = double> void defaultPrintObject(T t = 0.5){\n\tstd::cout << t << std::endl;\n}\nint main(int argc, const char * argv[]) {\n\tdefaultPrintObject();\n\tdefaultPrintObject(1);\n}\n```\n执行结果\n\n```C++\n0.5\n1\n```\n在函数defaultPrintObject中，我们定义了默认的模板参数类型`<typename T = double>`和默认值`t = 0.5`。我们可以看到调用时，就算没有填入参数`defaultPrintObject();`，编译器也可以根据默认值进行推断运行。\n\n## 注意事项\n模板函数的默认模板推断是从右到左的，例如：\n\n```C++\ntemplate<typename T1, typename T2 = int> class Test1;\ntemplate<typename T1 = int, typename T2 > class Test2;//不能通过编译\n```\n# 委托构造函数\n\n# decltype\ndecltype可以用来进行类型推倒，我的理解是这个原语有点像Java里面的类反射机制，接下来让我们看些代码：\n\n# lambda函数\n\n\n\n\n# 样例代码链接\n* [My Github](https://github.com/guojiex/leetcodeThing/tree/master/datastructure%20and%20algorithm/c%2B%2B11/cplusplus11test/cplusplus11test)\n\n# 参考文献\n* [深入理解C++11](https://book.douban.com/subject/24738301/)\n\n\n","slug":"c-11的新特性","published":1,"updated":"2016-06-17T10:30:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdew000hnpu2xm477wt3","content":"<h1 id=\"func-预定义标识符\"><a href=\"#func-预定义标识符\" class=\"headerlink\" title=\"__func__ 预定义标识符\"></a><code>__func__</code> 预定义标识符</h1><p><code>__func__</code> 的功能是返回所在函数的名字，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">Hello</span><span class=\"params\">()</span> </span>&#123;return __func__;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">World</span><span class=\"params\">()</span> </span>&#123;return __func__;&#125;</span><br></pre></td></tr></table></figure>\n<p>而且<code>__func__</code>还可以被使用在类和结构体中，例如可以在类的构造函数中使用<code>__func__</code>作为初始化成员列表的参数，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> TestClass&#123;     </span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        TestClass():name(__func__)&#123;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123; return name; &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Pragma操作符\"><a href=\"#Pragma操作符\" class=\"headerlink\" title=\"_Pragma操作符\"></a>_Pragma操作符</h1><p><code>#Pragma</code>是一条预处理指令，例如我们可以在头文件中使用以下指令：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#Pragma once</span></span><br></pre></td></tr></table></figure>\n<p>熟悉C++的同学大概都知道，以上命令会告知编译器，当前的头文件只编译一次，等效于以下命令：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#ifdefine HEADER</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HEADER</span></span><br><span class=\"line\"><span class=\"comment\">//具体的头文件定义实现</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>在C++11中，定义了与预处理指令<code>#Pragma</code>功能相同的操作符 _Pragma。 _Pragma操作符格式如下所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Pragma(字符串字面量)</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Pragma(<span class=\"string\">\"once\"</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"模板函数，以及模板函数的默认模板参数\"><a href=\"#模板函数，以及模板函数的默认模板参数\" class=\"headerlink\" title=\"模板函数，以及模板函数的默认模板参数\"></a>模板函数，以及模板函数的默认模板参数</h1><h2 id=\"模板函数\"><a href=\"#模板函数\" class=\"headerlink\" title=\"模板函数\"></a>模板函数</h2><p>函数也可以定义模板，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printObject</span><span class=\"params\">(T t)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">\tprintObject(<span class=\"number\">1.5</span>);</span><br><span class=\"line\">\tprintObject(<span class=\"string\">\"1.7\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.5</span></span><br><span class=\"line\"><span class=\"number\">1.7</span></span><br></pre></td></tr></table></figure>\n<p>在函数printObject中，我们定义了一个模板类型T，并且把它显示出来。编译器会根据输入的参数类型进行类型推断。</p>\n<h2 id=\"模板函数的默认模板参数\"><a href=\"#模板函数的默认模板参数\" class=\"headerlink\" title=\"模板函数的默认模板参数\"></a>模板函数的默认模板参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T = <span class=\"keyword\">double</span>&gt; <span class=\"keyword\">void</span> defaultPrintObject(T t = <span class=\"number\">0.5</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">\tdefaultPrintObject();</span><br><span class=\"line\">\tdefaultPrintObject(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.5</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>在函数defaultPrintObject中，我们定义了默认的模板参数类型<code>&lt;typename T = double&gt;</code>和默认值<code>t = 0.5</code>。我们可以看到调用时，就算没有填入参数<code>defaultPrintObject();</code>，编译器也可以根据默认值进行推断运行。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>模板函数的默认模板推断是从右到左的，例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T1, <span class=\"keyword\">typename</span> T2 = <span class=\"keyword\">int</span>&gt; <span class=\"keyword\">class</span> Test1;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T1 = <span class=\"keyword\">int</span>, <span class=\"keyword\">typename</span> T2 &gt; <span class=\"keyword\">class</span> Test2;<span class=\"comment\">//不能通过编译</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"委托构造函数\"><a href=\"#委托构造函数\" class=\"headerlink\" title=\"委托构造函数\"></a>委托构造函数</h1><h1 id=\"decltype\"><a href=\"#decltype\" class=\"headerlink\" title=\"decltype\"></a>decltype</h1><p>decltype可以用来进行类型推倒，我的理解是这个原语有点像Java里面的类反射机制，接下来让我们看些代码：</p>\n<h1 id=\"lambda函数\"><a href=\"#lambda函数\" class=\"headerlink\" title=\"lambda函数\"></a>lambda函数</h1><h1 id=\"样例代码链接\"><a href=\"#样例代码链接\" class=\"headerlink\" title=\"样例代码链接\"></a>样例代码链接</h1><ul>\n<li><a href=\"https://github.com/guojiex/leetcodeThing/tree/master/datastructure%20and%20algorithm/c%2B%2B11/cplusplus11test/cplusplus11test\" target=\"_blank\" rel=\"external\">My Github</a></li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"https://book.douban.com/subject/24738301/\" target=\"_blank\" rel=\"external\">深入理解C++11</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"func-预定义标识符\"><a href=\"#func-预定义标识符\" class=\"headerlink\" title=\"__func__ 预定义标识符\"></a><code>__func__</code> 预定义标识符</h1><p><code>__func__</code> 的功能是返回所在函数的名字，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">Hello</span><span class=\"params\">()</span> </span>&#123;return __func__;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">World</span><span class=\"params\">()</span> </span>&#123;return __func__;&#125;</span><br></pre></td></tr></table></figure>\n<p>而且<code>__func__</code>还可以被使用在类和结构体中，例如可以在类的构造函数中使用<code>__func__</code>作为初始化成员列表的参数，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> TestClass&#123;     </span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        TestClass():name(__func__)&#123;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123; return name; &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Pragma操作符\"><a href=\"#Pragma操作符\" class=\"headerlink\" title=\"_Pragma操作符\"></a>_Pragma操作符</h1><p><code>#Pragma</code>是一条预处理指令，例如我们可以在头文件中使用以下指令：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#Pragma once</span></span><br></pre></td></tr></table></figure>\n<p>熟悉C++的同学大概都知道，以上命令会告知编译器，当前的头文件只编译一次，等效于以下命令：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#ifdefine HEADER</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HEADER</span></span><br><span class=\"line\"><span class=\"comment\">//具体的头文件定义实现</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>在C++11中，定义了与预处理指令<code>#Pragma</code>功能相同的操作符 _Pragma。 _Pragma操作符格式如下所示:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Pragma(字符串字面量)</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Pragma(<span class=\"string\">\"once\"</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"模板函数，以及模板函数的默认模板参数\"><a href=\"#模板函数，以及模板函数的默认模板参数\" class=\"headerlink\" title=\"模板函数，以及模板函数的默认模板参数\"></a>模板函数，以及模板函数的默认模板参数</h1><h2 id=\"模板函数\"><a href=\"#模板函数\" class=\"headerlink\" title=\"模板函数\"></a>模板函数</h2><p>函数也可以定义模板，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printObject</span><span class=\"params\">(T t)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">\tprintObject(<span class=\"number\">1.5</span>);</span><br><span class=\"line\">\tprintObject(<span class=\"string\">\"1.7\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.5</span></span><br><span class=\"line\"><span class=\"number\">1.7</span></span><br></pre></td></tr></table></figure>\n<p>在函数printObject中，我们定义了一个模板类型T，并且把它显示出来。编译器会根据输入的参数类型进行类型推断。</p>\n<h2 id=\"模板函数的默认模板参数\"><a href=\"#模板函数的默认模板参数\" class=\"headerlink\" title=\"模板函数的默认模板参数\"></a>模板函数的默认模板参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T = <span class=\"keyword\">double</span>&gt; <span class=\"keyword\">void</span> defaultPrintObject(T t = <span class=\"number\">0.5</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">\tdefaultPrintObject();</span><br><span class=\"line\">\tdefaultPrintObject(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.5</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>在函数defaultPrintObject中，我们定义了默认的模板参数类型<code>&lt;typename T = double&gt;</code>和默认值<code>t = 0.5</code>。我们可以看到调用时，就算没有填入参数<code>defaultPrintObject();</code>，编译器也可以根据默认值进行推断运行。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>模板函数的默认模板推断是从右到左的，例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T1, <span class=\"keyword\">typename</span> T2 = <span class=\"keyword\">int</span>&gt; <span class=\"keyword\">class</span> Test1;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T1 = <span class=\"keyword\">int</span>, <span class=\"keyword\">typename</span> T2 &gt; <span class=\"keyword\">class</span> Test2;<span class=\"comment\">//不能通过编译</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"委托构造函数\"><a href=\"#委托构造函数\" class=\"headerlink\" title=\"委托构造函数\"></a>委托构造函数</h1><h1 id=\"decltype\"><a href=\"#decltype\" class=\"headerlink\" title=\"decltype\"></a>decltype</h1><p>decltype可以用来进行类型推倒，我的理解是这个原语有点像Java里面的类反射机制，接下来让我们看些代码：</p>\n<h1 id=\"lambda函数\"><a href=\"#lambda函数\" class=\"headerlink\" title=\"lambda函数\"></a>lambda函数</h1><h1 id=\"样例代码链接\"><a href=\"#样例代码链接\" class=\"headerlink\" title=\"样例代码链接\"></a>样例代码链接</h1><ul>\n<li><a href=\"https://github.com/guojiex/leetcodeThing/tree/master/datastructure%20and%20algorithm/c%2B%2B11/cplusplus11test/cplusplus11test\">My Github</a></li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"https://book.douban.com/subject/24738301/\">深入理解C++11</a></li>\n</ul>\n"},{"title":"模拟面试","date":"2016-05-28T01:45:41.000Z","description":"以我经历过的面试为基础改写而成的面试分析","_content":"> 面试一定要自信，自信，自信！重要的事情说三遍！\n> 这篇文章是为了让大家对面试有所了解而写\n> 以我经历过的google面试为基础改写而成（顺便锻炼下自己面试的能力，笑😊）\n\n# 面试求职要点\n\n为了方便大家，我首先把需要注意的点列在这里\n\n1. 内推比网投实用多了，特别是FLAG这样的大公司\n2. 听完问题，先向面试官提问直到弄清楚问题中所有描述不清楚的点\n3. 向面试官要样例输入输出\n4. 思考一两分钟差不多就应该有大概的思路，然后向面试官阐述你的算法，得到肯定就可以开始编码\n5. 如果一时之间想不到解决方法，不要傻站在那里，可以问面试官要提示（会降低你的评价，但总好过没答出来）\n6. 写完代码先自己在心里跑一遍，可以发现自己代码中的bug（理论上也可以增加评价，或者不会给自己扣分）\n7. 不要上来就写出最优解法，特别是你已经见过题目的情况下。最好的做法是先写一个中等的解法，然后尽量和面试官讨论慢慢改进\n\n\n# 地下城\n## 第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）\n### 问题描述\n系统产生一个secret object,同时系统提供给你一个API，这个API会返回你猜的object和系统产生的secret object的相似度\n\n### 目标\n尽可能少地调用API，而且保证你的算法最终会得到正确的结果（证明你的算法最终必有解），正确的结果就是系统产生的那个secret object\n \n### 面试实战\n\n1. 首先最重要的一点就是向面试官确认题目描述中任何不清楚的点。这一步可以在面试过程中的任何一个时间点进行，目的除了理清题目的要求，还有一点是向面试官展示你思维的全面性（你是否考虑到了问题的方方面面）；比如，我就是问了面试官，才知道最终的目标必然存在于词典中。\n2. 向面试官请求一个输入输出的样例，这一点也是非常重要的。因为有可能面试官故意不在问题描述的时候给出例子，然后你又一头扎进问题里面忘了问例子，最终钻牛角尖或者对问题理解偏差。\n3. 先向面试官讲解你的解题思路（最好画图），确定没有问题才能开始写。\n4. 写完代码，最好自己把样例输入带入代码，亲自运行一遍，可以自己发现代码中的小bug,也是面试中加分点之一。\n\t\n\n## 第二关：井字过三关\n\n### 隐藏的坑（follow up）\n1. 棋盘的大小\n2. 参加的玩家数量\n\n### Testcase\n当你写完了代码，面试官有可能要你自己准备一些test case用以测试你程序的正确性，以及看你对测试的理解是否足够。\n\n在这里我给出一个思路，把二维棋盘拉成一维，标上坐标，然后产生随机数模拟每个游戏玩家下子的过程。\n\n一般来说***单元测试***要测试正常输入，exception，以及尽量保证代码100%覆盖。\n\n\n\n\n","source":"_posts/google模拟面试.md","raw":"---\ntitle: 模拟面试\ndate: 2016-05-27 21:45:41\ndescription: 以我经历过的面试为基础改写而成的面试分析\ncategories: 面试\ntags:\n- 面试\n- Google\n---\n> 面试一定要自信，自信，自信！重要的事情说三遍！\n> 这篇文章是为了让大家对面试有所了解而写\n> 以我经历过的google面试为基础改写而成（顺便锻炼下自己面试的能力，笑😊）\n\n# 面试求职要点\n\n为了方便大家，我首先把需要注意的点列在这里\n\n1. 内推比网投实用多了，特别是FLAG这样的大公司\n2. 听完问题，先向面试官提问直到弄清楚问题中所有描述不清楚的点\n3. 向面试官要样例输入输出\n4. 思考一两分钟差不多就应该有大概的思路，然后向面试官阐述你的算法，得到肯定就可以开始编码\n5. 如果一时之间想不到解决方法，不要傻站在那里，可以问面试官要提示（会降低你的评价，但总好过没答出来）\n6. 写完代码先自己在心里跑一遍，可以发现自己代码中的bug（理论上也可以增加评价，或者不会给自己扣分）\n7. 不要上来就写出最优解法，特别是你已经见过题目的情况下。最好的做法是先写一个中等的解法，然后尽量和面试官讨论慢慢改进\n\n\n# 地下城\n## 第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）\n### 问题描述\n系统产生一个secret object,同时系统提供给你一个API，这个API会返回你猜的object和系统产生的secret object的相似度\n\n### 目标\n尽可能少地调用API，而且保证你的算法最终会得到正确的结果（证明你的算法最终必有解），正确的结果就是系统产生的那个secret object\n \n### 面试实战\n\n1. 首先最重要的一点就是向面试官确认题目描述中任何不清楚的点。这一步可以在面试过程中的任何一个时间点进行，目的除了理清题目的要求，还有一点是向面试官展示你思维的全面性（你是否考虑到了问题的方方面面）；比如，我就是问了面试官，才知道最终的目标必然存在于词典中。\n2. 向面试官请求一个输入输出的样例，这一点也是非常重要的。因为有可能面试官故意不在问题描述的时候给出例子，然后你又一头扎进问题里面忘了问例子，最终钻牛角尖或者对问题理解偏差。\n3. 先向面试官讲解你的解题思路（最好画图），确定没有问题才能开始写。\n4. 写完代码，最好自己把样例输入带入代码，亲自运行一遍，可以自己发现代码中的小bug,也是面试中加分点之一。\n\t\n\n## 第二关：井字过三关\n\n### 隐藏的坑（follow up）\n1. 棋盘的大小\n2. 参加的玩家数量\n\n### Testcase\n当你写完了代码，面试官有可能要你自己准备一些test case用以测试你程序的正确性，以及看你对测试的理解是否足够。\n\n在这里我给出一个思路，把二维棋盘拉成一维，标上坐标，然后产生随机数模拟每个游戏玩家下子的过程。\n\n一般来说***单元测试***要测试正常输入，exception，以及尽量保证代码100%覆盖。\n\n\n\n\n","slug":"google模拟面试","published":1,"updated":"2016-08-23T21:06:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdf0000knpu2388x865q","content":"<blockquote>\n<p>面试一定要自信，自信，自信！重要的事情说三遍！<br>这篇文章是为了让大家对面试有所了解而写<br>以我经历过的google面试为基础改写而成（顺便锻炼下自己面试的能力，笑😊）</p>\n</blockquote>\n<h1 id=\"面试求职要点\"><a href=\"#面试求职要点\" class=\"headerlink\" title=\"面试求职要点\"></a>面试求职要点</h1><p>为了方便大家，我首先把需要注意的点列在这里</p>\n<ol>\n<li>内推比网投实用多了，特别是FLAG这样的大公司</li>\n<li>听完问题，先向面试官提问直到弄清楚问题中所有描述不清楚的点</li>\n<li>向面试官要样例输入输出</li>\n<li>思考一两分钟差不多就应该有大概的思路，然后向面试官阐述你的算法，得到肯定就可以开始编码</li>\n<li>如果一时之间想不到解决方法，不要傻站在那里，可以问面试官要提示（会降低你的评价，但总好过没答出来）</li>\n<li>写完代码先自己在心里跑一遍，可以发现自己代码中的bug（理论上也可以增加评价，或者不会给自己扣分）</li>\n<li>不要上来就写出最优解法，特别是你已经见过题目的情况下。最好的做法是先写一个中等的解法，然后尽量和面试官讨论慢慢改进</li>\n</ol>\n<h1 id=\"地下城\"><a href=\"#地下城\" class=\"headerlink\" title=\"地下城\"></a>地下城</h1><h2 id=\"第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）\"><a href=\"#第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）\" class=\"headerlink\" title=\"第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）\"></a>第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>系统产生一个secret object,同时系统提供给你一个API，这个API会返回你猜的object和系统产生的secret object的相似度</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>尽可能少地调用API，而且保证你的算法最终会得到正确的结果（证明你的算法最终必有解），正确的结果就是系统产生的那个secret object</p>\n<h3 id=\"面试实战\"><a href=\"#面试实战\" class=\"headerlink\" title=\"面试实战\"></a>面试实战</h3><ol>\n<li>首先最重要的一点就是向面试官确认题目描述中任何不清楚的点。这一步可以在面试过程中的任何一个时间点进行，目的除了理清题目的要求，还有一点是向面试官展示你思维的全面性（你是否考虑到了问题的方方面面）；比如，我就是问了面试官，才知道最终的目标必然存在于词典中。</li>\n<li>向面试官请求一个输入输出的样例，这一点也是非常重要的。因为有可能面试官故意不在问题描述的时候给出例子，然后你又一头扎进问题里面忘了问例子，最终钻牛角尖或者对问题理解偏差。</li>\n<li>先向面试官讲解你的解题思路（最好画图），确定没有问题才能开始写。</li>\n<li>写完代码，最好自己把样例输入带入代码，亲自运行一遍，可以自己发现代码中的小bug,也是面试中加分点之一。</li>\n</ol>\n<h2 id=\"第二关：井字过三关\"><a href=\"#第二关：井字过三关\" class=\"headerlink\" title=\"第二关：井字过三关\"></a>第二关：井字过三关</h2><h3 id=\"隐藏的坑（follow-up）\"><a href=\"#隐藏的坑（follow-up）\" class=\"headerlink\" title=\"隐藏的坑（follow up）\"></a>隐藏的坑（follow up）</h3><ol>\n<li>棋盘的大小</li>\n<li>参加的玩家数量</li>\n</ol>\n<h3 id=\"Testcase\"><a href=\"#Testcase\" class=\"headerlink\" title=\"Testcase\"></a>Testcase</h3><p>当你写完了代码，面试官有可能要你自己准备一些test case用以测试你程序的正确性，以及看你对测试的理解是否足够。</p>\n<p>在这里我给出一个思路，把二维棋盘拉成一维，标上坐标，然后产生随机数模拟每个游戏玩家下子的过程。</p>\n<p>一般来说<strong><em>单元测试</em></strong>要测试正常输入，exception，以及尽量保证代码100%覆盖。</p>\n","excerpt":"","more":"<blockquote>\n<p>面试一定要自信，自信，自信！重要的事情说三遍！<br>这篇文章是为了让大家对面试有所了解而写<br>以我经历过的google面试为基础改写而成（顺便锻炼下自己面试的能力，笑😊）</p>\n</blockquote>\n<h1 id=\"面试求职要点\"><a href=\"#面试求职要点\" class=\"headerlink\" title=\"面试求职要点\"></a>面试求职要点</h1><p>为了方便大家，我首先把需要注意的点列在这里</p>\n<ol>\n<li>内推比网投实用多了，特别是FLAG这样的大公司</li>\n<li>听完问题，先向面试官提问直到弄清楚问题中所有描述不清楚的点</li>\n<li>向面试官要样例输入输出</li>\n<li>思考一两分钟差不多就应该有大概的思路，然后向面试官阐述你的算法，得到肯定就可以开始编码</li>\n<li>如果一时之间想不到解决方法，不要傻站在那里，可以问面试官要提示（会降低你的评价，但总好过没答出来）</li>\n<li>写完代码先自己在心里跑一遍，可以发现自己代码中的bug（理论上也可以增加评价，或者不会给自己扣分）</li>\n<li>不要上来就写出最优解法，特别是你已经见过题目的情况下。最好的做法是先写一个中等的解法，然后尽量和面试官讨论慢慢改进</li>\n</ol>\n<h1 id=\"地下城\"><a href=\"#地下城\" class=\"headerlink\" title=\"地下城\"></a>地下城</h1><h2 id=\"第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）\"><a href=\"#第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）\" class=\"headerlink\" title=\"第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）\"></a>第一关：你猜（这里展示的并不是原题，只是提供大概思路与原理）</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>系统产生一个secret object,同时系统提供给你一个API，这个API会返回你猜的object和系统产生的secret object的相似度</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>尽可能少地调用API，而且保证你的算法最终会得到正确的结果（证明你的算法最终必有解），正确的结果就是系统产生的那个secret object</p>\n<h3 id=\"面试实战\"><a href=\"#面试实战\" class=\"headerlink\" title=\"面试实战\"></a>面试实战</h3><ol>\n<li>首先最重要的一点就是向面试官确认题目描述中任何不清楚的点。这一步可以在面试过程中的任何一个时间点进行，目的除了理清题目的要求，还有一点是向面试官展示你思维的全面性（你是否考虑到了问题的方方面面）；比如，我就是问了面试官，才知道最终的目标必然存在于词典中。</li>\n<li>向面试官请求一个输入输出的样例，这一点也是非常重要的。因为有可能面试官故意不在问题描述的时候给出例子，然后你又一头扎进问题里面忘了问例子，最终钻牛角尖或者对问题理解偏差。</li>\n<li>先向面试官讲解你的解题思路（最好画图），确定没有问题才能开始写。</li>\n<li>写完代码，最好自己把样例输入带入代码，亲自运行一遍，可以自己发现代码中的小bug,也是面试中加分点之一。</li>\n</ol>\n<h2 id=\"第二关：井字过三关\"><a href=\"#第二关：井字过三关\" class=\"headerlink\" title=\"第二关：井字过三关\"></a>第二关：井字过三关</h2><h3 id=\"隐藏的坑（follow-up）\"><a href=\"#隐藏的坑（follow-up）\" class=\"headerlink\" title=\"隐藏的坑（follow up）\"></a>隐藏的坑（follow up）</h3><ol>\n<li>棋盘的大小</li>\n<li>参加的玩家数量</li>\n</ol>\n<h3 id=\"Testcase\"><a href=\"#Testcase\" class=\"headerlink\" title=\"Testcase\"></a>Testcase</h3><p>当你写完了代码，面试官有可能要你自己准备一些test case用以测试你程序的正确性，以及看你对测试的理解是否足够。</p>\n<p>在这里我给出一个思路，把二维棋盘拉成一维，标上坐标，然后产生随机数模拟每个游戏玩家下子的过程。</p>\n<p>一般来说<strong><em>单元测试</em></strong>要测试正常输入，exception，以及尽量保证代码100%覆盖。</p>\n"},{"title":"xcode自动注释插件","date":"2016-05-25T22:27:58.000Z","description":"如何安装xcode上的c++自动注释插件","_content":"\n# Alcatraz\n一个xcode的插件管理工具，安装方法见这里：[alcatraz](http://alcatraz.io)，注意下载需要翻墙。安装完成后去\n![](/media/14641731409027.jpg)\n\n这里可以打开插件管理器。\n\n# VVDocumenter-Xcode\n这是一个自动生成代码格式化注释的插件，官网在[VVDocumenter-Xcode](https://github.com/onevcat/VVDocumenter-Xcode)。\n安装方法就是先打开刚刚安装的插件管理器，然后搜索插件名字：\n![](/media/14641733223806.jpg)\n点击插件名字左边的图标。\n\n安装完毕之后，在函数前输入三个斜杠///，就会自动生成注释：\n![](/media/14641735148741.jpg)\n\n\n\n","source":"_posts/xcode-c-开发.md","raw":"---\ntitle: xcode自动注释插件\ndate: 2016-05-25 18:27:58\ndescription: 如何安装xcode上的c++自动注释插件\ntags:\n- c++\n- xcode\n---\n\n# Alcatraz\n一个xcode的插件管理工具，安装方法见这里：[alcatraz](http://alcatraz.io)，注意下载需要翻墙。安装完成后去\n![](/media/14641731409027.jpg)\n\n这里可以打开插件管理器。\n\n# VVDocumenter-Xcode\n这是一个自动生成代码格式化注释的插件，官网在[VVDocumenter-Xcode](https://github.com/onevcat/VVDocumenter-Xcode)。\n安装方法就是先打开刚刚安装的插件管理器，然后搜索插件名字：\n![](/media/14641733223806.jpg)\n点击插件名字左边的图标。\n\n安装完毕之后，在函数前输入三个斜杠///，就会自动生成注释：\n![](/media/14641735148741.jpg)\n\n\n\n","slug":"xcode-c-开发","published":1,"updated":"2016-06-08T09:03:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdf2000lnpu2dhllj9dd","content":"<h1 id=\"Alcatraz\"><a href=\"#Alcatraz\" class=\"headerlink\" title=\"Alcatraz\"></a>Alcatraz</h1><p>一个xcode的插件管理工具，安装方法见这里：<a href=\"http://alcatraz.io\" target=\"_blank\" rel=\"external\">alcatraz</a>，注意下载需要翻墙。安装完成后去<br><img src=\"/media/14641731409027.jpg\" alt=\"\"></p>\n<p>这里可以打开插件管理器。</p>\n<h1 id=\"VVDocumenter-Xcode\"><a href=\"#VVDocumenter-Xcode\" class=\"headerlink\" title=\"VVDocumenter-Xcode\"></a>VVDocumenter-Xcode</h1><p>这是一个自动生成代码格式化注释的插件，官网在<a href=\"https://github.com/onevcat/VVDocumenter-Xcode\" target=\"_blank\" rel=\"external\">VVDocumenter-Xcode</a>。<br>安装方法就是先打开刚刚安装的插件管理器，然后搜索插件名字：<br><img src=\"/media/14641733223806.jpg\" alt=\"\"><br>点击插件名字左边的图标。</p>\n<p>安装完毕之后，在函数前输入三个斜杠///，就会自动生成注释：<br><img src=\"/media/14641735148741.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"Alcatraz\"><a href=\"#Alcatraz\" class=\"headerlink\" title=\"Alcatraz\"></a>Alcatraz</h1><p>一个xcode的插件管理工具，安装方法见这里：<a href=\"http://alcatraz.io\">alcatraz</a>，注意下载需要翻墙。安装完成后去<br><img src=\"/media/14641731409027.jpg\" alt=\"\"></p>\n<p>这里可以打开插件管理器。</p>\n<h1 id=\"VVDocumenter-Xcode\"><a href=\"#VVDocumenter-Xcode\" class=\"headerlink\" title=\"VVDocumenter-Xcode\"></a>VVDocumenter-Xcode</h1><p>这是一个自动生成代码格式化注释的插件，官网在<a href=\"https://github.com/onevcat/VVDocumenter-Xcode\">VVDocumenter-Xcode</a>。<br>安装方法就是先打开刚刚安装的插件管理器，然后搜索插件名字：<br><img src=\"/media/14641733223806.jpg\" alt=\"\"><br>点击插件名字左边的图标。</p>\n<p>安装完毕之后，在函数前输入三个斜杠///，就会自动生成注释：<br><img src=\"/media/14641735148741.jpg\" alt=\"\"></p>\n"},{"title":"从中大到Google","date":"2016-06-05T13:07:36.000Z","description":"我从中大到Google所经历过的，以及我所设想的","_content":"# 本科\n## 短处\n本科四年，其实我一直都处在一个浑浑噩噩的状态，简单来讲，就是没有什么必须完成不可的目标，没有目标当然也就没什么努力的行动\n\n直接的结果就是我本科四年没有拿过奖学金，也没有去过哪个实验室干过活，自然地也就别想什么论文乱七八糟的了。\n\n## 长处\n\n不过我也知道这样子混下去不是办法，所以我都尽量抓住机会让自己做更多的事情，学更多的东西。比如数据结构课上面我就强行自学了`win32 native API`设计窗口程序，后来还自学了MFC设计了另一个窗口程序（用原生C++写GUI真的好难）。然而事实证明这些都是过时的技术。。这就是没有人领路带来的不便，但是我也积累了一些自学方面的经验，为我之后的发展打下了一定的基础。\n\n此外，我还要感谢iGEM这个比赛。没有这个比赛，我也不会有今天的程度，也幸好我抓住了这个机会。\n\n## What I could do\n\n1. 进入某个老师的实验室，发篇论文或者做做项目，认识多些师兄师姐也好\n2. 真的应该找一个导师，可以指点自己的职业路径，或者当前业界的前沿方向所在，不然所有事情都靠自己会走很多弯路\n\n# 研究生\n本来我是已经保研到了中山大学信科院的，但是因为联合工程学院的招揽（好吧就是奖学金比较优厚啦），最终选择了进入联合工程学院。\n\n\n# 研一上学期\n\n\n\n\n\n\n","source":"_posts/从中大到google.md","raw":"---\ntitle: 从中大到Google\ndate: 2016-06-05 09:07:36\ndescription: 我从中大到Google所经历过的，以及我所设想的\ncategories: 日常\ntags:\n - 中大\n---\n# 本科\n## 短处\n本科四年，其实我一直都处在一个浑浑噩噩的状态，简单来讲，就是没有什么必须完成不可的目标，没有目标当然也就没什么努力的行动\n\n直接的结果就是我本科四年没有拿过奖学金，也没有去过哪个实验室干过活，自然地也就别想什么论文乱七八糟的了。\n\n## 长处\n\n不过我也知道这样子混下去不是办法，所以我都尽量抓住机会让自己做更多的事情，学更多的东西。比如数据结构课上面我就强行自学了`win32 native API`设计窗口程序，后来还自学了MFC设计了另一个窗口程序（用原生C++写GUI真的好难）。然而事实证明这些都是过时的技术。。这就是没有人领路带来的不便，但是我也积累了一些自学方面的经验，为我之后的发展打下了一定的基础。\n\n此外，我还要感谢iGEM这个比赛。没有这个比赛，我也不会有今天的程度，也幸好我抓住了这个机会。\n\n## What I could do\n\n1. 进入某个老师的实验室，发篇论文或者做做项目，认识多些师兄师姐也好\n2. 真的应该找一个导师，可以指点自己的职业路径，或者当前业界的前沿方向所在，不然所有事情都靠自己会走很多弯路\n\n# 研究生\n本来我是已经保研到了中山大学信科院的，但是因为联合工程学院的招揽（好吧就是奖学金比较优厚啦），最终选择了进入联合工程学院。\n\n\n# 研一上学期\n\n\n\n\n\n\n","slug":"从中大到google","published":1,"updated":"2016-06-26T06:15:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdf4000pnpu2bfn9v7yp","content":"<h1 id=\"本科\"><a href=\"#本科\" class=\"headerlink\" title=\"本科\"></a>本科</h1><h2 id=\"短处\"><a href=\"#短处\" class=\"headerlink\" title=\"短处\"></a>短处</h2><p>本科四年，其实我一直都处在一个浑浑噩噩的状态，简单来讲，就是没有什么必须完成不可的目标，没有目标当然也就没什么努力的行动</p>\n<p>直接的结果就是我本科四年没有拿过奖学金，也没有去过哪个实验室干过活，自然地也就别想什么论文乱七八糟的了。</p>\n<h2 id=\"长处\"><a href=\"#长处\" class=\"headerlink\" title=\"长处\"></a>长处</h2><p>不过我也知道这样子混下去不是办法，所以我都尽量抓住机会让自己做更多的事情，学更多的东西。比如数据结构课上面我就强行自学了<code>win32 native API</code>设计窗口程序，后来还自学了MFC设计了另一个窗口程序（用原生C++写GUI真的好难）。然而事实证明这些都是过时的技术。。这就是没有人领路带来的不便，但是我也积累了一些自学方面的经验，为我之后的发展打下了一定的基础。</p>\n<p>此外，我还要感谢iGEM这个比赛。没有这个比赛，我也不会有今天的程度，也幸好我抓住了这个机会。</p>\n<h2 id=\"What-I-could-do\"><a href=\"#What-I-could-do\" class=\"headerlink\" title=\"What I could do\"></a>What I could do</h2><ol>\n<li>进入某个老师的实验室，发篇论文或者做做项目，认识多些师兄师姐也好</li>\n<li>真的应该找一个导师，可以指点自己的职业路径，或者当前业界的前沿方向所在，不然所有事情都靠自己会走很多弯路</li>\n</ol>\n<h1 id=\"研究生\"><a href=\"#研究生\" class=\"headerlink\" title=\"研究生\"></a>研究生</h1><p>本来我是已经保研到了中山大学信科院的，但是因为联合工程学院的招揽（好吧就是奖学金比较优厚啦），最终选择了进入联合工程学院。</p>\n<h1 id=\"研一上学期\"><a href=\"#研一上学期\" class=\"headerlink\" title=\"研一上学期\"></a>研一上学期</h1>","excerpt":"","more":"<h1 id=\"本科\"><a href=\"#本科\" class=\"headerlink\" title=\"本科\"></a>本科</h1><h2 id=\"短处\"><a href=\"#短处\" class=\"headerlink\" title=\"短处\"></a>短处</h2><p>本科四年，其实我一直都处在一个浑浑噩噩的状态，简单来讲，就是没有什么必须完成不可的目标，没有目标当然也就没什么努力的行动</p>\n<p>直接的结果就是我本科四年没有拿过奖学金，也没有去过哪个实验室干过活，自然地也就别想什么论文乱七八糟的了。</p>\n<h2 id=\"长处\"><a href=\"#长处\" class=\"headerlink\" title=\"长处\"></a>长处</h2><p>不过我也知道这样子混下去不是办法，所以我都尽量抓住机会让自己做更多的事情，学更多的东西。比如数据结构课上面我就强行自学了<code>win32 native API</code>设计窗口程序，后来还自学了MFC设计了另一个窗口程序（用原生C++写GUI真的好难）。然而事实证明这些都是过时的技术。。这就是没有人领路带来的不便，但是我也积累了一些自学方面的经验，为我之后的发展打下了一定的基础。</p>\n<p>此外，我还要感谢iGEM这个比赛。没有这个比赛，我也不会有今天的程度，也幸好我抓住了这个机会。</p>\n<h2 id=\"What-I-could-do\"><a href=\"#What-I-could-do\" class=\"headerlink\" title=\"What I could do\"></a>What I could do</h2><ol>\n<li>进入某个老师的实验室，发篇论文或者做做项目，认识多些师兄师姐也好</li>\n<li>真的应该找一个导师，可以指点自己的职业路径，或者当前业界的前沿方向所在，不然所有事情都靠自己会走很多弯路</li>\n</ol>\n<h1 id=\"研究生\"><a href=\"#研究生\" class=\"headerlink\" title=\"研究生\"></a>研究生</h1><p>本来我是已经保研到了中山大学信科院的，但是因为联合工程学院的招揽（好吧就是奖学金比较优厚啦），最终选择了进入联合工程学院。</p>\n<h1 id=\"研一上学期\"><a href=\"#研一上学期\" class=\"headerlink\" title=\"研一上学期\"></a>研一上学期</h1>"},{"title":"如何优雅地提问","date":"2016-05-03T15:15:20.000Z","description":"你是否苦恼于提问后没人回答，是否苦恼于提问后整个群瞬间冷场？今天，我就来说说如何优雅地提问，如何提问能有更大的概率被回答。","_content":"\n# 前言\n\n如果你是女生，提问被回答的概率绝对会大大提升。我说这个并不是说有歧视或者怎么样，而是~~真的羡慕~~在陈述一个事实。当然，如果你有更好的问问题的技巧，更加无往而不利，别人更容易理解你所面对的问题，也能更快地帮助你找到解决方法。\n\n为了方便大家，我先说结论：\n\n1. 尽可能详尽的提供问题描述，至少要包括报错信息和错误的代码，截图或者文字都行\n2. 遇到问题先google，真的找不到了再去询问别人（如果你不知道某些问题要如何google，可以来问问我）。我觉得这是礼貌问题，不要见到问题想都不想先问人，这样既养成对别人的依赖，甚至还**有可能**降低别人对你的友善度。\n\n\n# 勿忘初心\n\n***首先必须明确一个观点，问问题不是为了方便自己，不是为了省时间，而是你真的想要搞明白某一个知识点，真的想学会某个东西。***\n\n## 一个简单的问题\n\n某天在群里有人问了这么一个问题：\n\n![](/media/14622903471800.jpg)\n![](/media/14622903637484.jpg)\n\n以上这两句话就是唯一的问题描述，我认为这个问题描述有两点不足：\n\n1. 既然你看得到Java的错误信息，那么你当然也会知道错误是在哪一行发生的，那为什么不把出现问题那一行代码也截图出来呢？不把你写的代码贴出来，我也很难猜错误到底为什么发生啊。。把发生错误的代码贴出来，既方便别人帮助你寻找问题的原因，也方便描述解决方案，何乐而不为。\n2. 这个问题其实应该先自己google，google的关键词就是unknown host exception，错误信息里面都写明了具体错误。![](/media/14623044008358.jpg) 我们可以看到，搜这个关键词就出来很多对应的文章，这里我们就选第二篇文章看看有没有解决方案：![](/media/14623044788056.jpg) 正好这里的第二点就提到了为什么会发生这样的错误，原因就是填写hostname的时候填错了，比如说localhost写成了local，机器解析不了这个url就报错了。联合最最开始的问题描述，我们可以知道，错误的代码里面把hostname填写成了user，自然就会报错。 \n\n### 总结\n\n不要懒，遇到问题先自己先查查搜索引擎，不要把别人对你的帮助浪费在一些微小的问题上面。\n\n其次，问问题最好把问题发生的情景描述清楚，贴上问题发生的代码以及相应的报错信息，因为有些错误发生的原因很多，自然解决方法也有不同，没有代码就会提高想帮你的人所要付出的精力（本来贴代码可以避免），也可能让原本想要帮你的人望而却步。\n\n\n\n\n\n","source":"_posts/如何优雅地提问.md","raw":"---\ntitle: 如何优雅地提问\ndate: 2016-05-03 11:15:20\ndescription: 你是否苦恼于提问后没人回答，是否苦恼于提问后整个群瞬间冷场？今天，我就来说说如何优雅地提问，如何提问能有更大的概率被回答。\ncategories: Cloud Computing从零单排\ntags:\n- 提问\n---\n\n# 前言\n\n如果你是女生，提问被回答的概率绝对会大大提升。我说这个并不是说有歧视或者怎么样，而是~~真的羡慕~~在陈述一个事实。当然，如果你有更好的问问题的技巧，更加无往而不利，别人更容易理解你所面对的问题，也能更快地帮助你找到解决方法。\n\n为了方便大家，我先说结论：\n\n1. 尽可能详尽的提供问题描述，至少要包括报错信息和错误的代码，截图或者文字都行\n2. 遇到问题先google，真的找不到了再去询问别人（如果你不知道某些问题要如何google，可以来问问我）。我觉得这是礼貌问题，不要见到问题想都不想先问人，这样既养成对别人的依赖，甚至还**有可能**降低别人对你的友善度。\n\n\n# 勿忘初心\n\n***首先必须明确一个观点，问问题不是为了方便自己，不是为了省时间，而是你真的想要搞明白某一个知识点，真的想学会某个东西。***\n\n## 一个简单的问题\n\n某天在群里有人问了这么一个问题：\n\n![](/media/14622903471800.jpg)\n![](/media/14622903637484.jpg)\n\n以上这两句话就是唯一的问题描述，我认为这个问题描述有两点不足：\n\n1. 既然你看得到Java的错误信息，那么你当然也会知道错误是在哪一行发生的，那为什么不把出现问题那一行代码也截图出来呢？不把你写的代码贴出来，我也很难猜错误到底为什么发生啊。。把发生错误的代码贴出来，既方便别人帮助你寻找问题的原因，也方便描述解决方案，何乐而不为。\n2. 这个问题其实应该先自己google，google的关键词就是unknown host exception，错误信息里面都写明了具体错误。![](/media/14623044008358.jpg) 我们可以看到，搜这个关键词就出来很多对应的文章，这里我们就选第二篇文章看看有没有解决方案：![](/media/14623044788056.jpg) 正好这里的第二点就提到了为什么会发生这样的错误，原因就是填写hostname的时候填错了，比如说localhost写成了local，机器解析不了这个url就报错了。联合最最开始的问题描述，我们可以知道，错误的代码里面把hostname填写成了user，自然就会报错。 \n\n### 总结\n\n不要懒，遇到问题先自己先查查搜索引擎，不要把别人对你的帮助浪费在一些微小的问题上面。\n\n其次，问问题最好把问题发生的情景描述清楚，贴上问题发生的代码以及相应的报错信息，因为有些错误发生的原因很多，自然解决方法也有不同，没有代码就会提高想帮你的人所要付出的精力（本来贴代码可以避免），也可能让原本想要帮你的人望而却步。\n\n\n\n\n\n","slug":"如何优雅地提问","published":1,"updated":"2016-05-04T15:44:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdf6000rnpu2omuathdx","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>如果你是女生，提问被回答的概率绝对会大大提升。我说这个并不是说有歧视或者怎么样，而是<del>真的羡慕</del>在陈述一个事实。当然，如果你有更好的问问题的技巧，更加无往而不利，别人更容易理解你所面对的问题，也能更快地帮助你找到解决方法。</p>\n<p>为了方便大家，我先说结论：</p>\n<ol>\n<li>尽可能详尽的提供问题描述，至少要包括报错信息和错误的代码，截图或者文字都行</li>\n<li>遇到问题先google，真的找不到了再去询问别人（如果你不知道某些问题要如何google，可以来问问我）。我觉得这是礼貌问题，不要见到问题想都不想先问人，这样既养成对别人的依赖，甚至还<strong>有可能</strong>降低别人对你的友善度。</li>\n</ol>\n<h1 id=\"勿忘初心\"><a href=\"#勿忘初心\" class=\"headerlink\" title=\"勿忘初心\"></a>勿忘初心</h1><p><strong><em>首先必须明确一个观点，问问题不是为了方便自己，不是为了省时间，而是你真的想要搞明白某一个知识点，真的想学会某个东西。</em></strong></p>\n<h2 id=\"一个简单的问题\"><a href=\"#一个简单的问题\" class=\"headerlink\" title=\"一个简单的问题\"></a>一个简单的问题</h2><p>某天在群里有人问了这么一个问题：</p>\n<p><img src=\"/media/14622903471800.jpg\" alt=\"\"><br><img src=\"/media/14622903637484.jpg\" alt=\"\"></p>\n<p>以上这两句话就是唯一的问题描述，我认为这个问题描述有两点不足：</p>\n<ol>\n<li>既然你看得到Java的错误信息，那么你当然也会知道错误是在哪一行发生的，那为什么不把出现问题那一行代码也截图出来呢？不把你写的代码贴出来，我也很难猜错误到底为什么发生啊。。把发生错误的代码贴出来，既方便别人帮助你寻找问题的原因，也方便描述解决方案，何乐而不为。</li>\n<li>这个问题其实应该先自己google，google的关键词就是unknown host exception，错误信息里面都写明了具体错误。<img src=\"/media/14623044008358.jpg\" alt=\"\"> 我们可以看到，搜这个关键词就出来很多对应的文章，这里我们就选第二篇文章看看有没有解决方案：<img src=\"/media/14623044788056.jpg\" alt=\"\"> 正好这里的第二点就提到了为什么会发生这样的错误，原因就是填写hostname的时候填错了，比如说localhost写成了local，机器解析不了这个url就报错了。联合最最开始的问题描述，我们可以知道，错误的代码里面把hostname填写成了user，自然就会报错。 </li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不要懒，遇到问题先自己先查查搜索引擎，不要把别人对你的帮助浪费在一些微小的问题上面。</p>\n<p>其次，问问题最好把问题发生的情景描述清楚，贴上问题发生的代码以及相应的报错信息，因为有些错误发生的原因很多，自然解决方法也有不同，没有代码就会提高想帮你的人所要付出的精力（本来贴代码可以避免），也可能让原本想要帮你的人望而却步。</p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>如果你是女生，提问被回答的概率绝对会大大提升。我说这个并不是说有歧视或者怎么样，而是<del>真的羡慕</del>在陈述一个事实。当然，如果你有更好的问问题的技巧，更加无往而不利，别人更容易理解你所面对的问题，也能更快地帮助你找到解决方法。</p>\n<p>为了方便大家，我先说结论：</p>\n<ol>\n<li>尽可能详尽的提供问题描述，至少要包括报错信息和错误的代码，截图或者文字都行</li>\n<li>遇到问题先google，真的找不到了再去询问别人（如果你不知道某些问题要如何google，可以来问问我）。我觉得这是礼貌问题，不要见到问题想都不想先问人，这样既养成对别人的依赖，甚至还<strong>有可能</strong>降低别人对你的友善度。</li>\n</ol>\n<h1 id=\"勿忘初心\"><a href=\"#勿忘初心\" class=\"headerlink\" title=\"勿忘初心\"></a>勿忘初心</h1><p><strong><em>首先必须明确一个观点，问问题不是为了方便自己，不是为了省时间，而是你真的想要搞明白某一个知识点，真的想学会某个东西。</em></strong></p>\n<h2 id=\"一个简单的问题\"><a href=\"#一个简单的问题\" class=\"headerlink\" title=\"一个简单的问题\"></a>一个简单的问题</h2><p>某天在群里有人问了这么一个问题：</p>\n<p><img src=\"/media/14622903471800.jpg\" alt=\"\"><br><img src=\"/media/14622903637484.jpg\" alt=\"\"></p>\n<p>以上这两句话就是唯一的问题描述，我认为这个问题描述有两点不足：</p>\n<ol>\n<li>既然你看得到Java的错误信息，那么你当然也会知道错误是在哪一行发生的，那为什么不把出现问题那一行代码也截图出来呢？不把你写的代码贴出来，我也很难猜错误到底为什么发生啊。。把发生错误的代码贴出来，既方便别人帮助你寻找问题的原因，也方便描述解决方案，何乐而不为。</li>\n<li>这个问题其实应该先自己google，google的关键词就是unknown host exception，错误信息里面都写明了具体错误。<img src=\"/media/14623044008358.jpg\" alt=\"\"> 我们可以看到，搜这个关键词就出来很多对应的文章，这里我们就选第二篇文章看看有没有解决方案：<img src=\"/media/14623044788056.jpg\" alt=\"\"> 正好这里的第二点就提到了为什么会发生这样的错误，原因就是填写hostname的时候填错了，比如说localhost写成了local，机器解析不了这个url就报错了。联合最最开始的问题描述，我们可以知道，错误的代码里面把hostname填写成了user，自然就会报错。 </li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不要懒，遇到问题先自己先查查搜索引擎，不要把别人对你的帮助浪费在一些微小的问题上面。</p>\n<p>其次，问问题最好把问题发生的情景描述清楚，贴上问题发生的代码以及相应的报错信息，因为有些错误发生的原因很多，自然解决方法也有不同，没有代码就会提高想帮你的人所要付出的精力（本来贴代码可以避免），也可能让原本想要帮你的人望而却步。</p>\n"},{"title":"如何像计算机科学家那样思考Python篇（第一、二章）","date":"2016-05-31T22:41:39.000Z","description":"本文是对《如何像计算机科学家那样思考》此书的翻译，主要是对代码的记录，并不是对全书的全面翻译。","_content":"\n这篇博客主要是《[如何像计算机科学家那样思考](http://openbookproject.net/thinkcs/Python/english2e/index.html)》此书的翻译，主要是对代码的记录，并不是对全书的全面翻译。\n\n# 程序之路\n## 第一个程序\n这个程序只是简单地在屏幕上显示一段文字\n**Python2.7**\n\n```Python\nprint \"Hello, World!\"\n```\n输出结果：\n\n```Python\nHello, World!\n```\n**Python3.5**\n\nPython3.5改变了print的语法，如果直接使用2.7的语法会报错\n\n```\n>>> print \"Hello world\"\n  File \"<stdin>\", line 1\n    print \"Hello world\"\n                      ^\nSyntaxError: Missing parentheses in call to 'print'\n```\n***正确的写法***\n\n```Python\nprint(\"Hello, World!\")\n```\n输出结果：\n\n```\nHello, World!\n```\n\n# 变量，表达式和语句\n## 值和数据类型\n值是最基础的事物之一***（比如一个字母或者数字）***，也是程序所操作和控制的基础事物。\n\n我们看到过的值有`2`和`\"Hello, World!\"`，它们属于不同的数据类型`2`是整数类型，`\"Hello, World!\"`是字符串类型（因为它是由一串字符组成的）。你和编译器都知道这是字符串，因为他被两个双引号包围。\n\n如果你不清楚一个值的类型是什么，那么可以使用下面的代码来得到值的类型\n\n**Python2.7**\n\n```Python\n>>> type(\"Hello, World!\")\n<type 'str'>\n>>> type(17)\n<type 'int'>\n```\n**Python3.5**\n\n```Python\n>>> type(\"Hello, World!\")\n<class 'str'>\n>>> type(17)\n<class 'int'>\n```\n***\n\n显而易见的，字符串属于类型***str***，整数属于类型***int***。不过带有小数点的数字属于类型***float***\n\n**Python2.7**\n\n```Python\n>>> type(3.2)\n<type 'float'>\n```\n**Python3.5**\n\n```Python\n>>> type(3.2)\n<class 'float'>\n```\n***\nPython中的字符串可以用单引号包括或者用双引号包括。如果最外面用双引号代表字符串，那么字符串里面可以包含单引号，比如`\"Bruce's beard`。同样的，如果最外面使用单引号代表字符串，里面可以包含双引号，比如`'The knights who say \"Ni!\"'`。\n\n此外还有使用三个单引号进行包含的字符串，例如：\n\n\n```Python\n>>> print('''\"Oh no\", she exclaimed, \"Ben's bike is broken!\"''')\n\"Oh no\", she exclaimed, \"Ben's bike is broken!\"\n>>>\n```\n***\n另外，平时针对大整数的使用逗号分割的写法在Python中是不识别的（虽然不会有语法错误），例如：\n\n**Python2.7**\n\n```Python\n>>> print 1,000,000\n1 0 0\n```\n\n**Python3.5**\n\n```Python\n>>> print(42,000)\n42 0\n>>>\n```\n\n## 变量\n编程语言其中一个重要的特性就是操作控制**变量**的能力。\n\n**赋值语句**可以产生新的变量并且赋给他们值：\n\n```Python\n>>> message = \"What's up, Doc?\"\n>>> n = 17\n>>> pi = 3.14159\n```\n上面这个例子给出了三个句子。第一个把字符串`\"What's up, Doc?\"`赋值给一个叫做`message`的新变量。第二个语句把整数`17`赋值给`n`，第三个语句把浮点数`3.14159`赋给`pi`。\n\n这里注意，赋值运算符**=**，并不是我们平时数学意义上的等号（哪怕他们是同样的符号）。赋值运算符把等号左边称为**变量名字**，右边是想要付给这个变量的**值**，这就是为什么你输入以下代码会报错：\n\n\n```Python\n>>> 17 = n\nFile \"<interactive input>\", line 1\nSyntaxError: can't assign to literal\n```\n\n## 变量名和关键字（保留字）\n通常来说，程序员会为他们的变量选择恰当的名字——他们会记录下这个变量的用途。\n\n**变量名**可以很长。其中可以包含字母和数字，但是必须以字母开头。尽管使用大写字母是合法的，但是传统上我们不会这样做。变量名是大小写敏感的：`Bruce`和`bruce`是不同的变量。\n\n下划线字符（_）是可以使用在变量名中的，它经常被用于变量名中用于切分多个单词的情况，比如说`my_name`或者`price_of_tea_in_china`。\n\n如果你使用了不合法的变量名，Python会报错：\n\n\n```Python\n>>> 76trombones = \"big parade\"\nSyntaxError: invalid syntax\n>>> more$ = 1000000\nSyntaxError: invalid syntax\n>>> class = \"Computer Science 101\"\nSyntaxError: invalid syntax\n```\n\n`76trombones`是不合法的，因为他没有使用字母开头。`more$`是不合法的，因为它里面包含了一个不合法的美元符号`$`。但是`class`这个变量名哪里错了呢？\n\n这其实是因为`class`是Python语言定义的**关键字**之一。关键字定义了编程语言的语法规则和结构，他们不能被当做变量名使用。\n\n___Python 关键字___\n\n**Python2.7**\n![](/media/14649509422800.jpg)\n\n**Python3.5**\n![](/media/14649508833981.jpg)\n\n## 语句\n一个**语句**就是一条Python解释器能够执行的指令。我们现在看到了两种语句：print和赋值语句。\n\n当你在命令行中输入一个语句，Python会执行并且把结果显示出来（如果有结果的话）。print语句的结果是一个值，赋值语句不会产生结果。\n\n一个脚本通常包含一序列的语句，如果有多于一个的语句的话，结果会按照脚本中语句执行的顺序来显示，例如脚本：\n\n\n```Python\nprint 1\nx = 2\nprint x\n```\n\n会产生输出：\n\n```Python\n1\n2\n```\n\n## 表达式求值\n一个表达式是值，变量，运算符的组合。如果你在命令行中输入一个表达式，解释器会计算并且把表达式的结果显示出来：\n\n```Python\n>>> 1 + 1\n2\n```\n表达式的求值会产生一个值，这也是为什么表达式可以放在赋值语句的右边。单独的一个值本身也是一个简单的表达式，一个变量也是一个表达式\n\n```Python\n>>> 17\n17\n>>> x\n2\n```\n但是计算一个表达式和打印一个值并不是同样的事情，例如：\n\n```Python\n>>> message = \"What's up, Doc?\"\n>>> message\n\"What's up, Doc?\"\n>>> print message\nWhat's up, Doc?\n```\n\n## 操作数和操作符\n\n**操作符**是特别的符号，用来代表计算类型，比如加号和乘号。被**操作符**使用到的值，称为**操作数**。\n\n以下是一些合法的Python表达式：\n\n```Python\n20+32   hour-1   hour*60+minute   minute/60   5**2   (5+9)*(15-7)\n```\n符号`+`,`-`和`*`，以及用来进行优先级分组的小括号，在Python中和数学中有着相同的用法。`*`是乘法的符号，`**`是幂次运算的符号：\n\n```Python\n>>> 2 ** 3\n8\n>>> 3 ** 2\n9\n```\n在Python3中，除法符号`/`总是会按照浮点数的除法运算方法进行计算（在Python2.7中是整除的意思）。当我们想要使用整除的时候，可以使用`//`，也被叫做**向下取整除法**。\n\n\n```Python\n>>> 7 / 4\n1.75\n>>> 7 // 4\n1\n>>> minutes = 645\n>>> hours = minutes // 60\n>>> hours\n10\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n***\n\n# 参考代码\n* [My Github](https://github.com/guojiex/leetcodeThing/tree/master/pythonExercise)\n\n# 参考文献\n* [How to Think Like a Computer Scientist: Learning with Python 2nd Edition](http://openbookproject.net/thinkcs/python/english2e/ch02.html)\n* [How to Think Like a Computer Scientist: Learning with Python 3](http://openbookproject.net/thinkcs/python/english3e/variables_expressions_statements.html)\n\n\n\n","source":"_posts/如何像数据科学家那样思考第一章-程序之路.md","raw":"---\ntitle: 如何像计算机科学家那样思考Python篇（第一、二章）\ndate: 2016-05-31 18:41:39\ndescription: 本文是对《如何像计算机科学家那样思考》此书的翻译，主要是对代码的记录，并不是对全书的全面翻译。\ncategories: python从零单排\ntags:\n- Python\n---\n\n这篇博客主要是《[如何像计算机科学家那样思考](http://openbookproject.net/thinkcs/Python/english2e/index.html)》此书的翻译，主要是对代码的记录，并不是对全书的全面翻译。\n\n# 程序之路\n## 第一个程序\n这个程序只是简单地在屏幕上显示一段文字\n**Python2.7**\n\n```Python\nprint \"Hello, World!\"\n```\n输出结果：\n\n```Python\nHello, World!\n```\n**Python3.5**\n\nPython3.5改变了print的语法，如果直接使用2.7的语法会报错\n\n```\n>>> print \"Hello world\"\n  File \"<stdin>\", line 1\n    print \"Hello world\"\n                      ^\nSyntaxError: Missing parentheses in call to 'print'\n```\n***正确的写法***\n\n```Python\nprint(\"Hello, World!\")\n```\n输出结果：\n\n```\nHello, World!\n```\n\n# 变量，表达式和语句\n## 值和数据类型\n值是最基础的事物之一***（比如一个字母或者数字）***，也是程序所操作和控制的基础事物。\n\n我们看到过的值有`2`和`\"Hello, World!\"`，它们属于不同的数据类型`2`是整数类型，`\"Hello, World!\"`是字符串类型（因为它是由一串字符组成的）。你和编译器都知道这是字符串，因为他被两个双引号包围。\n\n如果你不清楚一个值的类型是什么，那么可以使用下面的代码来得到值的类型\n\n**Python2.7**\n\n```Python\n>>> type(\"Hello, World!\")\n<type 'str'>\n>>> type(17)\n<type 'int'>\n```\n**Python3.5**\n\n```Python\n>>> type(\"Hello, World!\")\n<class 'str'>\n>>> type(17)\n<class 'int'>\n```\n***\n\n显而易见的，字符串属于类型***str***，整数属于类型***int***。不过带有小数点的数字属于类型***float***\n\n**Python2.7**\n\n```Python\n>>> type(3.2)\n<type 'float'>\n```\n**Python3.5**\n\n```Python\n>>> type(3.2)\n<class 'float'>\n```\n***\nPython中的字符串可以用单引号包括或者用双引号包括。如果最外面用双引号代表字符串，那么字符串里面可以包含单引号，比如`\"Bruce's beard`。同样的，如果最外面使用单引号代表字符串，里面可以包含双引号，比如`'The knights who say \"Ni!\"'`。\n\n此外还有使用三个单引号进行包含的字符串，例如：\n\n\n```Python\n>>> print('''\"Oh no\", she exclaimed, \"Ben's bike is broken!\"''')\n\"Oh no\", she exclaimed, \"Ben's bike is broken!\"\n>>>\n```\n***\n另外，平时针对大整数的使用逗号分割的写法在Python中是不识别的（虽然不会有语法错误），例如：\n\n**Python2.7**\n\n```Python\n>>> print 1,000,000\n1 0 0\n```\n\n**Python3.5**\n\n```Python\n>>> print(42,000)\n42 0\n>>>\n```\n\n## 变量\n编程语言其中一个重要的特性就是操作控制**变量**的能力。\n\n**赋值语句**可以产生新的变量并且赋给他们值：\n\n```Python\n>>> message = \"What's up, Doc?\"\n>>> n = 17\n>>> pi = 3.14159\n```\n上面这个例子给出了三个句子。第一个把字符串`\"What's up, Doc?\"`赋值给一个叫做`message`的新变量。第二个语句把整数`17`赋值给`n`，第三个语句把浮点数`3.14159`赋给`pi`。\n\n这里注意，赋值运算符**=**，并不是我们平时数学意义上的等号（哪怕他们是同样的符号）。赋值运算符把等号左边称为**变量名字**，右边是想要付给这个变量的**值**，这就是为什么你输入以下代码会报错：\n\n\n```Python\n>>> 17 = n\nFile \"<interactive input>\", line 1\nSyntaxError: can't assign to literal\n```\n\n## 变量名和关键字（保留字）\n通常来说，程序员会为他们的变量选择恰当的名字——他们会记录下这个变量的用途。\n\n**变量名**可以很长。其中可以包含字母和数字，但是必须以字母开头。尽管使用大写字母是合法的，但是传统上我们不会这样做。变量名是大小写敏感的：`Bruce`和`bruce`是不同的变量。\n\n下划线字符（_）是可以使用在变量名中的，它经常被用于变量名中用于切分多个单词的情况，比如说`my_name`或者`price_of_tea_in_china`。\n\n如果你使用了不合法的变量名，Python会报错：\n\n\n```Python\n>>> 76trombones = \"big parade\"\nSyntaxError: invalid syntax\n>>> more$ = 1000000\nSyntaxError: invalid syntax\n>>> class = \"Computer Science 101\"\nSyntaxError: invalid syntax\n```\n\n`76trombones`是不合法的，因为他没有使用字母开头。`more$`是不合法的，因为它里面包含了一个不合法的美元符号`$`。但是`class`这个变量名哪里错了呢？\n\n这其实是因为`class`是Python语言定义的**关键字**之一。关键字定义了编程语言的语法规则和结构，他们不能被当做变量名使用。\n\n___Python 关键字___\n\n**Python2.7**\n![](/media/14649509422800.jpg)\n\n**Python3.5**\n![](/media/14649508833981.jpg)\n\n## 语句\n一个**语句**就是一条Python解释器能够执行的指令。我们现在看到了两种语句：print和赋值语句。\n\n当你在命令行中输入一个语句，Python会执行并且把结果显示出来（如果有结果的话）。print语句的结果是一个值，赋值语句不会产生结果。\n\n一个脚本通常包含一序列的语句，如果有多于一个的语句的话，结果会按照脚本中语句执行的顺序来显示，例如脚本：\n\n\n```Python\nprint 1\nx = 2\nprint x\n```\n\n会产生输出：\n\n```Python\n1\n2\n```\n\n## 表达式求值\n一个表达式是值，变量，运算符的组合。如果你在命令行中输入一个表达式，解释器会计算并且把表达式的结果显示出来：\n\n```Python\n>>> 1 + 1\n2\n```\n表达式的求值会产生一个值，这也是为什么表达式可以放在赋值语句的右边。单独的一个值本身也是一个简单的表达式，一个变量也是一个表达式\n\n```Python\n>>> 17\n17\n>>> x\n2\n```\n但是计算一个表达式和打印一个值并不是同样的事情，例如：\n\n```Python\n>>> message = \"What's up, Doc?\"\n>>> message\n\"What's up, Doc?\"\n>>> print message\nWhat's up, Doc?\n```\n\n## 操作数和操作符\n\n**操作符**是特别的符号，用来代表计算类型，比如加号和乘号。被**操作符**使用到的值，称为**操作数**。\n\n以下是一些合法的Python表达式：\n\n```Python\n20+32   hour-1   hour*60+minute   minute/60   5**2   (5+9)*(15-7)\n```\n符号`+`,`-`和`*`，以及用来进行优先级分组的小括号，在Python中和数学中有着相同的用法。`*`是乘法的符号，`**`是幂次运算的符号：\n\n```Python\n>>> 2 ** 3\n8\n>>> 3 ** 2\n9\n```\n在Python3中，除法符号`/`总是会按照浮点数的除法运算方法进行计算（在Python2.7中是整除的意思）。当我们想要使用整除的时候，可以使用`//`，也被叫做**向下取整除法**。\n\n\n```Python\n>>> 7 / 4\n1.75\n>>> 7 // 4\n1\n>>> minutes = 645\n>>> hours = minutes // 60\n>>> hours\n10\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n***\n\n# 参考代码\n* [My Github](https://github.com/guojiex/leetcodeThing/tree/master/pythonExercise)\n\n# 参考文献\n* [How to Think Like a Computer Scientist: Learning with Python 2nd Edition](http://openbookproject.net/thinkcs/python/english2e/ch02.html)\n* [How to Think Like a Computer Scientist: Learning with Python 3](http://openbookproject.net/thinkcs/python/english3e/variables_expressions_statements.html)\n\n\n\n","slug":"如何像数据科学家那样思考第一章-程序之路","published":1,"updated":"2016-06-17T10:33:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdfa000wnpu2k9yv82k6","content":"<p>这篇博客主要是《<a href=\"http://openbookproject.net/thinkcs/Python/english2e/index.html\" target=\"_blank\" rel=\"external\">如何像计算机科学家那样思考</a>》此书的翻译，主要是对代码的记录，并不是对全书的全面翻译。</p>\n<h1 id=\"程序之路\"><a href=\"#程序之路\" class=\"headerlink\" title=\"程序之路\"></a>程序之路</h1><h2 id=\"第一个程序\"><a href=\"#第一个程序\" class=\"headerlink\" title=\"第一个程序\"></a>第一个程序</h2><p>这个程序只是简单地在屏幕上显示一段文字<br><strong>Python2.7</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Hello, World!\"</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure>\n<p><strong>Python3.5</strong></p>\n<p>Python3.5改变了print的语法，如果直接使用2.7的语法会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; print &quot;Hello world&quot;</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class=\"line\">    print &quot;Hello world&quot;</span><br><span class=\"line\">                      ^</span><br><span class=\"line\">SyntaxError: Missing parentheses in call to &apos;print&apos;</span><br></pre></td></tr></table></figure>\n<p><strong><em>正确的写法</em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"Hello, World!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure>\n<h1 id=\"变量，表达式和语句\"><a href=\"#变量，表达式和语句\" class=\"headerlink\" title=\"变量，表达式和语句\"></a>变量，表达式和语句</h1><h2 id=\"值和数据类型\"><a href=\"#值和数据类型\" class=\"headerlink\" title=\"值和数据类型\"></a>值和数据类型</h2><p>值是最基础的事物之一<strong><em>（比如一个字母或者数字）</em></strong>，也是程序所操作和控制的基础事物。</p>\n<p>我们看到过的值有<code>2</code>和<code>&quot;Hello, World!&quot;</code>，它们属于不同的数据类型<code>2</code>是整数类型，<code>&quot;Hello, World!&quot;</code>是字符串类型（因为它是由一串字符组成的）。你和编译器都知道这是字符串，因为他被两个双引号包围。</p>\n<p>如果你不清楚一个值的类型是什么，那么可以使用下面的代码来得到值的类型</p>\n<p><strong>Python2.7</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">&lt;type <span class=\"string\">'str'</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"number\">17</span>)</span><br><span class=\"line\">&lt;type <span class=\"string\">'int'</span>&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>Python3.5</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; type(\"Hello, World!\")</span><br><span class=\"line\">&lt;class 'str'&gt;</span><br><span class=\"line\">&gt;&gt;&gt; type(17)</span><br><span class=\"line\">&lt;class 'int'&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>显而易见的，字符串属于类型<strong><em>str</em></strong>，整数属于类型<strong><em>int</em></strong>。不过带有小数点的数字属于类型<strong><em>float</em></strong></p>\n<p><strong>Python2.7</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"number\">3.2</span>)</span><br><span class=\"line\">&lt;type <span class=\"string\">'float'</span>&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>Python3.5</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"number\">3.2</span>)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Python中的字符串可以用单引号包括或者用双引号包括。如果最外面用双引号代表字符串，那么字符串里面可以包含单引号，比如<code>&quot;Bruce&#39;s beard</code>。同样的，如果最外面使用单引号代表字符串，里面可以包含双引号，比如<code>&#39;The knights who say &quot;Ni!&quot;&#39;</code>。</p>\n<p>此外还有使用三个单引号进行包含的字符串，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'''\"Oh no\", she exclaimed, \"Ben's bike is broken!\"'''</span>)</span><br><span class=\"line\"><span class=\"string\">\"Oh no\"</span>, she exclaimed, <span class=\"string\">\"Ben's bike is broken!\"</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>另外，平时针对大整数的使用逗号分割的写法在Python中是不识别的（虽然不会有语法错误），例如：</p>\n<p><strong>Python2.7</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"number\">1</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p><strong>Python3.5</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">42</span>,<span class=\"number\">000</span>)</span><br><span class=\"line\"><span class=\"number\">42</span> <span class=\"number\">0</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>编程语言其中一个重要的特性就是操作控制<strong>变量</strong>的能力。</p>\n<p><strong>赋值语句</strong>可以产生新的变量并且赋给他们值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">\"What's up, Doc?\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pi = <span class=\"number\">3.14159</span></span><br></pre></td></tr></table></figure>\n<p>上面这个例子给出了三个句子。第一个把字符串<code>&quot;What&#39;s up, Doc?&quot;</code>赋值给一个叫做<code>message</code>的新变量。第二个语句把整数<code>17</code>赋值给<code>n</code>，第三个语句把浮点数<code>3.14159</code>赋给<code>pi</code>。</p>\n<p>这里注意，赋值运算符<strong>=</strong>，并不是我们平时数学意义上的等号（哪怕他们是同样的符号）。赋值运算符把等号左边称为<strong>变量名字</strong>，右边是想要付给这个变量的<strong>值</strong>，这就是为什么你输入以下代码会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span> = n</span><br><span class=\"line\">File <span class=\"string\">\"&lt;interactive input&gt;\"</span>, line <span class=\"number\">1</span></span><br><span class=\"line\">SyntaxError: can<span class=\"string\">'t assign to literal</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"变量名和关键字（保留字）\"><a href=\"#变量名和关键字（保留字）\" class=\"headerlink\" title=\"变量名和关键字（保留字）\"></a>变量名和关键字（保留字）</h2><p>通常来说，程序员会为他们的变量选择恰当的名字——他们会记录下这个变量的用途。</p>\n<p><strong>变量名</strong>可以很长。其中可以包含字母和数字，但是必须以字母开头。尽管使用大写字母是合法的，但是传统上我们不会这样做。变量名是大小写敏感的：<code>Bruce</code>和<code>bruce</code>是不同的变量。</p>\n<p>下划线字符（_）是可以使用在变量名中的，它经常被用于变量名中用于切分多个单词的情况，比如说<code>my_name</code>或者<code>price_of_tea_in_china</code>。</p>\n<p>如果你使用了不合法的变量名，Python会报错：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 76trombones = \"big parade\"</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br><span class=\"line\">&gt;&gt;&gt; more$ = 1000000</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br><span class=\"line\">&gt;&gt;&gt; class = \"Computer Science 101\"</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n<p><code>76trombones</code>是不合法的，因为他没有使用字母开头。<code>more$</code>是不合法的，因为它里面包含了一个不合法的美元符号<code>$</code>。但是<code>class</code>这个变量名哪里错了呢？</p>\n<p>这其实是因为<code>class</code>是Python语言定义的<strong>关键字</strong>之一。关键字定义了编程语言的语法规则和结构，他们不能被当做变量名使用。</p>\n<p><strong><em>Python 关键字</em></strong></p>\n<p><strong>Python2.7</strong><br><img src=\"/media/14649509422800.jpg\" alt=\"\"></p>\n<p><strong>Python3.5</strong><br><img src=\"/media/14649508833981.jpg\" alt=\"\"></p>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><p>一个<strong>语句</strong>就是一条Python解释器能够执行的指令。我们现在看到了两种语句：print和赋值语句。</p>\n<p>当你在命令行中输入一个语句，Python会执行并且把结果显示出来（如果有结果的话）。print语句的结果是一个值，赋值语句不会产生结果。</p>\n<p>一个脚本通常包含一序列的语句，如果有多于一个的语句的话，结果会按照脚本中语句执行的顺序来显示，例如脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"number\">1</span></span><br><span class=\"line\">x = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> x</span><br></pre></td></tr></table></figure>\n<p>会产生输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"表达式求值\"><a href=\"#表达式求值\" class=\"headerlink\" title=\"表达式求值\"></a>表达式求值</h2><p>一个表达式是值，变量，运算符的组合。如果你在命令行中输入一个表达式，解释器会计算并且把表达式的结果显示出来：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>表达式的求值会产生一个值，这也是为什么表达式可以放在赋值语句的右边。单独的一个值本身也是一个简单的表达式，一个变量也是一个表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>但是计算一个表达式和打印一个值并不是同样的事情，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">\"What's up, Doc?\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message</span><br><span class=\"line\"><span class=\"string\">\"What's up, Doc?\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> message</span><br><span class=\"line\">What<span class=\"string\">'s up, Doc?</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"操作数和操作符\"><a href=\"#操作数和操作符\" class=\"headerlink\" title=\"操作数和操作符\"></a>操作数和操作符</h2><p><strong>操作符</strong>是特别的符号，用来代表计算类型，比如加号和乘号。被<strong>操作符</strong>使用到的值，称为<strong>操作数</strong>。</p>\n<p>以下是一些合法的Python表达式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">20</span>+<span class=\"number\">32</span>   hour<span class=\"number\">-1</span>   hour*<span class=\"number\">60</span>+minute   minute/<span class=\"number\">60</span>   <span class=\"number\">5</span>**<span class=\"number\">2</span>   (<span class=\"number\">5</span>+<span class=\"number\">9</span>)*(<span class=\"number\">15</span><span class=\"number\">-7</span>)</span><br></pre></td></tr></table></figure>\n<p>符号<code>+</code>,<code>-</code>和<code>*</code>，以及用来进行优先级分组的小括号，在Python中和数学中有着相同的用法。<code>*</code>是乘法的符号，<code>**</code>是幂次运算的符号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<p>在Python3中，除法符号<code>/</code>总是会按照浮点数的除法运算方法进行计算（在Python2.7中是整除的意思）。当我们想要使用整除的时候，可以使用<code>//</code>，也被叫做<strong>向下取整除法</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span> / <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1.75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span> // <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>minutes = <span class=\"number\">645</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hours = minutes // <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hours</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h1><ul>\n<li><a href=\"https://github.com/guojiex/leetcodeThing/tree/master/pythonExercise\" target=\"_blank\" rel=\"external\">My Github</a></li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english2e/ch02.html\" target=\"_blank\" rel=\"external\">How to Think Like a Computer Scientist: Learning with Python 2nd Edition</a></li>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english3e/variables_expressions_statements.html\" target=\"_blank\" rel=\"external\">How to Think Like a Computer Scientist: Learning with Python 3</a></li>\n</ul>\n","excerpt":"","more":"<p>这篇博客主要是《<a href=\"http://openbookproject.net/thinkcs/Python/english2e/index.html\">如何像计算机科学家那样思考</a>》此书的翻译，主要是对代码的记录，并不是对全书的全面翻译。</p>\n<h1 id=\"程序之路\"><a href=\"#程序之路\" class=\"headerlink\" title=\"程序之路\"></a>程序之路</h1><h2 id=\"第一个程序\"><a href=\"#第一个程序\" class=\"headerlink\" title=\"第一个程序\"></a>第一个程序</h2><p>这个程序只是简单地在屏幕上显示一段文字<br><strong>Python2.7</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Hello, World!\"</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure>\n<p><strong>Python3.5</strong></p>\n<p>Python3.5改变了print的语法，如果直接使用2.7的语法会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; print &quot;Hello world&quot;</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class=\"line\">    print &quot;Hello world&quot;</span><br><span class=\"line\">                      ^</span><br><span class=\"line\">SyntaxError: Missing parentheses in call to &apos;print&apos;</span><br></pre></td></tr></table></figure>\n<p><strong><em>正确的写法</em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"Hello, World!\"</span>)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello, World!</span><br></pre></td></tr></table></figure>\n<h1 id=\"变量，表达式和语句\"><a href=\"#变量，表达式和语句\" class=\"headerlink\" title=\"变量，表达式和语句\"></a>变量，表达式和语句</h1><h2 id=\"值和数据类型\"><a href=\"#值和数据类型\" class=\"headerlink\" title=\"值和数据类型\"></a>值和数据类型</h2><p>值是最基础的事物之一<strong><em>（比如一个字母或者数字）</em></strong>，也是程序所操作和控制的基础事物。</p>\n<p>我们看到过的值有<code>2</code>和<code>&quot;Hello, World!&quot;</code>，它们属于不同的数据类型<code>2</code>是整数类型，<code>&quot;Hello, World!&quot;</code>是字符串类型（因为它是由一串字符组成的）。你和编译器都知道这是字符串，因为他被两个双引号包围。</p>\n<p>如果你不清楚一个值的类型是什么，那么可以使用下面的代码来得到值的类型</p>\n<p><strong>Python2.7</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">&lt;type <span class=\"string\">'str'</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"number\">17</span>)</span><br><span class=\"line\">&lt;type <span class=\"string\">'int'</span>&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>Python3.5</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; type(\"Hello, World!\")</span><br><span class=\"line\">&lt;class 'str'&gt;</span><br><span class=\"line\">&gt;&gt;&gt; type(17)</span><br><span class=\"line\">&lt;class 'int'&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>显而易见的，字符串属于类型<strong><em>str</em></strong>，整数属于类型<strong><em>int</em></strong>。不过带有小数点的数字属于类型<strong><em>float</em></strong></p>\n<p><strong>Python2.7</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"number\">3.2</span>)</span><br><span class=\"line\">&lt;type <span class=\"string\">'float'</span>&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>Python3.5</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(<span class=\"number\">3.2</span>)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>Python中的字符串可以用单引号包括或者用双引号包括。如果最外面用双引号代表字符串，那么字符串里面可以包含单引号，比如<code>&quot;Bruce&#39;s beard</code>。同样的，如果最外面使用单引号代表字符串，里面可以包含双引号，比如<code>&#39;The knights who say &quot;Ni!&quot;&#39;</code>。</p>\n<p>此外还有使用三个单引号进行包含的字符串，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'''\"Oh no\", she exclaimed, \"Ben's bike is broken!\"'''</span>)</span><br><span class=\"line\"><span class=\"string\">\"Oh no\"</span>, she exclaimed, <span class=\"string\">\"Ben's bike is broken!\"</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>另外，平时针对大整数的使用逗号分割的写法在Python中是不识别的（虽然不会有语法错误），例如：</p>\n<p><strong>Python2.7</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"number\">1</span>,<span class=\"number\">000</span>,<span class=\"number\">000</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p><strong>Python3.5</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">42</span>,<span class=\"number\">000</span>)</span><br><span class=\"line\"><span class=\"number\">42</span> <span class=\"number\">0</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>编程语言其中一个重要的特性就是操作控制<strong>变量</strong>的能力。</p>\n<p><strong>赋值语句</strong>可以产生新的变量并且赋给他们值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">\"What's up, Doc?\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n = <span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pi = <span class=\"number\">3.14159</span></span><br></pre></td></tr></table></figure>\n<p>上面这个例子给出了三个句子。第一个把字符串<code>&quot;What&#39;s up, Doc?&quot;</code>赋值给一个叫做<code>message</code>的新变量。第二个语句把整数<code>17</code>赋值给<code>n</code>，第三个语句把浮点数<code>3.14159</code>赋给<code>pi</code>。</p>\n<p>这里注意，赋值运算符<strong>=</strong>，并不是我们平时数学意义上的等号（哪怕他们是同样的符号）。赋值运算符把等号左边称为<strong>变量名字</strong>，右边是想要付给这个变量的<strong>值</strong>，这就是为什么你输入以下代码会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span> = n</span><br><span class=\"line\">File <span class=\"string\">\"&lt;interactive input&gt;\"</span>, line <span class=\"number\">1</span></span><br><span class=\"line\">SyntaxError: can<span class=\"string\">'t assign to literal</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"变量名和关键字（保留字）\"><a href=\"#变量名和关键字（保留字）\" class=\"headerlink\" title=\"变量名和关键字（保留字）\"></a>变量名和关键字（保留字）</h2><p>通常来说，程序员会为他们的变量选择恰当的名字——他们会记录下这个变量的用途。</p>\n<p><strong>变量名</strong>可以很长。其中可以包含字母和数字，但是必须以字母开头。尽管使用大写字母是合法的，但是传统上我们不会这样做。变量名是大小写敏感的：<code>Bruce</code>和<code>bruce</code>是不同的变量。</p>\n<p>下划线字符（_）是可以使用在变量名中的，它经常被用于变量名中用于切分多个单词的情况，比如说<code>my_name</code>或者<code>price_of_tea_in_china</code>。</p>\n<p>如果你使用了不合法的变量名，Python会报错：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 76trombones = \"big parade\"</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br><span class=\"line\">&gt;&gt;&gt; more$ = 1000000</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br><span class=\"line\">&gt;&gt;&gt; class = \"Computer Science 101\"</span><br><span class=\"line\">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>\n<p><code>76trombones</code>是不合法的，因为他没有使用字母开头。<code>more$</code>是不合法的，因为它里面包含了一个不合法的美元符号<code>$</code>。但是<code>class</code>这个变量名哪里错了呢？</p>\n<p>这其实是因为<code>class</code>是Python语言定义的<strong>关键字</strong>之一。关键字定义了编程语言的语法规则和结构，他们不能被当做变量名使用。</p>\n<p><strong><em>Python 关键字</em></strong></p>\n<p><strong>Python2.7</strong><br><img src=\"/media/14649509422800.jpg\" alt=\"\"></p>\n<p><strong>Python3.5</strong><br><img src=\"/media/14649508833981.jpg\" alt=\"\"></p>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><p>一个<strong>语句</strong>就是一条Python解释器能够执行的指令。我们现在看到了两种语句：print和赋值语句。</p>\n<p>当你在命令行中输入一个语句，Python会执行并且把结果显示出来（如果有结果的话）。print语句的结果是一个值，赋值语句不会产生结果。</p>\n<p>一个脚本通常包含一序列的语句，如果有多于一个的语句的话，结果会按照脚本中语句执行的顺序来显示，例如脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"number\">1</span></span><br><span class=\"line\">x = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> x</span><br></pre></td></tr></table></figure>\n<p>会产生输出：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"表达式求值\"><a href=\"#表达式求值\" class=\"headerlink\" title=\"表达式求值\"></a>表达式求值</h2><p>一个表达式是值，变量，运算符的组合。如果你在命令行中输入一个表达式，解释器会计算并且把表达式的结果显示出来：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>表达式的求值会产生一个值，这也是为什么表达式可以放在赋值语句的右边。单独的一个值本身也是一个简单的表达式，一个变量也是一个表达式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>但是计算一个表达式和打印一个值并不是同样的事情，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">\"What's up, Doc?\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message</span><br><span class=\"line\"><span class=\"string\">\"What's up, Doc?\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> message</span><br><span class=\"line\">What<span class=\"string\">'s up, Doc?</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"操作数和操作符\"><a href=\"#操作数和操作符\" class=\"headerlink\" title=\"操作数和操作符\"></a>操作数和操作符</h2><p><strong>操作符</strong>是特别的符号，用来代表计算类型，比如加号和乘号。被<strong>操作符</strong>使用到的值，称为<strong>操作数</strong>。</p>\n<p>以下是一些合法的Python表达式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">20</span>+<span class=\"number\">32</span>   hour<span class=\"number\">-1</span>   hour*<span class=\"number\">60</span>+minute   minute/<span class=\"number\">60</span>   <span class=\"number\">5</span>**<span class=\"number\">2</span>   (<span class=\"number\">5</span>+<span class=\"number\">9</span>)*(<span class=\"number\">15</span><span class=\"number\">-7</span>)</span><br></pre></td></tr></table></figure>\n<p>符号<code>+</code>,<code>-</code>和<code>*</code>，以及用来进行优先级分组的小括号，在Python中和数学中有着相同的用法。<code>*</code>是乘法的符号，<code>**</code>是幂次运算的符号：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<p>在Python3中，除法符号<code>/</code>总是会按照浮点数的除法运算方法进行计算（在Python2.7中是整除的意思）。当我们想要使用整除的时候，可以使用<code>//</code>，也被叫做<strong>向下取整除法</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span> / <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1.75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">7</span> // <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>minutes = <span class=\"number\">645</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hours = minutes // <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hours</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h1><ul>\n<li><a href=\"https://github.com/guojiex/leetcodeThing/tree/master/pythonExercise\">My Github</a></li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english2e/ch02.html\">How to Think Like a Computer Scientist: Learning with Python 2nd Edition</a></li>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english3e/variables_expressions_statements.html\">How to Think Like a Computer Scientist: Learning with Python 3</a></li>\n</ul>\n"},{"title":"如何像计算机科学家那样思考Python篇（第三章番外）","date":"2016-06-07T21:18:39.000Z","description":"第三章番外：你好小乌龟！","_content":"# 你好，小乌龟！\n\n在Python中有很多强大的预置模块，我们可以把他们运用到自己的程序中去。他们中的一些可以发送邮件，或者抓取网页。这章中我们将要见到的模块，允许我们创建一只乌龟（？）并且使用它来绘图。\n\n小乌龟很萌，但是这一章的目标是教我们更多关于Python的知识，以及发展属于我们自己的计算思考的方向，或者如何像一个计算机科学家那样思考。本章中用到的Python语句，会在后面的章节进行更深入的讲解。\n\n# 我们的第一个乌龟程序\n让我们写一小段Python程序来创建一个新的小乌龟，并且用它来画一个矩形（我们会把代表我们第一个乌龟的变量`alex`，但是我们可以依据[上一章](/2016/06/01/如何像数据科学家那样思考第一章-程序之路)的命名规则把名字改成别的）。\n\n***以下代码只能在Python3中运行***\n\n```Python\nimport turtle             # 导入模块，让我们可以使用turtle模块\nwn = turtle.Screen()      # 创建一个窗口用以显示乌龟\nalex = turtle.Turtle()    # 创建一个乌龟，赋值给alex\n\nalex.forward(50)          # 让 alex 前进 50 个单位\nalex.left(90)             # 告诉 alex 向左转 90 度\nalex.forward(30)          # 前进30个单位，完成矩形的一个直角\n\nwn.mainloop()             # 等待用户关闭窗口\n```\n当我们使用命令运行程序的时候：\n\n```bash\n# 比如上面的代码放在当前目录叫做ex3_turtle.py的文件中，在命令行中输入以下命令\npython3 ex3_turtle.py\n```\n然后我们会看到一个窗口：\n![](/media/14652928631774.jpg)\n下面我们将会深入理解这个程序\n\n第一行`import turtle`告诉Python载入一个叫做`turtle`的模块。这个模块带给我们两种可以使用的新类型`Turtle`和`Screen`。点标志`turtle.Turtle`意思是说“被定义在turtle模块中的Turtle类型”（记住Python是大小写敏感的，所以模块名字使用的是小写t开头，和类型`Turtle`是不同的）。\n\n然后我们创建并且打开一个叫做screen（或者称为窗口window），并且我们把它赋值给变量`wn`。每一个窗口screen都包含一个`画布canvas`，这是一个在窗口中，可以用来绘制的区域。\n\n第三行中我们创建了一个乌龟。变量`alex`就指代这只乌龟。\n\n\n\n\n\n\n***\n\n# 参考代码\n* [My Github](https://github.com/guojiex/leetcodeThing/tree/master/pythonExercise)\n\n# 参考文献\n* [How to Think Like a Computer Scientist: Learning with Python 2nd Edition](http://openbookproject.net/thinkcs/python/english2e/ch03.html)\n* [How to Think Like a Computer Scientist: Learning with Python 3](http://openbookproject.net/thinkcs/python/english3e/hello_little_turtles.html)\n\n\n\n\n","source":"_posts/如何像计算机科学家那样思考Python篇（第三章番外）.md","raw":"---\ntitle: 如何像计算机科学家那样思考Python篇（第三章番外）\ndate: 2016-06-07 17:18:39\ndescription: 第三章番外：你好小乌龟！\ncategories: python从零单排\ntags:\n- Python\n---\n# 你好，小乌龟！\n\n在Python中有很多强大的预置模块，我们可以把他们运用到自己的程序中去。他们中的一些可以发送邮件，或者抓取网页。这章中我们将要见到的模块，允许我们创建一只乌龟（？）并且使用它来绘图。\n\n小乌龟很萌，但是这一章的目标是教我们更多关于Python的知识，以及发展属于我们自己的计算思考的方向，或者如何像一个计算机科学家那样思考。本章中用到的Python语句，会在后面的章节进行更深入的讲解。\n\n# 我们的第一个乌龟程序\n让我们写一小段Python程序来创建一个新的小乌龟，并且用它来画一个矩形（我们会把代表我们第一个乌龟的变量`alex`，但是我们可以依据[上一章](/2016/06/01/如何像数据科学家那样思考第一章-程序之路)的命名规则把名字改成别的）。\n\n***以下代码只能在Python3中运行***\n\n```Python\nimport turtle             # 导入模块，让我们可以使用turtle模块\nwn = turtle.Screen()      # 创建一个窗口用以显示乌龟\nalex = turtle.Turtle()    # 创建一个乌龟，赋值给alex\n\nalex.forward(50)          # 让 alex 前进 50 个单位\nalex.left(90)             # 告诉 alex 向左转 90 度\nalex.forward(30)          # 前进30个单位，完成矩形的一个直角\n\nwn.mainloop()             # 等待用户关闭窗口\n```\n当我们使用命令运行程序的时候：\n\n```bash\n# 比如上面的代码放在当前目录叫做ex3_turtle.py的文件中，在命令行中输入以下命令\npython3 ex3_turtle.py\n```\n然后我们会看到一个窗口：\n![](/media/14652928631774.jpg)\n下面我们将会深入理解这个程序\n\n第一行`import turtle`告诉Python载入一个叫做`turtle`的模块。这个模块带给我们两种可以使用的新类型`Turtle`和`Screen`。点标志`turtle.Turtle`意思是说“被定义在turtle模块中的Turtle类型”（记住Python是大小写敏感的，所以模块名字使用的是小写t开头，和类型`Turtle`是不同的）。\n\n然后我们创建并且打开一个叫做screen（或者称为窗口window），并且我们把它赋值给变量`wn`。每一个窗口screen都包含一个`画布canvas`，这是一个在窗口中，可以用来绘制的区域。\n\n第三行中我们创建了一个乌龟。变量`alex`就指代这只乌龟。\n\n\n\n\n\n\n***\n\n# 参考代码\n* [My Github](https://github.com/guojiex/leetcodeThing/tree/master/pythonExercise)\n\n# 参考文献\n* [How to Think Like a Computer Scientist: Learning with Python 2nd Edition](http://openbookproject.net/thinkcs/python/english2e/ch03.html)\n* [How to Think Like a Computer Scientist: Learning with Python 3](http://openbookproject.net/thinkcs/python/english3e/hello_little_turtles.html)\n\n\n\n\n","slug":"如何像计算机科学家那样思考Python篇（第三章番外）","published":1,"updated":"2016-06-17T10:38:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdfd000ynpu2f10lqpn9","content":"<h1 id=\"你好，小乌龟！\"><a href=\"#你好，小乌龟！\" class=\"headerlink\" title=\"你好，小乌龟！\"></a>你好，小乌龟！</h1><p>在Python中有很多强大的预置模块，我们可以把他们运用到自己的程序中去。他们中的一些可以发送邮件，或者抓取网页。这章中我们将要见到的模块，允许我们创建一只乌龟（？）并且使用它来绘图。</p>\n<p>小乌龟很萌，但是这一章的目标是教我们更多关于Python的知识，以及发展属于我们自己的计算思考的方向，或者如何像一个计算机科学家那样思考。本章中用到的Python语句，会在后面的章节进行更深入的讲解。</p>\n<h1 id=\"我们的第一个乌龟程序\"><a href=\"#我们的第一个乌龟程序\" class=\"headerlink\" title=\"我们的第一个乌龟程序\"></a>我们的第一个乌龟程序</h1><p>让我们写一小段Python程序来创建一个新的小乌龟，并且用它来画一个矩形（我们会把代表我们第一个乌龟的变量<code>alex</code>，但是我们可以依据<a href=\"/2016/06/01/如何像数据科学家那样思考第一章-程序之路\">上一章</a>的命名规则把名字改成别的）。</p>\n<p><strong><em>以下代码只能在Python3中运行</em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> turtle             <span class=\"comment\"># 导入模块，让我们可以使用turtle模块</span></span><br><span class=\"line\">wn = turtle.Screen()      <span class=\"comment\"># 创建一个窗口用以显示乌龟</span></span><br><span class=\"line\">alex = turtle.Turtle()    <span class=\"comment\"># 创建一个乌龟，赋值给alex</span></span><br><span class=\"line\"></span><br><span class=\"line\">alex.forward(<span class=\"number\">50</span>)          <span class=\"comment\"># 让 alex 前进 50 个单位</span></span><br><span class=\"line\">alex.left(<span class=\"number\">90</span>)             <span class=\"comment\"># 告诉 alex 向左转 90 度</span></span><br><span class=\"line\">alex.forward(<span class=\"number\">30</span>)          <span class=\"comment\"># 前进30个单位，完成矩形的一个直角</span></span><br><span class=\"line\"></span><br><span class=\"line\">wn.mainloop()             <span class=\"comment\"># 等待用户关闭窗口</span></span><br></pre></td></tr></table></figure>\n<p>当我们使用命令运行程序的时候：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比如上面的代码放在当前目录叫做ex3_turtle.py的文件中，在命令行中输入以下命令</span></span><br><span class=\"line\">python3 ex3_turtle.py</span><br></pre></td></tr></table></figure>\n<p>然后我们会看到一个窗口：<br><img src=\"/media/14652928631774.jpg\" alt=\"\"><br>下面我们将会深入理解这个程序</p>\n<p>第一行<code>import turtle</code>告诉Python载入一个叫做<code>turtle</code>的模块。这个模块带给我们两种可以使用的新类型<code>Turtle</code>和<code>Screen</code>。点标志<code>turtle.Turtle</code>意思是说“被定义在turtle模块中的Turtle类型”（记住Python是大小写敏感的，所以模块名字使用的是小写t开头，和类型<code>Turtle</code>是不同的）。</p>\n<p>然后我们创建并且打开一个叫做screen（或者称为窗口window），并且我们把它赋值给变量<code>wn</code>。每一个窗口screen都包含一个<code>画布canvas</code>，这是一个在窗口中，可以用来绘制的区域。</p>\n<p>第三行中我们创建了一个乌龟。变量<code>alex</code>就指代这只乌龟。</p>\n<hr>\n<h1 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h1><ul>\n<li><a href=\"https://github.com/guojiex/leetcodeThing/tree/master/pythonExercise\" target=\"_blank\" rel=\"external\">My Github</a></li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english2e/ch03.html\" target=\"_blank\" rel=\"external\">How to Think Like a Computer Scientist: Learning with Python 2nd Edition</a></li>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english3e/hello_little_turtles.html\" target=\"_blank\" rel=\"external\">How to Think Like a Computer Scientist: Learning with Python 3</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"你好，小乌龟！\"><a href=\"#你好，小乌龟！\" class=\"headerlink\" title=\"你好，小乌龟！\"></a>你好，小乌龟！</h1><p>在Python中有很多强大的预置模块，我们可以把他们运用到自己的程序中去。他们中的一些可以发送邮件，或者抓取网页。这章中我们将要见到的模块，允许我们创建一只乌龟（？）并且使用它来绘图。</p>\n<p>小乌龟很萌，但是这一章的目标是教我们更多关于Python的知识，以及发展属于我们自己的计算思考的方向，或者如何像一个计算机科学家那样思考。本章中用到的Python语句，会在后面的章节进行更深入的讲解。</p>\n<h1 id=\"我们的第一个乌龟程序\"><a href=\"#我们的第一个乌龟程序\" class=\"headerlink\" title=\"我们的第一个乌龟程序\"></a>我们的第一个乌龟程序</h1><p>让我们写一小段Python程序来创建一个新的小乌龟，并且用它来画一个矩形（我们会把代表我们第一个乌龟的变量<code>alex</code>，但是我们可以依据<a href=\"/2016/06/01/如何像数据科学家那样思考第一章-程序之路\">上一章</a>的命名规则把名字改成别的）。</p>\n<p><strong><em>以下代码只能在Python3中运行</em></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> turtle             <span class=\"comment\"># 导入模块，让我们可以使用turtle模块</span></span><br><span class=\"line\">wn = turtle.Screen()      <span class=\"comment\"># 创建一个窗口用以显示乌龟</span></span><br><span class=\"line\">alex = turtle.Turtle()    <span class=\"comment\"># 创建一个乌龟，赋值给alex</span></span><br><span class=\"line\"></span><br><span class=\"line\">alex.forward(<span class=\"number\">50</span>)          <span class=\"comment\"># 让 alex 前进 50 个单位</span></span><br><span class=\"line\">alex.left(<span class=\"number\">90</span>)             <span class=\"comment\"># 告诉 alex 向左转 90 度</span></span><br><span class=\"line\">alex.forward(<span class=\"number\">30</span>)          <span class=\"comment\"># 前进30个单位，完成矩形的一个直角</span></span><br><span class=\"line\"></span><br><span class=\"line\">wn.mainloop()             <span class=\"comment\"># 等待用户关闭窗口</span></span><br></pre></td></tr></table></figure>\n<p>当我们使用命令运行程序的时候：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比如上面的代码放在当前目录叫做ex3_turtle.py的文件中，在命令行中输入以下命令</span></span><br><span class=\"line\">python3 ex3_turtle.py</span><br></pre></td></tr></table></figure>\n<p>然后我们会看到一个窗口：<br><img src=\"/media/14652928631774.jpg\" alt=\"\"><br>下面我们将会深入理解这个程序</p>\n<p>第一行<code>import turtle</code>告诉Python载入一个叫做<code>turtle</code>的模块。这个模块带给我们两种可以使用的新类型<code>Turtle</code>和<code>Screen</code>。点标志<code>turtle.Turtle</code>意思是说“被定义在turtle模块中的Turtle类型”（记住Python是大小写敏感的，所以模块名字使用的是小写t开头，和类型<code>Turtle</code>是不同的）。</p>\n<p>然后我们创建并且打开一个叫做screen（或者称为窗口window），并且我们把它赋值给变量<code>wn</code>。每一个窗口screen都包含一个<code>画布canvas</code>，这是一个在窗口中，可以用来绘制的区域。</p>\n<p>第三行中我们创建了一个乌龟。变量<code>alex</code>就指代这只乌龟。</p>\n<hr>\n<h1 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h1><ul>\n<li><a href=\"https://github.com/guojiex/leetcodeThing/tree/master/pythonExercise\">My Github</a></li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english2e/ch03.html\">How to Think Like a Computer Scientist: Learning with Python 2nd Edition</a></li>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english3e/hello_little_turtles.html\">How to Think Like a Computer Scientist: Learning with Python 3</a></li>\n</ul>\n"},{"title":"如何像计算机科学家那样思考Python篇（第三章）","date":"2016-06-07T21:16:15.000Z","description":"第三章：函数","_content":"# 定义与使用\n在编程的时候，一个**函数**是对一序列执行某种操作的语句的称谓。这种操作会被写明在**函数声明**里面。在Python中，一个函数声明的语法长这样：\n\n\n```Python\ndef NAME( LIST OF PARAMETERS ):\n    STATEMENTS\n```\n\n函数名字（NAME）可以是任何除了Python关键字之外的你定义的名字。参数列表（LIST OF PARAMETERS）指明你的函数需要什么样的输入信息才能进行运算。\n\n一个函数里面可以包含任意数量的语句，但是他们必须比def有缩进固定空格。在以下的章节中，我们会使用4个空格作为标准缩进格式。函数的定义是我们将要看到的组合代码块中的一种，它们都有相同的模式：\n\n1. `代码头`，以一个关键词开始，分号结束\n2. `代码体`，包含一句或者多句Python语句，每一句都比`代码头`增加相同的缩进（4个空格）\n\n\n\n\n\n\n\n","source":"_posts/如何像计算机科学家那样思考Python篇（第三章）.md","raw":"---\ntitle: 如何像计算机科学家那样思考Python篇（第三章）\ndate: 2016-06-07 17:16:15\ndescription: 第三章：函数\ncategories: python从零单排\ntags:\n- Python\n---\n# 定义与使用\n在编程的时候，一个**函数**是对一序列执行某种操作的语句的称谓。这种操作会被写明在**函数声明**里面。在Python中，一个函数声明的语法长这样：\n\n\n```Python\ndef NAME( LIST OF PARAMETERS ):\n    STATEMENTS\n```\n\n函数名字（NAME）可以是任何除了Python关键字之外的你定义的名字。参数列表（LIST OF PARAMETERS）指明你的函数需要什么样的输入信息才能进行运算。\n\n一个函数里面可以包含任意数量的语句，但是他们必须比def有缩进固定空格。在以下的章节中，我们会使用4个空格作为标准缩进格式。函数的定义是我们将要看到的组合代码块中的一种，它们都有相同的模式：\n\n1. `代码头`，以一个关键词开始，分号结束\n2. `代码体`，包含一句或者多句Python语句，每一句都比`代码头`增加相同的缩进（4个空格）\n\n\n\n\n\n\n\n","slug":"如何像计算机科学家那样思考Python篇（第三章）","published":1,"updated":"2016-06-21T02:54:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdfe0012npu2d1vi0pp5","content":"<h1 id=\"定义与使用\"><a href=\"#定义与使用\" class=\"headerlink\" title=\"定义与使用\"></a>定义与使用</h1><p>在编程的时候，一个<strong>函数</strong>是对一序列执行某种操作的语句的称谓。这种操作会被写明在<strong>函数声明</strong>里面。在Python中，一个函数声明的语法长这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">NAME</span><span class=\"params\">( LIST OF PARAMETERS )</span>:</span></span><br><span class=\"line\">    STATEMENTS</span><br></pre></td></tr></table></figure>\n<p>函数名字（NAME）可以是任何除了Python关键字之外的你定义的名字。参数列表（LIST OF PARAMETERS）指明你的函数需要什么样的输入信息才能进行运算。</p>\n<p>一个函数里面可以包含任意数量的语句，但是他们必须比def有缩进固定空格。在以下的章节中，我们会使用4个空格作为标准缩进格式。函数的定义是我们将要看到的组合代码块中的一种，它们都有相同的模式：</p>\n<ol>\n<li><code>代码头</code>，以一个关键词开始，分号结束</li>\n<li><code>代码体</code>，包含一句或者多句Python语句，每一句都比<code>代码头</code>增加相同的缩进（4个空格）</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"定义与使用\"><a href=\"#定义与使用\" class=\"headerlink\" title=\"定义与使用\"></a>定义与使用</h1><p>在编程的时候，一个<strong>函数</strong>是对一序列执行某种操作的语句的称谓。这种操作会被写明在<strong>函数声明</strong>里面。在Python中，一个函数声明的语法长这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">NAME</span><span class=\"params\">( LIST OF PARAMETERS )</span>:</span></span><br><span class=\"line\">    STATEMENTS</span><br></pre></td></tr></table></figure>\n<p>函数名字（NAME）可以是任何除了Python关键字之外的你定义的名字。参数列表（LIST OF PARAMETERS）指明你的函数需要什么样的输入信息才能进行运算。</p>\n<p>一个函数里面可以包含任意数量的语句，但是他们必须比def有缩进固定空格。在以下的章节中，我们会使用4个空格作为标准缩进格式。函数的定义是我们将要看到的组合代码块中的一种，它们都有相同的模式：</p>\n<ol>\n<li><code>代码头</code>，以一个关键词开始，分号结束</li>\n<li><code>代码体</code>，包含一句或者多句Python语句，每一句都比<code>代码头</code>增加相同的缩进（4个空格）</li>\n</ol>\n"},{"title":"美国游记","date":"2016-04-22T19:20:03.000Z","description":"你是要做一辈子的懦夫，还是要做英雄，哪怕只是几分钟","_content":"\n>你是要做一辈子的懦夫，还是要做英雄，哪怕只是几分钟。——搏击俱乐部\n\n>This is your life, and it’s ending one minute at a time. \n\n## 前言\n\n我是JIE双学位项目第一届的一名学生，当年阴差阳错的踏上了留学一年的路途（感觉和交流一年好像也差不多。。）。在这里分享一些我自己的经历，写得比较零散，但是希望能给以后的师弟师妹一点帮助。这样哪怕你是自己一个人过来，也有一些参考.\n\n留学之前请你一定要想清楚，真的会很孤单，又或者遇上各种各样困难，但只要你能坚持下来过完这一两年的异国生活，我想你独立生活的经验条也该满了。\n\n周围中国人太多的话感觉和在国内差不多啊\n\n#### update 20151111\n\n呦今天又是一个悲伤的光棍节\n\n万万没想到t-mobile第二个月往后就是每个人29刀。。大家注意下买卡的时候问问清楚\n\n冬天的时候要把家里的暖气长期开在60F，不然水管可能会冻炸哦\n\n#### 到达前\n\n请学好厨艺，好处自己体会，都是泪。。\n\n记得填好cmu health service上面的immutation form，不然麻烦。如果你做过了体检，那个tb testing记得选你做过测试没有结核病\n\n记得找人接机，cssa有相关服务快去找。快多加微信群找小伙伴，我们jie本来就是一个班倒还好。\n\n能买到临时手机卡就最好，一下飞机就能用，用一个月的那种。没有网络没有电话真的麻烦。\n\n#### 选房子\n\n注意选房子能包较多费用的比较好点，离学校越近越好（当然要考虑价钱），水电网气暖要自己开的话比较麻烦。apartment在我观察来看房屋情况都比house要好些，公寓管理公司通常会管理得好一些，当然apartment住不了太多人但是House可以住不少。\n\n还有要注意钥匙怎么拿，如果没人帮你拿，你又是最早来到宿舍的人，最好飞机订早上到达的，这样你还有一个白天的时间去找房东拿钥匙；如果你是深夜到达那就麻烦咯。\n\n注意先问一下有没有洗衣机和烘干机，以及使用需不需要钱\n\n#### 在cmu打印\n\n去图书馆用公共电脑（使用你的andrew id和密码logon），把你要打印的东西在这些公用电脑上打印，选好格式最后会出一个窗口，第一行是andrew id（刷谁的校园卡就填谁的id），第二行是密码（可选），第三行是打印任务的名字（可选）。填完之后去打印机旁边会有个刷卡的地方刷卡打印。\n\n或者你可以上 <http://www.cmu.edu/computing/clusters/printing/> 给自己的电脑安装个插件，就可以在家上传打印任务，然后去图书馆或者有打印机的地方刷卡打印。\n\n###2015.8.11\n\n#### 电话\n\n尽快办电话卡。t-mobile是最便宜的，我们5人共享套餐，一人一个月29刀，就是住在松鼠山有的老房子室内信号不好，考虑清楚这个。还有一个选择是AT&T，就是贵点，不过人够多family plan也还可以接受。高速流量大小1GB就够了差不多\n\n记得下个google map查地图和公交线路。busgazer查实时公交到达信息,其实google map 上面也有公交信息。\n\n今天刚到匹兹堡，早上去warner hall 拿学生证，注意分单日双日，hub的开门时间是不同的。hub在warner hall basement。有了学生证可以免费坐公交，还可以打印东西（每个人有40刀quota）。\n\n拿到学生证去warner hall对面的bookstore买点纪念品，杯子不错买个便宜的好了。\n\n在bootstore旁边的 university center basement有pnc bank，拿着护照和student id去开户，pnc bank每个月有一笔免费汇入.办完以后当天可能不能用，第二天就能在atm机上存钱，但是online banking 要等邮件通知。实体的银行卡大概过10个工作日左右才能邮寄到你家。\n\n#### 宜家\n\n下午去了宜家（真tmd远），坐28x(注意这辆车往机场方向在最开始这段路是只上不下的)。去宜家看家具，想买那个就在他旁边有张说明的纸拿着，走到最后会有个大仓库，看着你的纸上面的商品信息去取配件（特别是床，分好几样东西:美帝的床(从小到大分别是twin,full,queen,king,twin size大约是1.9m*1m)是要床框（一个木头的框子）、床中梁（大小大于twin size才会需要）、床板三件东西组成），记得拿小推车。\n\n记得宜家的送货要给小费啊，5刀差不多了\n\n#### 厨具\n\n***记得买平底锅要带盖子！要带盖子！要带盖子！***\n\n###2015.8.12\n\n#### 水电网热开户\n\n如果需要办电网水热的就开始打电话吧。这个的目的是原本你的house是前任屋主pay the bill，现在你搬进来需要更新付款人信息，所以你要打电话去开通新账户，到时候月尾公司会给你寄账单付了就好。\n\n请多打电话确认账单账户开通好没有，我就是因为没弄好拖了两三个月。注意有的房东可能因此收___服务费___别怪我没提醒你。。\n\n#### 网络\n\n感觉大部分人都用comcast。你可以直接打电话给comcast官方电话，弄完以后他们会把路由器和modem邮寄给你（多久我就不清楚了）。或者你可以在街上找这些网络运营商摆摊的报装员，他们会帮你上门安装。\n\n###2015.8.13\n\n今天orientation，记得带上所有要求的资料（早点去坐前面可以早点走）。\n\n#### 亚马逊\n\n亚马逊有个学生会员(student prime)免费使用半年的优惠，推荐使用。注意亚马逊下了订单并不是第一时间扣钱的，关闭境外无卡支付请注意。\n\n###2015.8.14\n\n今天早上去university center地下室的fedex office传真合同给water 公司，每一张传真要1.59刀真是要命。\n\n###2015.8.15\n\n今天去了***华盛顿山***，坐完公交要走好一段路，过一条双层公路桥。华盛顿山还是晚上来比较好（而且不要自己一个人来 /%>_<%）\n中午本来要去waterfront商业区买东西的，结果大神带错路了跑到了***中国超市lotus food company***（坐公交车从学校那边过去这个地方要50分钟以上吧）\n\nps:中超那边有别的买米的店，比lotus便宜，另外有一个叫wholy啥的专门卖肉制品的店，种类超丰富。\n\n推荐叫做永发行的中国超市，在Lotus不远的地方\n\n今天第一次收到了***亚马逊***的快递，果然美帝的快递是不需要签收直接仍在家门口的\n\n###2015.8.17\n\n今天实体银行卡终于发放到信箱里了。前两天你应该会收到一封pnc online banking的邮件，其中说明了要如何enroll in online banking，注意那个account number是 ***__十位__*** 的不要填错，填错三次你就打电话去解封吧。当你开通网上银行以后，如果想要转账给别人，还得再打一次电话，或者去柜台让那些职员帮你unlock账户。\n\n今天还去uhs打了疫苗。就在61c 61d学校 上西天那个雕塑对面那个站，一下车你就能看到一个小门有个红色的棚子。进去先check in 告诉他们你要打疫苗。我本来只用打一个的，他们硬是给我打了三针，还说打完不会有不舒服的，结果第二天我的左手痛的快提不起来。。乙肝疫苗好像一个月之后还得来打一次，说是到时候会给邮件通知。\n\n晚饭是在学校刚刚说的下车那条路上照的orient express，打包带走就可以不用给小费了（新技能get，老板是广州人会讲粤语的哦）\n\n在华盛顿山那边有个叫做河流赌场的地方\n\n今天还有一个全校性的orientation，然而全是讲座我睡过头了没去\n\n###2015.8.19\n\n今天是七夕七夕 呵呵\n\n之前帮助过的一对小情侣他们的感情更稳固了(还要一起来给我悲伤的朋友圈点赞。。。)为什么要虐狗。。保护动物不好么。。\n\n我上星期定的comcast网络的设备（路由Modem）过了一个星期都还没到我也是绝望了。。我的运气就没好过。。。\n\n晚饭是和我导师一起去craig st吃的一间叫做***lulu's noodle***的餐馆，导师说那里是附近最好吃的亚洲餐厅（里面的糖醋排骨不错，叫general tso啥的），然而我一顿吃掉了13刀。。。\n\n###2015.8.20\n\n今天晚餐是ece welcome dinner，去phipps什么鬼的地方吃，在坐公交车那条路但是远离主校区的方向有一座全是玻璃外墙的建筑。那边离工学院还比较近。顺便这个晚餐不好吃。。\n\n###2015.8.21\n\n今天电力公司的申请回复发到我的邮箱了，又要我手填一个申请表而且还要把合同复印一份发给他们，开户是有多麻烦。。。我真是给美国人跪了。前两天还是七夕被虐的不要不要的。。谁来救救我。。\n\n寄信可以在邮局或者fedex寄，明知道要我寄合同电力公司还给我一个小小的信封你们脑子瓦特了吗！\n但是我打电话给电力公司客服，她说just ignore the letter，你们的标准流程还真是标准呢。\n\nbad news，comcast说我上个星期的订单不见了，我白等了一个星期的网络。。。结果我还是要找个comcast的业务员上门安装。啊我的运气依然是这么低啊。\n\n好消息是我之前找过一个comcast的业务员，既然之前的订单被丢掉了他就可以来帮我安装网络了，终于我在到达匹兹堡10天后连上了自家的网络\n\n###2015.9.01\n\n电力公司会把账单寄到你的邮箱里面。今天交了房租，因为我们是lobos公司的房子，可以在线交，只用2刀手续费真是值。。\n\n","source":"_posts/美国游记.md","raw":"---\ntitle: 美国游记\ndate: 2016-04-22 15:20:03\ndescription: 你是要做一辈子的懦夫，还是要做英雄，哪怕只是几分钟\ncategories: 日常\ntags:\n- 美国 \n- JIE\n---\n\n>你是要做一辈子的懦夫，还是要做英雄，哪怕只是几分钟。——搏击俱乐部\n\n>This is your life, and it’s ending one minute at a time. \n\n## 前言\n\n我是JIE双学位项目第一届的一名学生，当年阴差阳错的踏上了留学一年的路途（感觉和交流一年好像也差不多。。）。在这里分享一些我自己的经历，写得比较零散，但是希望能给以后的师弟师妹一点帮助。这样哪怕你是自己一个人过来，也有一些参考.\n\n留学之前请你一定要想清楚，真的会很孤单，又或者遇上各种各样困难，但只要你能坚持下来过完这一两年的异国生活，我想你独立生活的经验条也该满了。\n\n周围中国人太多的话感觉和在国内差不多啊\n\n#### update 20151111\n\n呦今天又是一个悲伤的光棍节\n\n万万没想到t-mobile第二个月往后就是每个人29刀。。大家注意下买卡的时候问问清楚\n\n冬天的时候要把家里的暖气长期开在60F，不然水管可能会冻炸哦\n\n#### 到达前\n\n请学好厨艺，好处自己体会，都是泪。。\n\n记得填好cmu health service上面的immutation form，不然麻烦。如果你做过了体检，那个tb testing记得选你做过测试没有结核病\n\n记得找人接机，cssa有相关服务快去找。快多加微信群找小伙伴，我们jie本来就是一个班倒还好。\n\n能买到临时手机卡就最好，一下飞机就能用，用一个月的那种。没有网络没有电话真的麻烦。\n\n#### 选房子\n\n注意选房子能包较多费用的比较好点，离学校越近越好（当然要考虑价钱），水电网气暖要自己开的话比较麻烦。apartment在我观察来看房屋情况都比house要好些，公寓管理公司通常会管理得好一些，当然apartment住不了太多人但是House可以住不少。\n\n还有要注意钥匙怎么拿，如果没人帮你拿，你又是最早来到宿舍的人，最好飞机订早上到达的，这样你还有一个白天的时间去找房东拿钥匙；如果你是深夜到达那就麻烦咯。\n\n注意先问一下有没有洗衣机和烘干机，以及使用需不需要钱\n\n#### 在cmu打印\n\n去图书馆用公共电脑（使用你的andrew id和密码logon），把你要打印的东西在这些公用电脑上打印，选好格式最后会出一个窗口，第一行是andrew id（刷谁的校园卡就填谁的id），第二行是密码（可选），第三行是打印任务的名字（可选）。填完之后去打印机旁边会有个刷卡的地方刷卡打印。\n\n或者你可以上 <http://www.cmu.edu/computing/clusters/printing/> 给自己的电脑安装个插件，就可以在家上传打印任务，然后去图书馆或者有打印机的地方刷卡打印。\n\n###2015.8.11\n\n#### 电话\n\n尽快办电话卡。t-mobile是最便宜的，我们5人共享套餐，一人一个月29刀，就是住在松鼠山有的老房子室内信号不好，考虑清楚这个。还有一个选择是AT&T，就是贵点，不过人够多family plan也还可以接受。高速流量大小1GB就够了差不多\n\n记得下个google map查地图和公交线路。busgazer查实时公交到达信息,其实google map 上面也有公交信息。\n\n今天刚到匹兹堡，早上去warner hall 拿学生证，注意分单日双日，hub的开门时间是不同的。hub在warner hall basement。有了学生证可以免费坐公交，还可以打印东西（每个人有40刀quota）。\n\n拿到学生证去warner hall对面的bookstore买点纪念品，杯子不错买个便宜的好了。\n\n在bootstore旁边的 university center basement有pnc bank，拿着护照和student id去开户，pnc bank每个月有一笔免费汇入.办完以后当天可能不能用，第二天就能在atm机上存钱，但是online banking 要等邮件通知。实体的银行卡大概过10个工作日左右才能邮寄到你家。\n\n#### 宜家\n\n下午去了宜家（真tmd远），坐28x(注意这辆车往机场方向在最开始这段路是只上不下的)。去宜家看家具，想买那个就在他旁边有张说明的纸拿着，走到最后会有个大仓库，看着你的纸上面的商品信息去取配件（特别是床，分好几样东西:美帝的床(从小到大分别是twin,full,queen,king,twin size大约是1.9m*1m)是要床框（一个木头的框子）、床中梁（大小大于twin size才会需要）、床板三件东西组成），记得拿小推车。\n\n记得宜家的送货要给小费啊，5刀差不多了\n\n#### 厨具\n\n***记得买平底锅要带盖子！要带盖子！要带盖子！***\n\n###2015.8.12\n\n#### 水电网热开户\n\n如果需要办电网水热的就开始打电话吧。这个的目的是原本你的house是前任屋主pay the bill，现在你搬进来需要更新付款人信息，所以你要打电话去开通新账户，到时候月尾公司会给你寄账单付了就好。\n\n请多打电话确认账单账户开通好没有，我就是因为没弄好拖了两三个月。注意有的房东可能因此收___服务费___别怪我没提醒你。。\n\n#### 网络\n\n感觉大部分人都用comcast。你可以直接打电话给comcast官方电话，弄完以后他们会把路由器和modem邮寄给你（多久我就不清楚了）。或者你可以在街上找这些网络运营商摆摊的报装员，他们会帮你上门安装。\n\n###2015.8.13\n\n今天orientation，记得带上所有要求的资料（早点去坐前面可以早点走）。\n\n#### 亚马逊\n\n亚马逊有个学生会员(student prime)免费使用半年的优惠，推荐使用。注意亚马逊下了订单并不是第一时间扣钱的，关闭境外无卡支付请注意。\n\n###2015.8.14\n\n今天早上去university center地下室的fedex office传真合同给water 公司，每一张传真要1.59刀真是要命。\n\n###2015.8.15\n\n今天去了***华盛顿山***，坐完公交要走好一段路，过一条双层公路桥。华盛顿山还是晚上来比较好（而且不要自己一个人来 /%>_<%）\n中午本来要去waterfront商业区买东西的，结果大神带错路了跑到了***中国超市lotus food company***（坐公交车从学校那边过去这个地方要50分钟以上吧）\n\nps:中超那边有别的买米的店，比lotus便宜，另外有一个叫wholy啥的专门卖肉制品的店，种类超丰富。\n\n推荐叫做永发行的中国超市，在Lotus不远的地方\n\n今天第一次收到了***亚马逊***的快递，果然美帝的快递是不需要签收直接仍在家门口的\n\n###2015.8.17\n\n今天实体银行卡终于发放到信箱里了。前两天你应该会收到一封pnc online banking的邮件，其中说明了要如何enroll in online banking，注意那个account number是 ***__十位__*** 的不要填错，填错三次你就打电话去解封吧。当你开通网上银行以后，如果想要转账给别人，还得再打一次电话，或者去柜台让那些职员帮你unlock账户。\n\n今天还去uhs打了疫苗。就在61c 61d学校 上西天那个雕塑对面那个站，一下车你就能看到一个小门有个红色的棚子。进去先check in 告诉他们你要打疫苗。我本来只用打一个的，他们硬是给我打了三针，还说打完不会有不舒服的，结果第二天我的左手痛的快提不起来。。乙肝疫苗好像一个月之后还得来打一次，说是到时候会给邮件通知。\n\n晚饭是在学校刚刚说的下车那条路上照的orient express，打包带走就可以不用给小费了（新技能get，老板是广州人会讲粤语的哦）\n\n在华盛顿山那边有个叫做河流赌场的地方\n\n今天还有一个全校性的orientation，然而全是讲座我睡过头了没去\n\n###2015.8.19\n\n今天是七夕七夕 呵呵\n\n之前帮助过的一对小情侣他们的感情更稳固了(还要一起来给我悲伤的朋友圈点赞。。。)为什么要虐狗。。保护动物不好么。。\n\n我上星期定的comcast网络的设备（路由Modem）过了一个星期都还没到我也是绝望了。。我的运气就没好过。。。\n\n晚饭是和我导师一起去craig st吃的一间叫做***lulu's noodle***的餐馆，导师说那里是附近最好吃的亚洲餐厅（里面的糖醋排骨不错，叫general tso啥的），然而我一顿吃掉了13刀。。。\n\n###2015.8.20\n\n今天晚餐是ece welcome dinner，去phipps什么鬼的地方吃，在坐公交车那条路但是远离主校区的方向有一座全是玻璃外墙的建筑。那边离工学院还比较近。顺便这个晚餐不好吃。。\n\n###2015.8.21\n\n今天电力公司的申请回复发到我的邮箱了，又要我手填一个申请表而且还要把合同复印一份发给他们，开户是有多麻烦。。。我真是给美国人跪了。前两天还是七夕被虐的不要不要的。。谁来救救我。。\n\n寄信可以在邮局或者fedex寄，明知道要我寄合同电力公司还给我一个小小的信封你们脑子瓦特了吗！\n但是我打电话给电力公司客服，她说just ignore the letter，你们的标准流程还真是标准呢。\n\nbad news，comcast说我上个星期的订单不见了，我白等了一个星期的网络。。。结果我还是要找个comcast的业务员上门安装。啊我的运气依然是这么低啊。\n\n好消息是我之前找过一个comcast的业务员，既然之前的订单被丢掉了他就可以来帮我安装网络了，终于我在到达匹兹堡10天后连上了自家的网络\n\n###2015.9.01\n\n电力公司会把账单寄到你的邮箱里面。今天交了房租，因为我们是lobos公司的房子，可以在线交，只用2刀手续费真是值。。\n\n","slug":"美国游记","published":1,"updated":"2016-05-30T08:49:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis7ypdfg0015npu2rpgcpgw6","content":"<blockquote>\n<p>你是要做一辈子的懦夫，还是要做英雄，哪怕只是几分钟。——搏击俱乐部</p>\n<p>This is your life, and it’s ending one minute at a time. </p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我是JIE双学位项目第一届的一名学生，当年阴差阳错的踏上了留学一年的路途（感觉和交流一年好像也差不多。。）。在这里分享一些我自己的经历，写得比较零散，但是希望能给以后的师弟师妹一点帮助。这样哪怕你是自己一个人过来，也有一些参考.</p>\n<p>留学之前请你一定要想清楚，真的会很孤单，又或者遇上各种各样困难，但只要你能坚持下来过完这一两年的异国生活，我想你独立生活的经验条也该满了。</p>\n<p>周围中国人太多的话感觉和在国内差不多啊</p>\n<h4 id=\"update-20151111\"><a href=\"#update-20151111\" class=\"headerlink\" title=\"update 20151111\"></a>update 20151111</h4><p>呦今天又是一个悲伤的光棍节</p>\n<p>万万没想到t-mobile第二个月往后就是每个人29刀。。大家注意下买卡的时候问问清楚</p>\n<p>冬天的时候要把家里的暖气长期开在60F，不然水管可能会冻炸哦</p>\n<h4 id=\"到达前\"><a href=\"#到达前\" class=\"headerlink\" title=\"到达前\"></a>到达前</h4><p>请学好厨艺，好处自己体会，都是泪。。</p>\n<p>记得填好cmu health service上面的immutation form，不然麻烦。如果你做过了体检，那个tb testing记得选你做过测试没有结核病</p>\n<p>记得找人接机，cssa有相关服务快去找。快多加微信群找小伙伴，我们jie本来就是一个班倒还好。</p>\n<p>能买到临时手机卡就最好，一下飞机就能用，用一个月的那种。没有网络没有电话真的麻烦。</p>\n<h4 id=\"选房子\"><a href=\"#选房子\" class=\"headerlink\" title=\"选房子\"></a>选房子</h4><p>注意选房子能包较多费用的比较好点，离学校越近越好（当然要考虑价钱），水电网气暖要自己开的话比较麻烦。apartment在我观察来看房屋情况都比house要好些，公寓管理公司通常会管理得好一些，当然apartment住不了太多人但是House可以住不少。</p>\n<p>还有要注意钥匙怎么拿，如果没人帮你拿，你又是最早来到宿舍的人，最好飞机订早上到达的，这样你还有一个白天的时间去找房东拿钥匙；如果你是深夜到达那就麻烦咯。</p>\n<p>注意先问一下有没有洗衣机和烘干机，以及使用需不需要钱</p>\n<h4 id=\"在cmu打印\"><a href=\"#在cmu打印\" class=\"headerlink\" title=\"在cmu打印\"></a>在cmu打印</h4><p>去图书馆用公共电脑（使用你的andrew id和密码logon），把你要打印的东西在这些公用电脑上打印，选好格式最后会出一个窗口，第一行是andrew id（刷谁的校园卡就填谁的id），第二行是密码（可选），第三行是打印任务的名字（可选）。填完之后去打印机旁边会有个刷卡的地方刷卡打印。</p>\n<p>或者你可以上 <a href=\"http://www.cmu.edu/computing/clusters/printing/\" target=\"_blank\" rel=\"external\">http://www.cmu.edu/computing/clusters/printing/</a> 给自己的电脑安装个插件，就可以在家上传打印任务，然后去图书馆或者有打印机的地方刷卡打印。</p>\n<p>###2015.8.11</p>\n<h4 id=\"电话\"><a href=\"#电话\" class=\"headerlink\" title=\"电话\"></a>电话</h4><p>尽快办电话卡。t-mobile是最便宜的，我们5人共享套餐，一人一个月29刀，就是住在松鼠山有的老房子室内信号不好，考虑清楚这个。还有一个选择是AT&amp;T，就是贵点，不过人够多family plan也还可以接受。高速流量大小1GB就够了差不多</p>\n<p>记得下个google map查地图和公交线路。busgazer查实时公交到达信息,其实google map 上面也有公交信息。</p>\n<p>今天刚到匹兹堡，早上去warner hall 拿学生证，注意分单日双日，hub的开门时间是不同的。hub在warner hall basement。有了学生证可以免费坐公交，还可以打印东西（每个人有40刀quota）。</p>\n<p>拿到学生证去warner hall对面的bookstore买点纪念品，杯子不错买个便宜的好了。</p>\n<p>在bootstore旁边的 university center basement有pnc bank，拿着护照和student id去开户，pnc bank每个月有一笔免费汇入.办完以后当天可能不能用，第二天就能在atm机上存钱，但是online banking 要等邮件通知。实体的银行卡大概过10个工作日左右才能邮寄到你家。</p>\n<h4 id=\"宜家\"><a href=\"#宜家\" class=\"headerlink\" title=\"宜家\"></a>宜家</h4><p>下午去了宜家（真tmd远），坐28x(注意这辆车往机场方向在最开始这段路是只上不下的)。去宜家看家具，想买那个就在他旁边有张说明的纸拿着，走到最后会有个大仓库，看着你的纸上面的商品信息去取配件（特别是床，分好几样东西:美帝的床(从小到大分别是twin,full,queen,king,twin size大约是1.9m*1m)是要床框（一个木头的框子）、床中梁（大小大于twin size才会需要）、床板三件东西组成），记得拿小推车。</p>\n<p>记得宜家的送货要给小费啊，5刀差不多了</p>\n<h4 id=\"厨具\"><a href=\"#厨具\" class=\"headerlink\" title=\"厨具\"></a>厨具</h4><p><strong><em>记得买平底锅要带盖子！要带盖子！要带盖子！</em></strong></p>\n<p>###2015.8.12</p>\n<h4 id=\"水电网热开户\"><a href=\"#水电网热开户\" class=\"headerlink\" title=\"水电网热开户\"></a>水电网热开户</h4><p>如果需要办电网水热的就开始打电话吧。这个的目的是原本你的house是前任屋主pay the bill，现在你搬进来需要更新付款人信息，所以你要打电话去开通新账户，到时候月尾公司会给你寄账单付了就好。</p>\n<p>请多打电话确认账单账户开通好没有，我就是因为没弄好拖了两三个月。注意有的房东可能因此收<strong><em>服务费</em></strong>别怪我没提醒你。。</p>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><p>感觉大部分人都用comcast。你可以直接打电话给comcast官方电话，弄完以后他们会把路由器和modem邮寄给你（多久我就不清楚了）。或者你可以在街上找这些网络运营商摆摊的报装员，他们会帮你上门安装。</p>\n<p>###2015.8.13</p>\n<p>今天orientation，记得带上所有要求的资料（早点去坐前面可以早点走）。</p>\n<h4 id=\"亚马逊\"><a href=\"#亚马逊\" class=\"headerlink\" title=\"亚马逊\"></a>亚马逊</h4><p>亚马逊有个学生会员(student prime)免费使用半年的优惠，推荐使用。注意亚马逊下了订单并不是第一时间扣钱的，关闭境外无卡支付请注意。</p>\n<p>###2015.8.14</p>\n<p>今天早上去university center地下室的fedex office传真合同给water 公司，每一张传真要1.59刀真是要命。</p>\n<p>###2015.8.15</p>\n<p>今天去了<strong><em>华盛顿山</em></strong>，坐完公交要走好一段路，过一条双层公路桥。华盛顿山还是晚上来比较好（而且不要自己一个人来 /%&gt;_&lt;%）<br>中午本来要去waterfront商业区买东西的，结果大神带错路了跑到了<strong><em>中国超市lotus food company</em></strong>（坐公交车从学校那边过去这个地方要50分钟以上吧）</p>\n<p>ps:中超那边有别的买米的店，比lotus便宜，另外有一个叫wholy啥的专门卖肉制品的店，种类超丰富。</p>\n<p>推荐叫做永发行的中国超市，在Lotus不远的地方</p>\n<p>今天第一次收到了<strong><em>亚马逊</em></strong>的快递，果然美帝的快递是不需要签收直接仍在家门口的</p>\n<p>###2015.8.17</p>\n<p>今天实体银行卡终于发放到信箱里了。前两天你应该会收到一封pnc online banking的邮件，其中说明了要如何enroll in online banking，注意那个account number是 <strong><em><strong>十位</strong></em></strong> 的不要填错，填错三次你就打电话去解封吧。当你开通网上银行以后，如果想要转账给别人，还得再打一次电话，或者去柜台让那些职员帮你unlock账户。</p>\n<p>今天还去uhs打了疫苗。就在61c 61d学校 上西天那个雕塑对面那个站，一下车你就能看到一个小门有个红色的棚子。进去先check in 告诉他们你要打疫苗。我本来只用打一个的，他们硬是给我打了三针，还说打完不会有不舒服的，结果第二天我的左手痛的快提不起来。。乙肝疫苗好像一个月之后还得来打一次，说是到时候会给邮件通知。</p>\n<p>晚饭是在学校刚刚说的下车那条路上照的orient express，打包带走就可以不用给小费了（新技能get，老板是广州人会讲粤语的哦）</p>\n<p>在华盛顿山那边有个叫做河流赌场的地方</p>\n<p>今天还有一个全校性的orientation，然而全是讲座我睡过头了没去</p>\n<p>###2015.8.19</p>\n<p>今天是七夕七夕 呵呵</p>\n<p>之前帮助过的一对小情侣他们的感情更稳固了(还要一起来给我悲伤的朋友圈点赞。。。)为什么要虐狗。。保护动物不好么。。</p>\n<p>我上星期定的comcast网络的设备（路由Modem）过了一个星期都还没到我也是绝望了。。我的运气就没好过。。。</p>\n<p>晚饭是和我导师一起去craig st吃的一间叫做<strong><em>lulu’s noodle</em></strong>的餐馆，导师说那里是附近最好吃的亚洲餐厅（里面的糖醋排骨不错，叫general tso啥的），然而我一顿吃掉了13刀。。。</p>\n<p>###2015.8.20</p>\n<p>今天晚餐是ece welcome dinner，去phipps什么鬼的地方吃，在坐公交车那条路但是远离主校区的方向有一座全是玻璃外墙的建筑。那边离工学院还比较近。顺便这个晚餐不好吃。。</p>\n<p>###2015.8.21</p>\n<p>今天电力公司的申请回复发到我的邮箱了，又要我手填一个申请表而且还要把合同复印一份发给他们，开户是有多麻烦。。。我真是给美国人跪了。前两天还是七夕被虐的不要不要的。。谁来救救我。。</p>\n<p>寄信可以在邮局或者fedex寄，明知道要我寄合同电力公司还给我一个小小的信封你们脑子瓦特了吗！<br>但是我打电话给电力公司客服，她说just ignore the letter，你们的标准流程还真是标准呢。</p>\n<p>bad news，comcast说我上个星期的订单不见了，我白等了一个星期的网络。。。结果我还是要找个comcast的业务员上门安装。啊我的运气依然是这么低啊。</p>\n<p>好消息是我之前找过一个comcast的业务员，既然之前的订单被丢掉了他就可以来帮我安装网络了，终于我在到达匹兹堡10天后连上了自家的网络</p>\n<p>###2015.9.01</p>\n<p>电力公司会把账单寄到你的邮箱里面。今天交了房租，因为我们是lobos公司的房子，可以在线交，只用2刀手续费真是值。。</p>\n","excerpt":"","more":"<blockquote>\n<p>你是要做一辈子的懦夫，还是要做英雄，哪怕只是几分钟。——搏击俱乐部</p>\n<p>This is your life, and it’s ending one minute at a time. </p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我是JIE双学位项目第一届的一名学生，当年阴差阳错的踏上了留学一年的路途（感觉和交流一年好像也差不多。。）。在这里分享一些我自己的经历，写得比较零散，但是希望能给以后的师弟师妹一点帮助。这样哪怕你是自己一个人过来，也有一些参考.</p>\n<p>留学之前请你一定要想清楚，真的会很孤单，又或者遇上各种各样困难，但只要你能坚持下来过完这一两年的异国生活，我想你独立生活的经验条也该满了。</p>\n<p>周围中国人太多的话感觉和在国内差不多啊</p>\n<h4 id=\"update-20151111\"><a href=\"#update-20151111\" class=\"headerlink\" title=\"update 20151111\"></a>update 20151111</h4><p>呦今天又是一个悲伤的光棍节</p>\n<p>万万没想到t-mobile第二个月往后就是每个人29刀。。大家注意下买卡的时候问问清楚</p>\n<p>冬天的时候要把家里的暖气长期开在60F，不然水管可能会冻炸哦</p>\n<h4 id=\"到达前\"><a href=\"#到达前\" class=\"headerlink\" title=\"到达前\"></a>到达前</h4><p>请学好厨艺，好处自己体会，都是泪。。</p>\n<p>记得填好cmu health service上面的immutation form，不然麻烦。如果你做过了体检，那个tb testing记得选你做过测试没有结核病</p>\n<p>记得找人接机，cssa有相关服务快去找。快多加微信群找小伙伴，我们jie本来就是一个班倒还好。</p>\n<p>能买到临时手机卡就最好，一下飞机就能用，用一个月的那种。没有网络没有电话真的麻烦。</p>\n<h4 id=\"选房子\"><a href=\"#选房子\" class=\"headerlink\" title=\"选房子\"></a>选房子</h4><p>注意选房子能包较多费用的比较好点，离学校越近越好（当然要考虑价钱），水电网气暖要自己开的话比较麻烦。apartment在我观察来看房屋情况都比house要好些，公寓管理公司通常会管理得好一些，当然apartment住不了太多人但是House可以住不少。</p>\n<p>还有要注意钥匙怎么拿，如果没人帮你拿，你又是最早来到宿舍的人，最好飞机订早上到达的，这样你还有一个白天的时间去找房东拿钥匙；如果你是深夜到达那就麻烦咯。</p>\n<p>注意先问一下有没有洗衣机和烘干机，以及使用需不需要钱</p>\n<h4 id=\"在cmu打印\"><a href=\"#在cmu打印\" class=\"headerlink\" title=\"在cmu打印\"></a>在cmu打印</h4><p>去图书馆用公共电脑（使用你的andrew id和密码logon），把你要打印的东西在这些公用电脑上打印，选好格式最后会出一个窗口，第一行是andrew id（刷谁的校园卡就填谁的id），第二行是密码（可选），第三行是打印任务的名字（可选）。填完之后去打印机旁边会有个刷卡的地方刷卡打印。</p>\n<p>或者你可以上 <a href=\"http://www.cmu.edu/computing/clusters/printing/\">http://www.cmu.edu/computing/clusters/printing/</a> 给自己的电脑安装个插件，就可以在家上传打印任务，然后去图书馆或者有打印机的地方刷卡打印。</p>\n<p>###2015.8.11</p>\n<h4 id=\"电话\"><a href=\"#电话\" class=\"headerlink\" title=\"电话\"></a>电话</h4><p>尽快办电话卡。t-mobile是最便宜的，我们5人共享套餐，一人一个月29刀，就是住在松鼠山有的老房子室内信号不好，考虑清楚这个。还有一个选择是AT&amp;T，就是贵点，不过人够多family plan也还可以接受。高速流量大小1GB就够了差不多</p>\n<p>记得下个google map查地图和公交线路。busgazer查实时公交到达信息,其实google map 上面也有公交信息。</p>\n<p>今天刚到匹兹堡，早上去warner hall 拿学生证，注意分单日双日，hub的开门时间是不同的。hub在warner hall basement。有了学生证可以免费坐公交，还可以打印东西（每个人有40刀quota）。</p>\n<p>拿到学生证去warner hall对面的bookstore买点纪念品，杯子不错买个便宜的好了。</p>\n<p>在bootstore旁边的 university center basement有pnc bank，拿着护照和student id去开户，pnc bank每个月有一笔免费汇入.办完以后当天可能不能用，第二天就能在atm机上存钱，但是online banking 要等邮件通知。实体的银行卡大概过10个工作日左右才能邮寄到你家。</p>\n<h4 id=\"宜家\"><a href=\"#宜家\" class=\"headerlink\" title=\"宜家\"></a>宜家</h4><p>下午去了宜家（真tmd远），坐28x(注意这辆车往机场方向在最开始这段路是只上不下的)。去宜家看家具，想买那个就在他旁边有张说明的纸拿着，走到最后会有个大仓库，看着你的纸上面的商品信息去取配件（特别是床，分好几样东西:美帝的床(从小到大分别是twin,full,queen,king,twin size大约是1.9m*1m)是要床框（一个木头的框子）、床中梁（大小大于twin size才会需要）、床板三件东西组成），记得拿小推车。</p>\n<p>记得宜家的送货要给小费啊，5刀差不多了</p>\n<h4 id=\"厨具\"><a href=\"#厨具\" class=\"headerlink\" title=\"厨具\"></a>厨具</h4><p><strong><em>记得买平底锅要带盖子！要带盖子！要带盖子！</em></strong></p>\n<p>###2015.8.12</p>\n<h4 id=\"水电网热开户\"><a href=\"#水电网热开户\" class=\"headerlink\" title=\"水电网热开户\"></a>水电网热开户</h4><p>如果需要办电网水热的就开始打电话吧。这个的目的是原本你的house是前任屋主pay the bill，现在你搬进来需要更新付款人信息，所以你要打电话去开通新账户，到时候月尾公司会给你寄账单付了就好。</p>\n<p>请多打电话确认账单账户开通好没有，我就是因为没弄好拖了两三个月。注意有的房东可能因此收<strong><em>服务费</em></strong>别怪我没提醒你。。</p>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><p>感觉大部分人都用comcast。你可以直接打电话给comcast官方电话，弄完以后他们会把路由器和modem邮寄给你（多久我就不清楚了）。或者你可以在街上找这些网络运营商摆摊的报装员，他们会帮你上门安装。</p>\n<p>###2015.8.13</p>\n<p>今天orientation，记得带上所有要求的资料（早点去坐前面可以早点走）。</p>\n<h4 id=\"亚马逊\"><a href=\"#亚马逊\" class=\"headerlink\" title=\"亚马逊\"></a>亚马逊</h4><p>亚马逊有个学生会员(student prime)免费使用半年的优惠，推荐使用。注意亚马逊下了订单并不是第一时间扣钱的，关闭境外无卡支付请注意。</p>\n<p>###2015.8.14</p>\n<p>今天早上去university center地下室的fedex office传真合同给water 公司，每一张传真要1.59刀真是要命。</p>\n<p>###2015.8.15</p>\n<p>今天去了<strong><em>华盛顿山</em></strong>，坐完公交要走好一段路，过一条双层公路桥。华盛顿山还是晚上来比较好（而且不要自己一个人来 /%&gt;_&lt;%）<br>中午本来要去waterfront商业区买东西的，结果大神带错路了跑到了<strong><em>中国超市lotus food company</em></strong>（坐公交车从学校那边过去这个地方要50分钟以上吧）</p>\n<p>ps:中超那边有别的买米的店，比lotus便宜，另外有一个叫wholy啥的专门卖肉制品的店，种类超丰富。</p>\n<p>推荐叫做永发行的中国超市，在Lotus不远的地方</p>\n<p>今天第一次收到了<strong><em>亚马逊</em></strong>的快递，果然美帝的快递是不需要签收直接仍在家门口的</p>\n<p>###2015.8.17</p>\n<p>今天实体银行卡终于发放到信箱里了。前两天你应该会收到一封pnc online banking的邮件，其中说明了要如何enroll in online banking，注意那个account number是 <strong><em><strong>十位</strong></em></strong> 的不要填错，填错三次你就打电话去解封吧。当你开通网上银行以后，如果想要转账给别人，还得再打一次电话，或者去柜台让那些职员帮你unlock账户。</p>\n<p>今天还去uhs打了疫苗。就在61c 61d学校 上西天那个雕塑对面那个站，一下车你就能看到一个小门有个红色的棚子。进去先check in 告诉他们你要打疫苗。我本来只用打一个的，他们硬是给我打了三针，还说打完不会有不舒服的，结果第二天我的左手痛的快提不起来。。乙肝疫苗好像一个月之后还得来打一次，说是到时候会给邮件通知。</p>\n<p>晚饭是在学校刚刚说的下车那条路上照的orient express，打包带走就可以不用给小费了（新技能get，老板是广州人会讲粤语的哦）</p>\n<p>在华盛顿山那边有个叫做河流赌场的地方</p>\n<p>今天还有一个全校性的orientation，然而全是讲座我睡过头了没去</p>\n<p>###2015.8.19</p>\n<p>今天是七夕七夕 呵呵</p>\n<p>之前帮助过的一对小情侣他们的感情更稳固了(还要一起来给我悲伤的朋友圈点赞。。。)为什么要虐狗。。保护动物不好么。。</p>\n<p>我上星期定的comcast网络的设备（路由Modem）过了一个星期都还没到我也是绝望了。。我的运气就没好过。。。</p>\n<p>晚饭是和我导师一起去craig st吃的一间叫做<strong><em>lulu’s noodle</em></strong>的餐馆，导师说那里是附近最好吃的亚洲餐厅（里面的糖醋排骨不错，叫general tso啥的），然而我一顿吃掉了13刀。。。</p>\n<p>###2015.8.20</p>\n<p>今天晚餐是ece welcome dinner，去phipps什么鬼的地方吃，在坐公交车那条路但是远离主校区的方向有一座全是玻璃外墙的建筑。那边离工学院还比较近。顺便这个晚餐不好吃。。</p>\n<p>###2015.8.21</p>\n<p>今天电力公司的申请回复发到我的邮箱了，又要我手填一个申请表而且还要把合同复印一份发给他们，开户是有多麻烦。。。我真是给美国人跪了。前两天还是七夕被虐的不要不要的。。谁来救救我。。</p>\n<p>寄信可以在邮局或者fedex寄，明知道要我寄合同电力公司还给我一个小小的信封你们脑子瓦特了吗！<br>但是我打电话给电力公司客服，她说just ignore the letter，你们的标准流程还真是标准呢。</p>\n<p>bad news，comcast说我上个星期的订单不见了，我白等了一个星期的网络。。。结果我还是要找个comcast的业务员上门安装。啊我的运气依然是这么低啊。</p>\n<p>好消息是我之前找过一个comcast的业务员，既然之前的订单被丢掉了他就可以来帮我安装网络了，终于我在到达匹兹堡10天后连上了自家的网络</p>\n<p>###2015.9.01</p>\n<p>电力公司会把账单寄到你的邮箱里面。今天交了房租，因为我们是lobos公司的房子，可以在线交，只用2刀手续费真是值。。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cis7ypde90003npu2ic3tizy7","category_id":"cis7ypdej0008npu273r98seo","_id":"cis7ypdew000gnpu22sat6c30"},{"post_id":"cis7ypded0005npu2uijj7w3v","category_id":"cis7ypdet000enpu2z7d6smt5","_id":"cis7ypdf3000mnpu27vysjcey"},{"post_id":"cis7ypdek0009npu2wr1x14m1","category_id":"cis7ypdez000jnpu2443xch1j","_id":"cis7ypdf9000tnpu2tvr6sfq8"},{"post_id":"cis7ypdep000bnpu24z3alszp","category_id":"cis7ypdf4000onpu2zf186z0r","_id":"cis7ypdfe000znpu2gch93s6x"},{"post_id":"cis7ypdf6000rnpu2omuathdx","category_id":"cis7ypdet000enpu2z7d6smt5","_id":"cis7ypdff0013npu2h43p8rgg"},{"post_id":"cis7ypder000dnpu2vnmuld8x","category_id":"cis7ypdf4000onpu2zf186z0r","_id":"cis7ypdfh0016npu2yoquo11s"},{"post_id":"cis7ypdet000fnpu2osor88ct","category_id":"cis7ypdf4000onpu2zf186z0r","_id":"cis7ypdfj001anpu2g6ge92jp"},{"post_id":"cis7ypdew000hnpu2xm477wt3","category_id":"cis7ypdfh0018npu24qwmqivs","_id":"cis7ypdfj001dnpu2g6j87liz"},{"post_id":"cis7ypdf0000knpu2388x865q","category_id":"cis7ypdfj001bnpu2u6otysz0","_id":"cis7ypdfk001hnpu2v93kcmfz"},{"post_id":"cis7ypdf4000pnpu2bfn9v7yp","category_id":"cis7ypdfj001enpu293dabst4","_id":"cis7ypdfk001mnpu2nhadosde"},{"post_id":"cis7ypdfa000wnpu2k9yv82k6","category_id":"cis7ypdfk001jnpu244m3ogjt","_id":"cis7ypdfn001rnpu2retvopf4"},{"post_id":"cis7ypdfd000ynpu2f10lqpn9","category_id":"cis7ypdfk001jnpu244m3ogjt","_id":"cis7ypdfr001vnpu211daqpf5"},{"post_id":"cis7ypdfe0012npu2d1vi0pp5","category_id":"cis7ypdfk001jnpu244m3ogjt","_id":"cis7ypdft001ynpu279x9pu1f"},{"post_id":"cis7ypdfg0015npu2rpgcpgw6","category_id":"cis7ypdfj001enpu293dabst4","_id":"cis7ypdfv0021npu2cnzjpcrs"}],"PostTag":[{"post_id":"cis7ypde90003npu2ic3tizy7","tag_id":"cis7ypdeh0007npu22ioqm5qo","_id":"cis7ypdf6000qnpu2ktp4vutg"},{"post_id":"cis7ypde90003npu2ic3tizy7","tag_id":"cis7ypder000cnpu2rl5ork7o","_id":"cis7ypdf9000snpu27naz44mt"},{"post_id":"cis7ypde90003npu2ic3tizy7","tag_id":"cis7ypdez000inpu2h68p0e63","_id":"cis7ypdfc000xnpu2fm9zfmfg"},{"post_id":"cis7ypded0005npu2uijj7w3v","tag_id":"cis7ypdf3000nnpu2jl8yc05a","_id":"cis7ypdfg0014npu2i78ahfmq"},{"post_id":"cis7ypded0005npu2uijj7w3v","tag_id":"cis7ypdf9000unpu25myqqdau","_id":"cis7ypdfh0017npu2nv05o5mb"},{"post_id":"cis7ypdek0009npu2wr1x14m1","tag_id":"cis7ypdfe0011npu2kk50ylrt","_id":"cis7ypdfk001gnpu2jwc3nabo"},{"post_id":"cis7ypdek0009npu2wr1x14m1","tag_id":"cis7ypdfi0019npu2aaghy7cf","_id":"cis7ypdfk001inpu2ej9anxs0"},{"post_id":"cis7ypdek0009npu2wr1x14m1","tag_id":"cis7ypdfj001cnpu2kticfpcy","_id":"cis7ypdfk001lnpu2bqjjh8b2"},{"post_id":"cis7ypdep000bnpu24z3alszp","tag_id":"cis7ypdfj001fnpu2u2x1fuwa","_id":"cis7ypdfl001nnpu2sciojrd8"},{"post_id":"cis7ypder000dnpu2vnmuld8x","tag_id":"cis7ypdfj001fnpu2u2x1fuwa","_id":"cis7ypdfm001qnpu26f4qga60"},{"post_id":"cis7ypdet000fnpu2osor88ct","tag_id":"cis7ypdfj001fnpu2u2x1fuwa","_id":"cis7ypdfr001unpu2rd4j691l"},{"post_id":"cis7ypdew000hnpu2xm477wt3","tag_id":"cis7ypdfo001tnpu23ltezk96","_id":"cis7ypdfv0020npu210tnaieh"},{"post_id":"cis7ypdew000hnpu2xm477wt3","tag_id":"cis7ypdft001xnpu25p0zap5r","_id":"cis7ypdfv0022npu2ckrfz22s"},{"post_id":"cis7ypdf0000knpu2388x865q","tag_id":"cis7ypdfu001znpu2rcbv3eow","_id":"cis7ypdfw0025npu2ckvolzre"},{"post_id":"cis7ypdf0000knpu2388x865q","tag_id":"cis7ypdfv0023npu2zw9czun9","_id":"cis7ypdfw0026npu2wwo79jnr"},{"post_id":"cis7ypdf2000lnpu2dhllj9dd","tag_id":"cis7ypdfv0024npu2pudlnkpf","_id":"cis7ypdfx0029npu2xnr2taqp"},{"post_id":"cis7ypdf2000lnpu2dhllj9dd","tag_id":"cis7ypdfw0027npu27sxe3fh2","_id":"cis7ypdfy002anpu2ubse3nav"},{"post_id":"cis7ypdf4000pnpu2bfn9v7yp","tag_id":"cis7ypdfw0028npu2lwrnauye","_id":"cis7ypdfy002cnpu2cqwmb1q1"},{"post_id":"cis7ypdf6000rnpu2omuathdx","tag_id":"cis7ypdfy002bnpu2q5s3vipz","_id":"cis7ypdfz002enpu2l7w88qvo"},{"post_id":"cis7ypdfa000wnpu2k9yv82k6","tag_id":"cis7ypdfy002dnpu289qy8an7","_id":"cis7ypdg1002gnpu2szeu0bmb"},{"post_id":"cis7ypdfd000ynpu2f10lqpn9","tag_id":"cis7ypdfy002dnpu289qy8an7","_id":"cis7ypdg1002inpu2yp1kscmu"},{"post_id":"cis7ypdfe0012npu2d1vi0pp5","tag_id":"cis7ypdfy002dnpu289qy8an7","_id":"cis7ypdg2002knpu2mmoz6snz"},{"post_id":"cis7ypdfg0015npu2rpgcpgw6","tag_id":"cis7ypdg2002jnpu29wsqux6v","_id":"cis7ypdg2002lnpu2wodblm1h"},{"post_id":"cis7ypdfg0015npu2rpgcpgw6","tag_id":"cis7ypder000cnpu2rl5ork7o","_id":"cis7ypdg2002mnpu24xtbqdqi"}],"Tag":[{"name":"CMU","_id":"cis7ypdeh0007npu22ioqm5qo"},{"name":"JIE","_id":"cis7ypder000cnpu2rl5ork7o"},{"name":"选课","_id":"cis7ypdez000inpu2h68p0e63"},{"name":"Cloud Computing","_id":"cis7ypdf3000nnpu2jl8yc05a"},{"name":"Linux","_id":"cis7ypdf9000unpu25myqqdau"},{"name":"leetcode","_id":"cis7ypdfe0011npu2kk50ylrt"},{"name":"algorithm","_id":"cis7ypdfi0019npu2aaghy7cf"},{"name":"OO design","_id":"cis7ypdfj001cnpu2kticfpcy"},{"name":"angularjs","_id":"cis7ypdfj001fnpu2u2x1fuwa"},{"name":"C++","_id":"cis7ypdfo001tnpu23ltezk96"},{"name":"C++11","_id":"cis7ypdft001xnpu25p0zap5r"},{"name":"面试","_id":"cis7ypdfu001znpu2rcbv3eow"},{"name":"Google","_id":"cis7ypdfv0023npu2zw9czun9"},{"name":"c++","_id":"cis7ypdfv0024npu2pudlnkpf"},{"name":"xcode","_id":"cis7ypdfw0027npu27sxe3fh2"},{"name":"中大","_id":"cis7ypdfw0028npu2lwrnauye"},{"name":"提问","_id":"cis7ypdfy002bnpu2q5s3vipz"},{"name":"Python","_id":"cis7ypdfy002dnpu289qy8an7"},{"name":"美国","_id":"cis7ypdg2002jnpu29wsqux6v"}]}}